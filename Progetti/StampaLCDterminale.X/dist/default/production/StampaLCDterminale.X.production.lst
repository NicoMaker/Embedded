

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Dec 07 13:58:49 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 22/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16LF877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009C                     	;# 
   105     009D                     	;# 
   106     009E                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     0006                     	;# 
   121     0007                     	;# 
   122     0008                     	;# 
   123     0009                     	;# 
   124     000A                     	;# 
   125     000B                     	;# 
   126     000C                     	;# 
   127     000D                     	;# 
   128     000E                     	;# 
   129     000E                     	;# 
   130     000F                     	;# 
   131     0010                     	;# 
   132     0011                     	;# 
   133     0012                     	;# 
   134     0013                     	;# 
   135     0014                     	;# 
   136     0015                     	;# 
   137     0015                     	;# 
   138     0016                     	;# 
   139     0017                     	;# 
   140     0018                     	;# 
   141     0019                     	;# 
   142     001A                     	;# 
   143     001B                     	;# 
   144     001B                     	;# 
   145     001C                     	;# 
   146     001D                     	;# 
   147     001E                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     0087                     	;# 
   153     0088                     	;# 
   154     0089                     	;# 
   155     008C                     	;# 
   156     008D                     	;# 
   157     008E                     	;# 
   158     0091                     	;# 
   159     0092                     	;# 
   160     0093                     	;# 
   161     0094                     	;# 
   162     0098                     	;# 
   163     0099                     	;# 
   164     009C                     	;# 
   165     009D                     	;# 
   166     009E                     	;# 
   167     009F                     	;# 
   168     010C                     	;# 
   169     010D                     	;# 
   170     010E                     	;# 
   171     010F                     	;# 
   172     018C                     	;# 
   173     018D                     	;# 
   174     001A                     _RCREG	set	26
   175     0008                     _PORTD	set	8
   176     000B                     _INTCON	set	11
   177     0018                     _RCSTA	set	24
   178     0009                     _PORTEbits	set	9
   179     0065                     _RCIF	set	101
   180     0099                     _SPBRG	set	153
   181     008C                     _PIE1	set	140
   182     0098                     _TXSTA	set	152
   183     0087                     _TRISC	set	135
   184     0089                     _TRISE	set	137
   185     0088                     _TRISD	set	136
   186                           
   187                           	psect	cinit
   188     0013                     start_initialization:	
   189                           ; #config settings
   190                           
   191     0013                     __initialization:
   192                           
   193                           ; Clear objects allocated to BANK0
   194     0013  1283               	bcf	3,5	;RP0=0, select bank0
   195     0014  1303               	bcf	3,6	;RP1=0, select bank0
   196     0015  01B2               	clrf	__pbssBANK0& (0+127)
   197     0016  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   198     0017  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   199     0018  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   200     0019  01B6               	clrf	(__pbssBANK0+4)& (0+127)
   201     001A  01B7               	clrf	(__pbssBANK0+5)& (0+127)
   202     001B  01B8               	clrf	(__pbssBANK0+6)& (0+127)
   203     001C  01B9               	clrf	(__pbssBANK0+7)& (0+127)
   204     001D  01BA               	clrf	(__pbssBANK0+8)& (0+127)
   205     001E  01BB               	clrf	(__pbssBANK0+9)& (0+127)
   206     001F  01BC               	clrf	(__pbssBANK0+10)& (0+127)
   207     0020  01BD               	clrf	(__pbssBANK0+11)& (0+127)
   208     0021  01BE               	clrf	(__pbssBANK0+12)& (0+127)
   209     0022                     end_of_initialization:	
   210                           ;End of C runtime variable initialization code
   211                           
   212     0022                     __end_of__initialization:
   213     0022  0183               	clrf	3
   214     0023  120A  118A  29DA   	ljmp	_main	;jump to C main() function
   215                           
   216                           	psect	bssBANK0
   217     0032                     __pbssBANK0:
   218     0032                     _result:
   219     0032                     	ds	1
   220     0033                     _endSend:
   221     0033                     	ds	1
   222     0034                     _index:
   223     0034                     	ds	1
   224     0035                     _string:
   225     0035                     	ds	10
   226                           
   227                           	psect	cstackCOMMON
   228     0070                     __pcstackCOMMON:
   229     0070                     ?_initLCD:
   230     0070                     ?_SumNumberFromString:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     ?_printStringLCD:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ?_main:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0070                     ?_ISR:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ??_ISR:	
   243                           ; 1 bytes @ 0x0
   244                           
   245                           
   246                           ; 1 bytes @ 0x0
   247     0070                     	ds	4
   248     0074                     ??_SumNumberFromString:
   249     0074                     ?_sendLCD:	
   250                           ; 1 bytes @ 0x4
   251                           
   252     0074                     ??___aldiv:	
   253                           ; 1 bytes @ 0x4
   254                           
   255     0074                     sendLCD@rs:	
   256                           ; 1 bytes @ 0x4
   257                           
   258                           
   259                           ; 1 bytes @ 0x4
   260     0074                     	ds	1
   261     0075                     ??_initUart:
   262     0075                     ??_sendLCD:	
   263                           ; 1 bytes @ 0x5
   264                           
   265                           
   266                           ; 1 bytes @ 0x5
   267     0075                     	ds	2
   268     0077                     sendLCD@dato:
   269                           
   270                           ; 1 bytes @ 0x7
   271     0077                     	ds	1
   272     0078                     ??_initLCD:
   273     0078                     ??_printStringLCD:	
   274                           ; 1 bytes @ 0x8
   275                           
   276                           
   277                           ; 1 bytes @ 0x8
   278     0078                     	ds	2
   279     007A                     ??_main:
   280                           
   281                           	psect	cstackBANK0
   282     0020                     __pcstackBANK0:	
   283                           ; 1 bytes @ 0xA
   284                           
   285     0020                     ?___aldiv:
   286     0020                     SumNumberFromString@sum:	
   287                           ; 4 bytes @ 0x0
   288                           
   289     0020                     printStringLCD@s:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0020                     ___aldiv@divisor:	
   293                           ; 1 bytes @ 0x0
   294                           
   295                           
   296                           ; 4 bytes @ 0x0
   297     0020                     	ds	1
   298     0021                     SumNumberFromString@calc:
   299     0021                     printStringLCD@i:	
   300                           ; 1 bytes @ 0x1
   301                           
   302                           
   303                           ; 1 bytes @ 0x1
   304     0021                     	ds	1
   305     0022                     SumNumberFromString@i:
   306                           
   307                           ; 1 bytes @ 0x2
   308     0022                     	ds	1
   309     0023                     SumNumberFromString@j:
   310                           
   311                           ; 1 bytes @ 0x3
   312     0023                     	ds	1
   313     0024                     ___aldiv@dividend:
   314                           
   315                           ; 4 bytes @ 0x4
   316     0024                     	ds	4
   317     0028                     ___aldiv@counter:
   318                           
   319                           ; 1 bytes @ 0x8
   320     0028                     	ds	1
   321     0029                     ___aldiv@sign:
   322                           
   323                           ; 1 bytes @ 0x9
   324     0029                     	ds	1
   325     002A                     ___aldiv@quotient:
   326                           
   327                           ; 4 bytes @ 0xA
   328     002A                     	ds	4
   329     002E                     ?_initUart:
   330     002E                     initUart@baudRate:	
   331                           ; 1 bytes @ 0xE
   332                           
   333                           
   334                           ; 4 bytes @ 0xE
   335     002E                     	ds	4
   336                           
   337                           	psect	maintext
   338     01DA                     __pmaintext:	
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 49 in file "newmain.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;		None
   349 ;; Return value:  Size  Location     Type
   350 ;;                  1    wreg      void 
   351 ;; Registers used:
   352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : B00/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   358 ;;      Params:         0       0       0       0       0
   359 ;;      Locals:         0       0       0       0       0
   360 ;;      Temps:          0       0       0       0       0
   361 ;;      Totals:         0       0       0       0       0
   362 ;;Total ram usage:        0 bytes
   363 ;; Hardware stack levels required when called: 3
   364 ;; This function calls:
   365 ;;		_SumNumberFromString
   366 ;;		_initLCD
   367 ;;		_initUart
   368 ;;		_printStringLCD
   369 ;; This function is called by:
   370 ;;		Startup code after reset
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374     01DA                     _main:	
   375                           ;psect for function _main
   376                           
   377     01DA                     l910:	
   378                           ;incstack = 0
   379                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   380                           
   381                           
   382                           ;newmain.c: 50:     initLCD();
   383     01DA  120A  118A  20C3  120A  118A  	fcall	_initLCD
   384                           
   385                           ;newmain.c: 51:     initUart(9600);
   386     01DF  3000               	movlw	0
   387     01E0  1283               	bcf	3,5	;RP0=0, select bank0
   388     01E1  1303               	bcf	3,6	;RP1=0, select bank0
   389     01E2  00B1               	movwf	initUart@baudRate+3
   390     01E3  3000               	movlw	0
   391     01E4  00B0               	movwf	initUart@baudRate+2
   392     01E5  3025               	movlw	37
   393     01E6  00AF               	movwf	initUart@baudRate+1
   394     01E7  3080               	movlw	128
   395     01E8  00AE               	movwf	initUart@baudRate
   396     01E9  120A  118A  2125  120A  118A  	fcall	_initUart
   397     01EE                     l912:
   398                           
   399                           ;newmain.c: 54:     {;newmain.c: 55:         if(endSend)
   400     01EE  1283               	bcf	3,5	;RP0=0, select bank0
   401     01EF  1303               	bcf	3,6	;RP1=0, select bank0
   402     01F0  0833               	movf	_endSend,w
   403     01F1  1903               	btfsc	3,2
   404     01F2  29F4               	goto	u341
   405     01F3  29F5               	goto	u340
   406     01F4                     u341:
   407     01F4  29EE               	goto	l912
   408     01F5                     u340:
   409     01F5                     l914:
   410                           
   411                           ;newmain.c: 56:         {;newmain.c: 57:             result = SumNumberFromString(string
      +                          );
   412     01F5  3035               	movlw	(low (_string| 0))& (0+255)
   413     01F6  120A  118A  216A  120A  118A  	fcall	_SumNumberFromString
   414     01FB  1283               	bcf	3,5	;RP0=0, select bank0
   415     01FC  1303               	bcf	3,6	;RP1=0, select bank0
   416     01FD  00B2               	movwf	_result
   417                           
   418                           ;newmain.c: 60:             printStringLCD(string);
   419     01FE  3035               	movlw	(low (_string| 0))& (0+255)
   420     01FF  120A  118A  21A3  120A  118A  	fcall	_printStringLCD
   421     0204                     l916:
   422                           
   423                           ;newmain.c: 63:             endSend = 0;
   424     0204  1283               	bcf	3,5	;RP0=0, select bank0
   425     0205  1303               	bcf	3,6	;RP1=0, select bank0
   426     0206  01B3               	clrf	_endSend
   427     0207                     l918:
   428                           
   429                           ;newmain.c: 64:             index = 0;
   430     0207  01B4               	clrf	_index
   431     0208  29EE               	goto	l912
   432     0209  120A  118A  2810   	ljmp	start
   433     020C                     __end_of_main:
   434                           
   435                           	psect	text1
   436     01A3                     __ptext1:	
   437 ;; *************** function _printStringLCD *****************
   438 ;; Defined at:
   439 ;;		line 135 in file "newmain.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;  s               1    wreg     PTR unsigned char 
   442 ;;		 -> string(10), 
   443 ;; Auto vars:     Size  Location     Type
   444 ;;  s               1    0[BANK0 ] PTR unsigned char 
   445 ;;		 -> string(10), 
   446 ;;  i               1    1[BANK0 ] unsigned char 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         0       2       0       0       0
   458 ;;      Temps:          1       0       0       0       0
   459 ;;      Totals:         1       2       0       0       0
   460 ;;Total ram usage:        3 bytes
   461 ;; Hardware stack levels used: 1
   462 ;; Hardware stack levels required when called: 2
   463 ;; This function calls:
   464 ;;		_sendLCD
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470     01A3                     _printStringLCD:	
   471                           ;psect for function _printStringLCD
   472                           
   473                           
   474                           ;incstack = 0
   475                           ; Regs used in _printStringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   476                           ;printStringLCD@s stored from wreg
   477     01A3  1283               	bcf	3,5	;RP0=0, select bank0
   478     01A4  1303               	bcf	3,6	;RP1=0, select bank0
   479     01A5  00A0               	movwf	printStringLCD@s
   480     01A6                     l900:
   481                           
   482                           ;newmain.c: 136:     char i = 0;
   483     01A6  01A1               	clrf	printStringLCD@i
   484                           
   485                           ;newmain.c: 137:     while (s[i] != '\0') {
   486     01A7  29BB               	goto	l906
   487     01A8                     l902:
   488                           
   489                           ;newmain.c: 138:         sendLCD(s[i++], 1);
   490     01A8  01F4               	clrf	sendLCD@rs
   491     01A9  0AF4               	incf	sendLCD@rs,f
   492     01AA  0821               	movf	printStringLCD@i,w
   493     01AB  0720               	addwf	printStringLCD@s,w
   494     01AC  00F8               	movwf	??_printStringLCD
   495     01AD  0878               	movf	??_printStringLCD,w
   496     01AE  0084               	movwf	4
   497     01AF  0800               	movf	0,w
   498     01B0  120A  118A  2237  120A  118A  	fcall	_sendLCD
   499     01B5                     l904:
   500     01B5  3001               	movlw	1
   501     01B6  00FF               	movwf	btemp+1
   502     01B7  087F               	movf	btemp+1,w
   503     01B8  1283               	bcf	3,5	;RP0=0, select bank0
   504     01B9  1303               	bcf	3,6	;RP1=0, select bank0
   505     01BA  07A1               	addwf	printStringLCD@i,f
   506     01BB                     l906:
   507                           
   508                           ;newmain.c: 137:     while (s[i] != '\0') {
   509     01BB  0821               	movf	printStringLCD@i,w
   510     01BC  0720               	addwf	printStringLCD@s,w
   511     01BD  00F8               	movwf	??_printStringLCD
   512     01BE  0878               	movf	??_printStringLCD,w
   513     01BF  0084               	movwf	4
   514     01C0  1383               	bcf	3,7	;select IRP bank0
   515     01C1  0800               	movf	0,w
   516     01C2  1D03               	btfss	3,2
   517     01C3  29C5               	goto	u331
   518     01C4  29C6               	goto	u330
   519     01C5                     u331:
   520     01C5  29A8               	goto	l902
   521     01C6                     u330:
   522     01C6                     l908:
   523                           
   524                           ;newmain.c: 141:     sendLCD('=', 1);
   525     01C6  01F4               	clrf	sendLCD@rs
   526     01C7  0AF4               	incf	sendLCD@rs,f
   527     01C8  303D               	movlw	61
   528     01C9  120A  118A  2237  120A  118A  	fcall	_sendLCD
   529                           
   530                           ;newmain.c: 142:     sendLCD('0'+result , 1);
   531     01CE  01F4               	clrf	sendLCD@rs
   532     01CF  0AF4               	incf	sendLCD@rs,f
   533     01D0  1283               	bcf	3,5	;RP0=0, select bank0
   534     01D1  1303               	bcf	3,6	;RP1=0, select bank0
   535     01D2  0832               	movf	_result,w
   536     01D3  3E30               	addlw	48
   537     01D4  120A  118A  2237  120A  118A  	fcall	_sendLCD
   538     01D9                     l77:
   539     01D9  0008               	return
   540     01DA                     __end_of_printStringLCD:
   541                           
   542                           	psect	text2
   543     0125                     __ptext2:	
   544 ;; *************** function _initUart *****************
   545 ;; Defined at:
   546 ;;		line 92 in file "newmain.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  baudRate        4   14[BANK0 ] long 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   560 ;;      Params:         0       4       0       0       0
   561 ;;      Locals:         0       0       0       0       0
   562 ;;      Temps:          4       0       0       0       0
   563 ;;      Totals:         4       4       0       0       0
   564 ;;Total ram usage:        8 bytes
   565 ;; Hardware stack levels used: 1
   566 ;; Hardware stack levels required when called: 2
   567 ;; This function calls:
   568 ;;		___aldiv
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574     0125                     _initUart:	
   575                           ;psect for function _initUart
   576                           
   577     0125                     l868:	
   578                           ;incstack = 0
   579                           ; Regs used in _initUart: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   580                           
   581                           
   582                           ;newmain.c: 94:     TRISC |= 0x80;
   583     0125  1683               	bsf	3,5	;RP0=1, select bank1
   584     0126  1303               	bcf	3,6	;RP1=0, select bank1
   585     0127  1787               	bsf	7,7	;volatile
   586     0128                     l870:
   587                           
   588                           ;newmain.c: 95:     TRISC &= ~0x40;
   589     0128  30BF               	movlw	191
   590     0129  00FF               	movwf	btemp+1
   591     012A  087F               	movf	btemp+1,w
   592     012B  0587               	andwf	7,f	;volatile
   593     012C                     l872:
   594                           
   595                           ;newmain.c: 97:     TXSTA |= 0x20;
   596     012C  1698               	bsf	24,5	;volatile
   597                           
   598                           ;newmain.c: 98:     RCSTA |= 0x90;
   599     012D  3090               	movlw	144
   600     012E  00FF               	movwf	btemp+1
   601     012F  087F               	movf	btemp+1,w
   602     0130  1283               	bcf	3,5	;RP0=0, select bank0
   603     0131  1303               	bcf	3,6	;RP1=0, select bank0
   604     0132  0498               	iorwf	24,f	;volatile
   605                           
   606                           ;newmain.c: 99:     INTCON |= 0xC0;
   607     0133  30C0               	movlw	192
   608     0134  00FF               	movwf	btemp+1
   609     0135  087F               	movf	btemp+1,w
   610     0136  048B               	iorwf	11,f	;volatile
   611     0137                     l874:
   612                           
   613                           ;newmain.c: 100:     PIE1 |= 0x20;
   614     0137  1683               	bsf	3,5	;RP0=1, select bank1
   615     0138  1303               	bcf	3,6	;RP1=0, select bank1
   616     0139  168C               	bsf	12,5	;volatile
   617     013A                     l876:
   618                           
   619                           ;newmain.c: 103:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   620     013A  1283               	bcf	3,5	;RP0=0, select bank0
   621     013B  1303               	bcf	3,6	;RP1=0, select bank0
   622     013C  082E               	movf	initUart@baudRate,w
   623     013D  00F5               	movwf	??_initUart
   624     013E  082F               	movf	initUart@baudRate+1,w
   625     013F  00F6               	movwf	??_initUart+1
   626     0140  0830               	movf	initUart@baudRate+2,w
   627     0141  00F7               	movwf	??_initUart+2
   628     0142  0831               	movf	initUart@baudRate+3,w
   629     0143  00F8               	movwf	??_initUart+3
   630     0144  3006               	movlw	6
   631     0145                     u295:
   632     0145  1003               	clrc
   633     0146  0DF5               	rlf	??_initUart,f
   634     0147  0DF6               	rlf	??_initUart+1,f
   635     0148  0DF7               	rlf	??_initUart+2,f
   636     0149  0DF8               	rlf	??_initUart+3,f
   637     014A                     u290:
   638     014A  3EFF               	addlw	-1
   639     014B  1D03               	skipz
   640     014C  2945               	goto	u295
   641     014D  0878               	movf	??_initUart+3,w
   642     014E  00A3               	movwf	___aldiv@divisor+3
   643     014F  0877               	movf	??_initUart+2,w
   644     0150  00A2               	movwf	___aldiv@divisor+2
   645     0151  0876               	movf	??_initUart+1,w
   646     0152  00A1               	movwf	___aldiv@divisor+1
   647     0153  0875               	movf	??_initUart,w
   648     0154  00A0               	movwf	___aldiv@divisor
   649     0155  3000               	movlw	0
   650     0156  00A7               	movwf	___aldiv@dividend+3
   651     0157  307A               	movlw	122
   652     0158  00A6               	movwf	___aldiv@dividend+2
   653     0159  3012               	movlw	18
   654     015A  00A5               	movwf	___aldiv@dividend+1
   655     015B  3000               	movlw	0
   656     015C  00A4               	movwf	___aldiv@dividend
   657     015D  120A  118A  2026  120A  118A  	fcall	___aldiv
   658     0162  1283               	bcf	3,5	;RP0=0, select bank0
   659     0163  1303               	bcf	3,6	;RP1=0, select bank0
   660     0164  0820               	movf	?___aldiv,w
   661     0165  3EFF               	addlw	255
   662     0166  1683               	bsf	3,5	;RP0=1, select bank1
   663     0167  1303               	bcf	3,6	;RP1=0, select bank1
   664     0168  0099               	movwf	25	;volatile
   665     0169                     l59:
   666     0169  0008               	return
   667     016A                     __end_of_initUart:
   668                           
   669                           	psect	text3
   670     0026                     __ptext3:	
   671 ;; *************** function ___aldiv *****************
   672 ;; Defined at:
   673 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  divisor         4    0[BANK0 ] long 
   676 ;;  dividend        4    4[BANK0 ] long 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  quotient        4   10[BANK0 ] long 
   679 ;;  sign            1    9[BANK0 ] unsigned char 
   680 ;;  counter         1    8[BANK0 ] unsigned char 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  4    0[BANK0 ] long 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0, btemp+1
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   690 ;;      Params:         0       8       0       0       0
   691 ;;      Locals:         0       6       0       0       0
   692 ;;      Temps:          1       0       0       0       0
   693 ;;      Totals:         1      14       0       0       0
   694 ;;Total ram usage:       15 bytes
   695 ;; Hardware stack levels used: 1
   696 ;; Hardware stack levels required when called: 1
   697 ;; This function calls:
   698 ;;		Nothing
   699 ;; This function is called by:
   700 ;;		_initUart
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704     0026                     ___aldiv:	
   705                           ;psect for function ___aldiv
   706                           
   707     0026                     l794:	
   708                           ;incstack = 0
   709                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   710                           
   711     0026  1283               	bcf	3,5	;RP0=0, select bank0
   712     0027  1303               	bcf	3,6	;RP1=0, select bank0
   713     0028  01A9               	clrf	___aldiv@sign
   714     0029                     l796:
   715     0029  1FA3               	btfss	___aldiv@divisor+3,7
   716     002A  282C               	goto	u191
   717     002B  282D               	goto	u190
   718     002C                     u191:
   719     002C  283A               	goto	l235
   720     002D                     u190:
   721     002D                     l798:
   722     002D  09A0               	comf	___aldiv@divisor,f
   723     002E  09A1               	comf	___aldiv@divisor+1,f
   724     002F  09A2               	comf	___aldiv@divisor+2,f
   725     0030  09A3               	comf	___aldiv@divisor+3,f
   726     0031  0AA0               	incf	___aldiv@divisor,f
   727     0032  1903               	skipnz
   728     0033  0AA1               	incf	___aldiv@divisor+1,f
   729     0034  1903               	skipnz
   730     0035  0AA2               	incf	___aldiv@divisor+2,f
   731     0036  1903               	skipnz
   732     0037  0AA3               	incf	___aldiv@divisor+3,f
   733     0038  01A9               	clrf	___aldiv@sign
   734     0039  0AA9               	incf	___aldiv@sign,f
   735     003A                     l235:
   736     003A  1FA7               	btfss	___aldiv@dividend+3,7
   737     003B  283D               	goto	u201
   738     003C  283E               	goto	u200
   739     003D                     u201:
   740     003D  284D               	goto	l804
   741     003E                     u200:
   742     003E                     l800:
   743     003E  09A4               	comf	___aldiv@dividend,f
   744     003F  09A5               	comf	___aldiv@dividend+1,f
   745     0040  09A6               	comf	___aldiv@dividend+2,f
   746     0041  09A7               	comf	___aldiv@dividend+3,f
   747     0042  0AA4               	incf	___aldiv@dividend,f
   748     0043  1903               	skipnz
   749     0044  0AA5               	incf	___aldiv@dividend+1,f
   750     0045  1903               	skipnz
   751     0046  0AA6               	incf	___aldiv@dividend+2,f
   752     0047  1903               	skipnz
   753     0048  0AA7               	incf	___aldiv@dividend+3,f
   754     0049                     l802:
   755     0049  3001               	movlw	1
   756     004A  00FF               	movwf	btemp+1
   757     004B  087F               	movf	btemp+1,w
   758     004C  06A9               	xorwf	___aldiv@sign,f
   759     004D                     l804:
   760     004D  3000               	movlw	0
   761     004E  00AD               	movwf	___aldiv@quotient+3
   762     004F  3000               	movlw	0
   763     0050  00AC               	movwf	___aldiv@quotient+2
   764     0051  3000               	movlw	0
   765     0052  00AB               	movwf	___aldiv@quotient+1
   766     0053  3000               	movlw	0
   767     0054  00AA               	movwf	___aldiv@quotient
   768     0055                     l806:
   769     0055  0823               	movf	___aldiv@divisor+3,w
   770     0056  0422               	iorwf	___aldiv@divisor+2,w
   771     0057  0421               	iorwf	___aldiv@divisor+1,w
   772     0058  0420               	iorwf	___aldiv@divisor,w
   773     0059  1903               	skipnz
   774     005A  285C               	goto	u211
   775     005B  285D               	goto	u210
   776     005C                     u211:
   777     005C  28AA               	goto	l828
   778     005D                     u210:
   779     005D                     l808:
   780     005D  01A8               	clrf	___aldiv@counter
   781     005E  0AA8               	incf	___aldiv@counter,f
   782     005F  286D               	goto	l814
   783     0060                     l810:
   784     0060  3001               	movlw	1
   785     0061  00F4               	movwf	??___aldiv
   786     0062                     u225:
   787     0062  1003               	clrc
   788     0063  0DA0               	rlf	___aldiv@divisor,f
   789     0064  0DA1               	rlf	___aldiv@divisor+1,f
   790     0065  0DA2               	rlf	___aldiv@divisor+2,f
   791     0066  0DA3               	rlf	___aldiv@divisor+3,f
   792     0067  0BF4               	decfsz	??___aldiv,f
   793     0068  2862               	goto	u225
   794     0069                     l812:
   795     0069  3001               	movlw	1
   796     006A  00FF               	movwf	btemp+1
   797     006B  087F               	movf	btemp+1,w
   798     006C  07A8               	addwf	___aldiv@counter,f
   799     006D                     l814:
   800     006D  1FA3               	btfss	___aldiv@divisor+3,7
   801     006E  2870               	goto	u231
   802     006F  2871               	goto	u230
   803     0070                     u231:
   804     0070  2860               	goto	l810
   805     0071                     u230:
   806     0071                     l816:
   807     0071  3001               	movlw	1
   808     0072  00F4               	movwf	??___aldiv
   809     0073                     u245:
   810     0073  1003               	clrc
   811     0074  0DAA               	rlf	___aldiv@quotient,f
   812     0075  0DAB               	rlf	___aldiv@quotient+1,f
   813     0076  0DAC               	rlf	___aldiv@quotient+2,f
   814     0077  0DAD               	rlf	___aldiv@quotient+3,f
   815     0078  0BF4               	decfsz	??___aldiv,f
   816     0079  2873               	goto	u245
   817     007A                     l818:
   818     007A  0823               	movf	___aldiv@divisor+3,w
   819     007B  0227               	subwf	___aldiv@dividend+3,w
   820     007C  1D03               	skipz
   821     007D  2888               	goto	u255
   822     007E  0822               	movf	___aldiv@divisor+2,w
   823     007F  0226               	subwf	___aldiv@dividend+2,w
   824     0080  1D03               	skipz
   825     0081  2888               	goto	u255
   826     0082  0821               	movf	___aldiv@divisor+1,w
   827     0083  0225               	subwf	___aldiv@dividend+1,w
   828     0084  1D03               	skipz
   829     0085  2888               	goto	u255
   830     0086  0820               	movf	___aldiv@divisor,w
   831     0087  0224               	subwf	___aldiv@dividend,w
   832     0088                     u255:
   833     0088  1C03               	skipc
   834     0089  288B               	goto	u251
   835     008A  288C               	goto	u250
   836     008B                     u251:
   837     008B  289B               	goto	l824
   838     008C                     u250:
   839     008C                     l820:
   840     008C  0820               	movf	___aldiv@divisor,w
   841     008D  02A4               	subwf	___aldiv@dividend,f
   842     008E  0821               	movf	___aldiv@divisor+1,w
   843     008F  1C03               	skipc
   844     0090  0F21               	incfsz	___aldiv@divisor+1,w
   845     0091  02A5               	subwf	___aldiv@dividend+1,f
   846     0092  0822               	movf	___aldiv@divisor+2,w
   847     0093  1C03               	skipc
   848     0094  0F22               	incfsz	___aldiv@divisor+2,w
   849     0095  02A6               	subwf	___aldiv@dividend+2,f
   850     0096  0823               	movf	___aldiv@divisor+3,w
   851     0097  1C03               	skipc
   852     0098  0F23               	incfsz	___aldiv@divisor+3,w
   853     0099  02A7               	subwf	___aldiv@dividend+3,f
   854     009A                     l822:
   855     009A  142A               	bsf	___aldiv@quotient,0
   856     009B                     l824:
   857     009B  3001               	movlw	1
   858     009C                     u265:
   859     009C  1003               	clrc
   860     009D  0CA3               	rrf	___aldiv@divisor+3,f
   861     009E  0CA2               	rrf	___aldiv@divisor+2,f
   862     009F  0CA1               	rrf	___aldiv@divisor+1,f
   863     00A0  0CA0               	rrf	___aldiv@divisor,f
   864     00A1  3EFF               	addlw	-1
   865     00A2  1D03               	skipz
   866     00A3  289C               	goto	u265
   867     00A4                     l826:
   868     00A4  3001               	movlw	1
   869     00A5  02A8               	subwf	___aldiv@counter,f
   870     00A6  1D03               	btfss	3,2
   871     00A7  28A9               	goto	u271
   872     00A8  28AA               	goto	u270
   873     00A9                     u271:
   874     00A9  2871               	goto	l816
   875     00AA                     u270:
   876     00AA                     l828:
   877     00AA  0829               	movf	___aldiv@sign,w
   878     00AB  1903               	btfsc	3,2
   879     00AC  28AE               	goto	u281
   880     00AD  28AF               	goto	u280
   881     00AE                     u281:
   882     00AE  28BA               	goto	l832
   883     00AF                     u280:
   884     00AF                     l830:
   885     00AF  09AA               	comf	___aldiv@quotient,f
   886     00B0  09AB               	comf	___aldiv@quotient+1,f
   887     00B1  09AC               	comf	___aldiv@quotient+2,f
   888     00B2  09AD               	comf	___aldiv@quotient+3,f
   889     00B3  0AAA               	incf	___aldiv@quotient,f
   890     00B4  1903               	skipnz
   891     00B5  0AAB               	incf	___aldiv@quotient+1,f
   892     00B6  1903               	skipnz
   893     00B7  0AAC               	incf	___aldiv@quotient+2,f
   894     00B8  1903               	skipnz
   895     00B9  0AAD               	incf	___aldiv@quotient+3,f
   896     00BA                     l832:
   897     00BA  082D               	movf	___aldiv@quotient+3,w
   898     00BB  00A3               	movwf	?___aldiv+3
   899     00BC  082C               	movf	___aldiv@quotient+2,w
   900     00BD  00A2               	movwf	?___aldiv+2
   901     00BE  082B               	movf	___aldiv@quotient+1,w
   902     00BF  00A1               	movwf	?___aldiv+1
   903     00C0  082A               	movf	___aldiv@quotient,w
   904     00C1  00A0               	movwf	?___aldiv
   905     00C2                     l245:
   906     00C2  0008               	return
   907     00C3                     __end_of___aldiv:
   908                           
   909                           	psect	text4
   910     00C3                     __ptext4:	
   911 ;; *************** function _initLCD *****************
   912 ;; Defined at:
   913 ;;		line 69 in file "newmain.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;		None
   916 ;; Auto vars:     Size  Location     Type
   917 ;;		None
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      void 
   920 ;; Registers used:
   921 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   927 ;;      Params:         0       0       0       0       0
   928 ;;      Locals:         0       0       0       0       0
   929 ;;      Temps:          2       0       0       0       0
   930 ;;      Totals:         2       0       0       0       0
   931 ;;Total ram usage:        2 bytes
   932 ;; Hardware stack levels used: 1
   933 ;; Hardware stack levels required when called: 2
   934 ;; This function calls:
   935 ;;		_sendLCD
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941     00C3                     _initLCD:	
   942                           ;psect for function _initLCD
   943                           
   944     00C3                     l836:	
   945                           ;incstack = 0
   946                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   947                           
   948                           
   949                           ;newmain.c: 70:     TRISD = 0x00;
   950     00C3  1683               	bsf	3,5	;RP0=1, select bank1
   951     00C4  1303               	bcf	3,6	;RP1=0, select bank1
   952     00C5  0188               	clrf	8	;volatile
   953     00C6                     l838:
   954                           
   955                           ;newmain.c: 71:     TRISE &= ~0x06;
   956     00C6  30F9               	movlw	249
   957     00C7  00FF               	movwf	btemp+1
   958     00C8  087F               	movf	btemp+1,w
   959     00C9  0589               	andwf	9,f	;volatile
   960     00CA                     l840:
   961                           
   962                           ;newmain.c: 73:     PORTEbits.RE1 = 0;
   963     00CA  1283               	bcf	3,5	;RP0=0, select bank0
   964     00CB  1303               	bcf	3,6	;RP1=0, select bank0
   965     00CC  1089               	bcf	9,1	;volatile
   966     00CD                     l842:
   967                           
   968                           ;newmain.c: 74:     PORTEbits.RE2 = 0;
   969     00CD  1109               	bcf	9,2	;volatile
   970     00CE                     l844:
   971                           
   972                           ;newmain.c: 76:     _delay((unsigned long)((20)*(8000000/4000.0)));
   973     00CE  3034               	movlw	52
   974     00CF  00F9               	movwf	??_initLCD+1
   975     00D0  30F1               	movlw	241
   976     00D1  00F8               	movwf	??_initLCD
   977     00D2                     u377:
   978     00D2  0BF8               	decfsz	??_initLCD,f
   979     00D3  28D2               	goto	u377
   980     00D4  0BF9               	decfsz	??_initLCD+1,f
   981     00D5  28D2               	goto	u377
   982     00D6  28D7               	nop2
   983     00D7                     l846:
   984                           
   985                           ;newmain.c: 77:     PORTEbits.RE1 = 1;
   986     00D7  1283               	bcf	3,5	;RP0=0, select bank0
   987     00D8  1303               	bcf	3,6	;RP1=0, select bank0
   988     00D9  1489               	bsf	9,1	;volatile
   989     00DA                     l848:
   990                           
   991                           ;newmain.c: 78:     sendLCD(0x38, 0);
   992     00DA  01F4               	clrf	sendLCD@rs
   993     00DB  3038               	movlw	56
   994     00DC  120A  118A  2237  120A  118A  	fcall	_sendLCD
   995     00E1                     l850:
   996                           
   997                           ;newmain.c: 80:     _delay((unsigned long)((5)*(8000000/4000.0)));
   998     00E1  300D               	movlw	13
   999     00E2  00F9               	movwf	??_initLCD+1
  1000     00E3  30FB               	movlw	251
  1001     00E4  00F8               	movwf	??_initLCD
  1002     00E5                     u387:
  1003     00E5  0BF8               	decfsz	??_initLCD,f
  1004     00E6  28E5               	goto	u387
  1005     00E7  0BF9               	decfsz	??_initLCD+1,f
  1006     00E8  28E5               	goto	u387
  1007     00E9  28EA               	nop2
  1008     00EA                     l852:
  1009                           
  1010                           ;newmain.c: 81:     sendLCD(0x38, 0);
  1011     00EA  01F4               	clrf	sendLCD@rs
  1012     00EB  3038               	movlw	56
  1013     00EC  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1014     00F1                     l854:
  1015                           
  1016                           ;newmain.c: 83:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1017     00F1  3003               	movlw	3
  1018     00F2  00F9               	movwf	??_initLCD+1
  1019     00F3  3097               	movlw	151
  1020     00F4  00F8               	movwf	??_initLCD
  1021     00F5                     u397:
  1022     00F5  0BF8               	decfsz	??_initLCD,f
  1023     00F6  28F5               	goto	u397
  1024     00F7  0BF9               	decfsz	??_initLCD+1,f
  1025     00F8  28F5               	goto	u397
  1026     00F9  28FA               	nop2
  1027     00FA                     l856:
  1028                           
  1029                           ;newmain.c: 84:     sendLCD(0x38, 0);
  1030     00FA  01F4               	clrf	sendLCD@rs
  1031     00FB  3038               	movlw	56
  1032     00FC  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1033     0101                     l858:
  1034                           
  1035                           ;newmain.c: 86:     sendLCD(0x08, 0);
  1036     0101  01F4               	clrf	sendLCD@rs
  1037     0102  3008               	movlw	8
  1038     0103  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1039     0108                     l860:
  1040                           
  1041                           ;newmain.c: 87:     sendLCD(0x0F, 0);
  1042     0108  01F4               	clrf	sendLCD@rs
  1043     0109  300F               	movlw	15
  1044     010A  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1045     010F                     l862:
  1046                           
  1047                           ;newmain.c: 88:     sendLCD(0x01, 0);
  1048     010F  01F4               	clrf	sendLCD@rs
  1049     0110  3001               	movlw	1
  1050     0111  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1051     0116                     l864:
  1052                           
  1053                           ;newmain.c: 89:     sendLCD(0x0E, 0);
  1054     0116  01F4               	clrf	sendLCD@rs
  1055     0117  300E               	movlw	14
  1056     0118  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1057     011D                     l866:
  1058                           
  1059                           ;newmain.c: 90:     sendLCD(0x80, 0);
  1060     011D  01F4               	clrf	sendLCD@rs
  1061     011E  3080               	movlw	128
  1062     011F  120A  118A  2237  120A  118A  	fcall	_sendLCD
  1063     0124                     l56:
  1064     0124  0008               	return
  1065     0125                     __end_of_initLCD:
  1066                           
  1067                           	psect	text5
  1068     0237                     __ptext5:	
  1069 ;; *************** function _sendLCD *****************
  1070 ;; Defined at:
  1071 ;;		line 106 in file "newmain.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  dato            1    wreg     unsigned char 
  1074 ;;  rs              1    4[COMMON] unsigned char 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  dato            1    7[COMMON] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,0
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1086 ;;      Params:         1       0       0       0       0
  1087 ;;      Locals:         1       0       0       0       0
  1088 ;;      Temps:          2       0       0       0       0
  1089 ;;      Totals:         4       0       0       0       0
  1090 ;;Total ram usage:        4 bytes
  1091 ;; Hardware stack levels used: 1
  1092 ;; Hardware stack levels required when called: 1
  1093 ;; This function calls:
  1094 ;;		Nothing
  1095 ;; This function is called by:
  1096 ;;		_initLCD
  1097 ;;		_printStringLCD
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101     0237                     _sendLCD:	
  1102                           ;psect for function _sendLCD
  1103                           
  1104                           
  1105                           ;incstack = 0
  1106                           ; Regs used in _sendLCD: [wreg+status,0]
  1107                           ;sendLCD@dato stored from wreg
  1108     0237  00F7               	movwf	sendLCD@dato
  1109     0238                     l780:
  1110                           
  1111                           ;newmain.c: 107:     PORTEbits.RE1 = 1;
  1112     0238  1283               	bcf	3,5	;RP0=0, select bank0
  1113     0239  1303               	bcf	3,6	;RP1=0, select bank0
  1114     023A  1489               	bsf	9,1	;volatile
  1115     023B                     l782:
  1116                           
  1117                           ;newmain.c: 108:     PORTD = dato;
  1118     023B  0877               	movf	sendLCD@dato,w
  1119     023C  0088               	movwf	8	;volatile
  1120     023D                     l784:
  1121                           
  1122                           ;newmain.c: 109:     PORTEbits.RE2 = rs;
  1123     023D  0C74               	rrf	sendLCD@rs,w
  1124     023E  1C03               	skipc
  1125     023F  1109               	bcf	9,2	;volatile
  1126     0240  1803               	skipnc
  1127     0241  1509               	bsf	9,2	;volatile
  1128     0242                     l786:
  1129                           
  1130                           ;newmain.c: 110:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1131     0242  3008               	movlw	8
  1132     0243  00F6               	movwf	??_sendLCD+1
  1133     0244  30C9               	movlw	201
  1134     0245  00F5               	movwf	??_sendLCD
  1135     0246                     u407:
  1136     0246  0BF5               	decfsz	??_sendLCD,f
  1137     0247  2A46               	goto	u407
  1138     0248  0BF6               	decfsz	??_sendLCD+1,f
  1139     0249  2A46               	goto	u407
  1140     024A  2A4B               	nop2
  1141     024B                     l788:
  1142                           
  1143                           ;newmain.c: 112:     PORTEbits.RE1 = 0;
  1144     024B  1283               	bcf	3,5	;RP0=0, select bank0
  1145     024C  1303               	bcf	3,6	;RP1=0, select bank0
  1146     024D  1089               	bcf	9,1	;volatile
  1147     024E                     l790:
  1148                           
  1149                           ;newmain.c: 113:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1150     024E  3008               	movlw	8
  1151     024F  00F6               	movwf	??_sendLCD+1
  1152     0250  30C9               	movlw	201
  1153     0251  00F5               	movwf	??_sendLCD
  1154     0252                     u417:
  1155     0252  0BF5               	decfsz	??_sendLCD,f
  1156     0253  2A52               	goto	u417
  1157     0254  0BF6               	decfsz	??_sendLCD+1,f
  1158     0255  2A52               	goto	u417
  1159     0256  2A57               	nop2
  1160     0257                     l792:
  1161                           
  1162                           ;newmain.c: 115:     PORTEbits.RE1 = 1;
  1163     0257  1283               	bcf	3,5	;RP0=0, select bank0
  1164     0258  1303               	bcf	3,6	;RP1=0, select bank0
  1165     0259  1489               	bsf	9,1	;volatile
  1166     025A                     l62:
  1167     025A  0008               	return
  1168     025B                     __end_of_sendLCD:
  1169                           
  1170                           	psect	text6
  1171     016A                     __ptext6:	
  1172 ;; *************** function _SumNumberFromString *****************
  1173 ;; Defined at:
  1174 ;;		line 118 in file "newmain.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  calc            1    wreg     PTR unsigned char 
  1177 ;;		 -> string(10), 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  calc            1    1[BANK0 ] PTR unsigned char 
  1180 ;;		 -> string(10), 
  1181 ;;  j               1    3[BANK0 ] unsigned char 
  1182 ;;  i               1    2[BANK0 ] unsigned char 
  1183 ;;  sum             1    0[BANK0 ] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      unsigned char 
  1186 ;; Registers used:
  1187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       0       0       0       0
  1194 ;;      Locals:         0       4       0       0       0
  1195 ;;      Temps:          3       0       0       0       0
  1196 ;;      Totals:         3       4       0       0       0
  1197 ;;Total ram usage:        7 bytes
  1198 ;; Hardware stack levels used: 1
  1199 ;; Hardware stack levels required when called: 1
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207     016A                     _SumNumberFromString:	
  1208                           ;psect for function _SumNumberFromString
  1209                           
  1210                           
  1211                           ;incstack = 0
  1212                           ; Regs used in _SumNumberFromString: [wreg-fsr0h+status,2+status,0+btemp+1]
  1213                           ;SumNumberFromString@calc stored from wreg
  1214     016A  1283               	bcf	3,5	;RP0=0, select bank0
  1215     016B  1303               	bcf	3,6	;RP1=0, select bank0
  1216     016C  00A1               	movwf	SumNumberFromString@calc
  1217     016D                     l878:
  1218                           
  1219                           ;newmain.c: 118: char SumNumberFromString(char *calc);newmain.c: 119: {;newmain.c: 120: 
      +                              char i = 0, sum = 0;
  1220     016D  01A2               	clrf	SumNumberFromString@i
  1221     016E  01A0               	clrf	SumNumberFromString@sum
  1222                           
  1223                           ;newmain.c: 122:     while(calc[i] != '\0')
  1224     016F  2996               	goto	l894
  1225     0170                     l880:
  1226                           
  1227                           ;newmain.c: 123:     {;newmain.c: 124:         for(char j = 0; j < 10; j++)
  1228     0170  01A3               	clrf	SumNumberFromString@j
  1229     0171                     l886:
  1230                           
  1231                           ;newmain.c: 125:         {;newmain.c: 126:           if(calc[i] == (j+48))
  1232     0171  0823               	movf	SumNumberFromString@j,w
  1233     0172  3E30               	addlw	48
  1234     0173  00F4               	movwf	??_SumNumberFromString
  1235     0174  3000               	movlw	0
  1236     0175  1803               	skipnc
  1237     0176  3001               	movlw	1
  1238     0177  00F5               	movwf	??_SumNumberFromString+1
  1239     0178  0822               	movf	SumNumberFromString@i,w
  1240     0179  0721               	addwf	SumNumberFromString@calc,w
  1241     017A  00F6               	movwf	??_SumNumberFromString+2
  1242     017B  0876               	movf	??_SumNumberFromString+2,w
  1243     017C  0084               	movwf	4
  1244     017D  0800               	movf	0,w
  1245     017E  0674               	xorwf	??_SumNumberFromString,w
  1246     017F  0475               	iorwf	??_SumNumberFromString+1,w
  1247     0180  1D03               	skipz
  1248     0181  2983               	goto	u301
  1249     0182  2984               	goto	u300
  1250     0183                     u301:
  1251     0183  2988               	goto	l69
  1252     0184                     u300:
  1253     0184                     l888:
  1254                           
  1255                           ;newmain.c: 127:               sum += j;
  1256     0184  0823               	movf	SumNumberFromString@j,w
  1257     0185  00FF               	movwf	btemp+1
  1258     0186  087F               	movf	btemp+1,w
  1259     0187  07A0               	addwf	SumNumberFromString@sum,f
  1260     0188                     l69:
  1261                           
  1262                           ;newmain.c: 128:         }
  1263     0188  3001               	movlw	1
  1264     0189  00FF               	movwf	btemp+1
  1265     018A  087F               	movf	btemp+1,w
  1266     018B  07A3               	addwf	SumNumberFromString@j,f
  1267     018C                     l890:
  1268     018C  300A               	movlw	10
  1269     018D  0223               	subwf	SumNumberFromString@j,w
  1270     018E  1C03               	skipc
  1271     018F  2991               	goto	u311
  1272     0190  2992               	goto	u310
  1273     0191                     u311:
  1274     0191  2971               	goto	l886
  1275     0192                     u310:
  1276     0192                     l892:
  1277                           
  1278                           ;newmain.c: 129:         i++;
  1279     0192  3001               	movlw	1
  1280     0193  00FF               	movwf	btemp+1
  1281     0194  087F               	movf	btemp+1,w
  1282     0195  07A2               	addwf	SumNumberFromString@i,f
  1283     0196                     l894:
  1284                           
  1285                           ;newmain.c: 122:     while(calc[i] != '\0')
  1286     0196  0822               	movf	SumNumberFromString@i,w
  1287     0197  0721               	addwf	SumNumberFromString@calc,w
  1288     0198  00F4               	movwf	??_SumNumberFromString
  1289     0199  0874               	movf	??_SumNumberFromString,w
  1290     019A  0084               	movwf	4
  1291     019B  1383               	bcf	3,7	;select IRP bank0
  1292     019C  0800               	movf	0,w
  1293     019D  1D03               	btfss	3,2
  1294     019E  29A0               	goto	u321
  1295     019F  29A1               	goto	u320
  1296     01A0                     u321:
  1297     01A0  2970               	goto	l880
  1298     01A1                     u320:
  1299     01A1                     l896:
  1300                           
  1301                           ;newmain.c: 132:     return sum;
  1302     01A1  0820               	movf	SumNumberFromString@sum,w
  1303     01A2                     l71:
  1304     01A2  0008               	return
  1305     01A3                     __end_of_SumNumberFromString:
  1306                           
  1307                           	psect	text7
  1308     020C                     __ptext7:	
  1309 ;; *************** function _ISR *****************
  1310 ;; Defined at:
  1311 ;;		line 145 in file "newmain.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0       0       0       0       0
  1326 ;;      Locals:         0       0       0       0       0
  1327 ;;      Temps:          4       0       0       0       0
  1328 ;;      Totals:         4       0       0       0       0
  1329 ;;Total ram usage:        4 bytes
  1330 ;; Hardware stack levels used: 1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		Interrupt level 1
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338     020C                     _ISR:	
  1339                           ;psect for function _ISR
  1340                           
  1341     020C                     i1l920:
  1342                           
  1343                           ;newmain.c: 146:     if (RCIF) {
  1344     020C  1283               	bcf	3,5	;RP0=0, select bank0
  1345     020D  1303               	bcf	3,6	;RP1=0, select bank0
  1346     020E  1E8C               	btfss	12,5	;volatile
  1347     020F  2A11               	goto	u35_21
  1348     0210  2A12               	goto	u35_20
  1349     0211                     u35_21:
  1350     0211  2A2C               	goto	i1l84
  1351     0212                     u35_20:
  1352     0212                     i1l922:
  1353                           
  1354                           ;newmain.c: 147:         string[index] = RCREG;
  1355     0212  0834               	movf	_index,w
  1356     0213  3E35               	addlw	(low (_string| 0))& (0+255)
  1357     0214  0084               	movwf	4
  1358     0215  081A               	movf	26,w	;volatile
  1359     0216  1383               	bcf	3,7	;select IRP bank0
  1360     0217  0080               	movwf	0
  1361                           
  1362                           ;newmain.c: 149:         if (string[index] == 13) {
  1363     0218  0834               	movf	_index,w
  1364     0219  3E35               	addlw	(low (_string| 0))& (0+255)
  1365     021A  0084               	movwf	4
  1366     021B  300D               	movlw	13
  1367     021C  0600               	xorwf	0,w
  1368     021D  1D03               	btfss	3,2
  1369     021E  2A20               	goto	u36_21
  1370     021F  2A21               	goto	u36_20
  1371     0220                     u36_21:
  1372     0220  2A27               	goto	i1l928
  1373     0221                     u36_20:
  1374     0221                     i1l924:
  1375                           
  1376                           ;newmain.c: 150:             string[index] = '\0';
  1377     0221  0834               	movf	_index,w
  1378     0222  3E35               	addlw	(low (_string| 0))& (0+255)
  1379     0223  0084               	movwf	4
  1380     0224  0180               	clrf	0
  1381     0225                     i1l926:
  1382                           
  1383                           ;newmain.c: 151:             endSend = 1;
  1384     0225  01B3               	clrf	_endSend
  1385     0226  0AB3               	incf	_endSend,f
  1386     0227                     i1l928:
  1387                           
  1388                           ;newmain.c: 153:         index++;
  1389     0227  3001               	movlw	1
  1390     0228  00FF               	movwf	btemp+1
  1391     0229  087F               	movf	btemp+1,w
  1392     022A  07B4               	addwf	_index,f
  1393     022B                     i1l930:
  1394                           
  1395                           ;newmain.c: 154:         RCIF = 0;
  1396     022B  128C               	bcf	12,5	;volatile
  1397     022C                     i1l84:
  1398     022C  0873               	movf	??_ISR+3,w
  1399     022D  00FF               	movwf	btemp+1
  1400     022E  0872               	movf	??_ISR+2,w
  1401     022F  008A               	movwf	10
  1402     0230  0871               	movf	??_ISR+1,w
  1403     0231  0084               	movwf	4
  1404     0232  0E70               	swapf	??_ISR,w
  1405     0233  0083               	movwf	3
  1406     0234  0EFE               	swapf	btemp,f
  1407     0235  0E7E               	swapf	btemp,w
  1408     0236  0009               	retfie
  1409     0237                     __end_of_ISR:
  1410     007E                     btemp	set	126	;btemp
  1411     007E                     wtemp0	set	126
  1412                           
  1413                           	psect	intentry
  1414     0004                     __pintentry:	
  1415                           ;incstack = 0
  1416                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1417                           
  1418     0004                     interrupt_function:
  1419     007E                     saved_w	set	btemp
  1420     0004  00FE               	movwf	btemp
  1421     0005  0E03               	swapf	3,w
  1422     0006  00F0               	movwf	??_ISR
  1423     0007  0804               	movf	4,w
  1424     0008  00F1               	movwf	??_ISR+1
  1425     0009  080A               	movf	10,w
  1426     000A  00F2               	movwf	??_ISR+2
  1427     000B  087F               	movf	btemp+1,w
  1428     000C  00F3               	movwf	??_ISR+3
  1429     000D  120A  118A  2A0C   	ljmp	_ISR
  1430                           
  1431                           	psect	config
  1432                           
  1433                           ;Config register CONFIG @ 0x2007
  1434                           ;	Oscillator Selection bits
  1435                           ;	FOSC = HS, HS oscillator
  1436                           ;	Watchdog Timer Enable bit
  1437                           ;	WDTE = OFF, WDT disabled
  1438                           ;	Power-up Timer Enable bit
  1439                           ;	PWRTE = ON, PWRT enabled
  1440                           ;	Brown-out Reset Enable bit
  1441                           ;	BOREN = ON, BOR enabled
  1442                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1443                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1444                           ;	Data EEPROM Memory Code Protection bit
  1445                           ;	CPD = OFF, Data EEPROM code protection off
  1446                           ;	Flash Program Memory Write Enable bits
  1447                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1448                           ;	In-Circuit Debugger Mode bit
  1449                           ;	DEBUG = 0x1, unprogrammed default
  1450                           ;	Flash Program Memory Code Protection bit
  1451                           ;	CP = OFF, Code protection off
  1452     2007                     	org	8199
  1453     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     18      31
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printStringLCD@s	PTR unsigned char  size(1) Largest target is 10
		 -> string(BANK0[10]), 

    SumNumberFromString@calc	PTR unsigned char  size(1) Largest target is 10
		 -> string(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_initLCD
    _printStringLCD->_sendLCD
    _initUart->___aldiv
    _initLCD->_sendLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUart
    _initUart->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2670
                _SumNumberFromString
                            _initLCD
                           _initUart
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (1) _printStringLCD                                       3     3      0    1003
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUart                                             8     4      4     550
                                              5 COMMON     4     4      0
                                             14 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     880
                                              8 COMMON     2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (2) _sendLCD                                              4     3      1     880
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SumNumberFromString                                  7     7      0     237
                                              4 COMMON     3     3      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SumNumberFromString
   _initLCD
     _sendLCD
   _initUart
     ___aldiv
   _printStringLCD
     _sendLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      29       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      1F       5       38.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      29      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Dec 07 13:58:49 2023

                         l62 025A                           l71 01A2                           l56 0124  
                         l59 0169                           l69 0188                           l77 01D9  
                        l235 003A                          l245 00C2                          l800 003E  
                        l810 0060                          l802 0049                          l820 008C  
                        l812 0069                          l804 004D                          l900 01A6  
                        l830 00AF                          l822 009A                          l814 006D  
                        l806 0055                          l902 01A8                          l910 01DA  
                        l840 00CA                          l832 00BA                          l824 009B  
                        l816 0071                          l808 005D                          l904 01B5  
                        l912 01EE                          l850 00E1                          l842 00CD  
                        l826 00A4                          l818 007A                          l906 01BB  
                        l914 01F5                          l780 0238                          l860 0108  
                        l852 00EA                          l844 00CE                          l836 00C3  
                        l828 00AA                          l908 01C6                          l916 0204  
                        l790 024E                          l782 023B                          l862 010F  
                        l854 00F1                          l846 00D7                          l838 00C6  
                        l870 0128                          l918 0207                          l880 0170  
                        l792 0257                          l784 023D                          l864 0116  
                        l856 00FA                          l848 00DA                          l872 012C  
                        l890 018C                          l786 0242                          l866 011D  
                        l858 0101                          l794 0026                          l874 0137  
                        l892 0192                          l788 024B                          l796 0029  
                        l876 013A                          l868 0125                          l886 0171  
                        l894 0196                          l878 016D                          l798 002D  
                        l896 01A1                          l888 0184                          u200 003E  
                        u201 003D                          u210 005D                          u211 005C  
                        u300 0184                          u301 0183                          u310 0192  
                        u230 0071                          u311 0191                          u231 0070  
                        u320 01A1                          u321 01A0                          u225 0062  
                        u250 008C                          u330 01C6                          u251 008B  
                        u331 01C5                          u340 01F5                          u245 0073  
                        u341 01F4                          u270 00AA                          u190 002D  
                        u407 0246                          u271 00A9                          u255 0088  
                        u191 002C                          u280 00AF                          u417 0252  
                        u281 00AE                          u265 009C                          u290 014A  
                        _ISR 020C                          u295 0145                          u377 00D2  
                        u387 00E5                          u397 00F5                          fsr0 0004  
                        indf 0000                         ?_ISR 0070                         _PIE1 008C  
                       _RCIF 0065                         i1l84 022C                         _main 01DA  
                       btemp 007E                         start 0010                        ??_ISR 0070  
            __end_of___aldiv 00C3                        ?_main 0070                        i1l920 020C  
                      i1l930 022B                        i1l922 0212                        i1l924 0221  
                      i1l926 0225                        i1l928 0227                        _RCREG 001A  
                      _RCSTA 0018                        _SPBRG 0099                        u35_20 0212  
                      u35_21 0211                        _PORTD 0008                        u36_20 0221  
                      u36_21 0220                        _TRISC 0087                        _TRISD 0088  
                      _TRISE 0089                        _TXSTA 0098              __end_of_initLCD 0125  
                      _index 0034              __end_of_sendLCD 025B                        pclath 000A  
                      status 0003                        wtemp0 007E             initUart@baudRate 002E  
            __initialization 0013                 __end_of_main 020C                       ??_main 007A  
                     _INTCON 000B                    ??___aldiv 0074             __end_of_initUart 016A  
                     _result 0032             ??_printStringLCD 0078                       _string 0035  
                  ??_initLCD 0078                    ??_sendLCD 0075                       saved_w 007E  
    __end_of__initialization 0022  __end_of_SumNumberFromString 01A3                  sendLCD@dato 0077  
             __pcstackCOMMON 0070                   __pbssBANK0 0032                   __pmaintext 01DA  
                 __pintentry 0004                    ?_initUart 002E                      ___aldiv 0026  
                    _endSend 0033                      __ptext1 01A3                      __ptext2 0125  
                    __ptext3 0026                      __ptext4 00C3                      __ptext5 0237  
                    __ptext6 016A                      __ptext7 020C                      _initLCD 00C3  
                    _sendLCD 0237             ___aldiv@dividend 0024              printStringLCD@i 0021  
            printStringLCD@s 0020         end_of_initialization 0022                   ??_initUart 0075  
           ___aldiv@quotient 002A                    _PORTEbits 0009      SumNumberFromString@calc 0021  
        start_initialization 0013                  __end_of_ISR 0237                    ___latbits 0002  
              __pcstackBANK0 0020                     ?___aldiv 0020                     ?_initLCD 0070  
                   ?_sendLCD 0074              ___aldiv@divisor 0020            interrupt_function 0004  
            ___aldiv@counter 0028       SumNumberFromString@sum 0020                    sendLCD@rs 0074  
             _printStringLCD 01A3          _SumNumberFromString 016A                     _initUart 0125  
       ?_SumNumberFromString 0070       __end_of_printStringLCD 01DA                     intlevel1 0000  
      ??_SumNumberFromString 0074         SumNumberFromString@i 0022         SumNumberFromString@j 0023  
               ___aldiv@sign 0029              ?_printStringLCD 0070  
