

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Dec 05 11:47:31 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 22/03/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16LF877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0000                     	;# 
    56     0001                     	;# 
    57     0002                     	;# 
    58     0003                     	;# 
    59     0004                     	;# 
    60     0005                     	;# 
    61     0006                     	;# 
    62     0007                     	;# 
    63     0008                     	;# 
    64     0009                     	;# 
    65     000A                     	;# 
    66     000B                     	;# 
    67     000C                     	;# 
    68     000D                     	;# 
    69     000E                     	;# 
    70     000E                     	;# 
    71     000F                     	;# 
    72     0010                     	;# 
    73     0011                     	;# 
    74     0012                     	;# 
    75     0013                     	;# 
    76     0014                     	;# 
    77     0015                     	;# 
    78     0015                     	;# 
    79     0016                     	;# 
    80     0017                     	;# 
    81     0018                     	;# 
    82     0019                     	;# 
    83     001A                     	;# 
    84     001B                     	;# 
    85     001B                     	;# 
    86     001C                     	;# 
    87     001D                     	;# 
    88     001E                     	;# 
    89     001F                     	;# 
    90     0081                     	;# 
    91     0085                     	;# 
    92     0086                     	;# 
    93     0087                     	;# 
    94     0088                     	;# 
    95     0089                     	;# 
    96     008C                     	;# 
    97     008D                     	;# 
    98     008E                     	;# 
    99     0091                     	;# 
   100     0092                     	;# 
   101     0093                     	;# 
   102     0094                     	;# 
   103     0098                     	;# 
   104     0099                     	;# 
   105     009C                     	;# 
   106     009D                     	;# 
   107     009E                     	;# 
   108     009F                     	;# 
   109     010C                     	;# 
   110     010D                     	;# 
   111     010E                     	;# 
   112     010F                     	;# 
   113     018C                     	;# 
   114     018D                     	;# 
   115     0000                     	;# 
   116     0001                     	;# 
   117     0002                     	;# 
   118     0003                     	;# 
   119     0004                     	;# 
   120     0005                     	;# 
   121     0006                     	;# 
   122     0007                     	;# 
   123     0008                     	;# 
   124     0009                     	;# 
   125     000A                     	;# 
   126     000B                     	;# 
   127     000C                     	;# 
   128     000D                     	;# 
   129     000E                     	;# 
   130     000E                     	;# 
   131     000F                     	;# 
   132     0010                     	;# 
   133     0011                     	;# 
   134     0012                     	;# 
   135     0013                     	;# 
   136     0014                     	;# 
   137     0015                     	;# 
   138     0015                     	;# 
   139     0016                     	;# 
   140     0017                     	;# 
   141     0018                     	;# 
   142     0019                     	;# 
   143     001A                     	;# 
   144     001B                     	;# 
   145     001B                     	;# 
   146     001C                     	;# 
   147     001D                     	;# 
   148     001E                     	;# 
   149     001F                     	;# 
   150     0081                     	;# 
   151     0085                     	;# 
   152     0086                     	;# 
   153     0087                     	;# 
   154     0088                     	;# 
   155     0089                     	;# 
   156     008C                     	;# 
   157     008D                     	;# 
   158     008E                     	;# 
   159     0091                     	;# 
   160     0092                     	;# 
   161     0093                     	;# 
   162     0094                     	;# 
   163     0098                     	;# 
   164     0099                     	;# 
   165     009C                     	;# 
   166     009D                     	;# 
   167     009E                     	;# 
   168     009F                     	;# 
   169     010C                     	;# 
   170     010D                     	;# 
   171     010E                     	;# 
   172     010F                     	;# 
   173     018C                     	;# 
   174     018D                     	;# 
   175     001A                     _RCREG	set	26
   176     0008                     _PORTD	set	8
   177     000B                     _INTCON	set	11
   178     0018                     _RCSTA	set	24
   179     0009                     _PORTEbits	set	9
   180     0065                     _RCIF	set	101
   181     0099                     _SPBRG	set	153
   182     008C                     _PIE1	set	140
   183     0098                     _TXSTA	set	152
   184     0087                     _TRISC	set	135
   185     0089                     _TRISE	set	137
   186     0088                     _TRISD	set	136
   187                           
   188                           	psect	strings
   189     0211                     __pstrings:
   190     0211                     stringtab:
   191     0211                     __stringtab:
   192     0211                     stringcode:	
   193                           ;	String table - string pointers are 1 byte each
   194                           
   195     0211                     stringdir:
   196     0211  3002               	movlw	high stringdir
   197     0212  008A               	movwf	10
   198     0213  0804               	movf	4,w
   199     0214  0A84               	incf	4,f
   200     0215  0782               	addwf	2,f
   201     0216                     __stringbase:
   202     0216  3400               	retlw	0
   203     0217                     __end_of__stringtab:
   204     0217                     STR_1:
   205     0217  3463               	retlw	99	;'c'
   206     0218  3469               	retlw	105	;'i'
   207     0219  3461               	retlw	97	;'a'
   208     021A  346F               	retlw	111	;'o'
   209     021B  3400               	retlw	0
   210                           
   211                           	psect	cinit
   212     0013                     start_initialization:	
   213                           ; #config settings
   214                           
   215     0013                     __initialization:
   216                           
   217                           ; Clear objects allocated to COMMON
   218     0013  01F7               	clrf	__pbssCOMMON& (0+127)
   219     0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   220     0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   221                           
   222                           ; Clear objects allocated to BANK0
   223     0016  1283               	bcf	3,5	;RP0=0, select bank0
   224     0017  1303               	bcf	3,6	;RP1=0, select bank0
   225     0018  01B6               	clrf	__pbssBANK0& (0+127)
   226     0019  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   227     001A  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   228     001B  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   229     001C  01BA               	clrf	(__pbssBANK0+4)& (0+127)
   230     001D  01BB               	clrf	(__pbssBANK0+5)& (0+127)
   231     001E  01BC               	clrf	(__pbssBANK0+6)& (0+127)
   232     001F  01BD               	clrf	(__pbssBANK0+7)& (0+127)
   233     0020  01BE               	clrf	(__pbssBANK0+8)& (0+127)
   234     0021  01BF               	clrf	(__pbssBANK0+9)& (0+127)
   235     0022                     end_of_initialization:	
   236                           ;End of C runtime variable initialization code
   237                           
   238     0022                     __end_of__initialization:
   239     0022  0183               	clrf	3
   240     0023  120A  118A  29C8   	ljmp	_main	;jump to C main() function
   241                           
   242                           	psect	bssCOMMON
   243     0077                     __pbssCOMMON:
   244     0077                     _result:
   245     0077                     	ds	1
   246     0078                     _endSend:
   247     0078                     	ds	1
   248     0079                     _index:
   249     0079                     	ds	1
   250                           
   251                           	psect	bssBANK0
   252     0036                     __pbssBANK0:
   253     0036                     _string:
   254     0036                     	ds	10
   255                           
   256                           	psect	cstackCOMMON
   257     0070                     __pcstackCOMMON:
   258     0070                     ?_initLCD:
   259     0070                     ?_printStringLCD:	
   260                           ; 1 bytes @ 0x0
   261                           
   262     0070                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265     0070                     ?_ISR:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     0070                     ??_ISR:	
   269                           ; 1 bytes @ 0x0
   270                           
   271                           
   272                           ; 1 bytes @ 0x0
   273     0070                     	ds	4
   274     0074                     ?_sendLCD:
   275     0074                     ??___aldiv:	
   276                           ; 1 bytes @ 0x4
   277                           
   278     0074                     sendLCD@rs:	
   279                           ; 1 bytes @ 0x4
   280                           
   281                           
   282                           ; 1 bytes @ 0x4
   283     0074                     	ds	1
   284     0075                     ??_sendLCD:
   285                           
   286                           ; 1 bytes @ 0x5
   287     0075                     	ds	2
   288     0077                     ??_printStringLCD:
   289     0077                     ??_main:	
   290                           ; 1 bytes @ 0x7
   291                           
   292                           
   293                           	psect	cstackBANK0
   294     0020                     __pcstackBANK0:	
   295                           ; 1 bytes @ 0x7
   296                           
   297     0020                     ?___aldiv:
   298     0020                     sendLCD@dato:	
   299                           ; 4 bytes @ 0x0
   300                           
   301     0020                     ___aldiv@divisor:	
   302                           ; 1 bytes @ 0x0
   303                           
   304                           
   305                           ; 4 bytes @ 0x0
   306     0020                     	ds	1
   307     0021                     ??_initLCD:
   308     0021                     printStringLCD@s:	
   309                           ; 1 bytes @ 0x1
   310                           
   311                           
   312                           ; 1 bytes @ 0x1
   313     0021                     	ds	1
   314     0022                     printStringLCD@i:
   315                           
   316                           ; 1 bytes @ 0x2
   317     0022                     	ds	2
   318     0024                     ___aldiv@dividend:
   319                           
   320                           ; 4 bytes @ 0x4
   321     0024                     	ds	4
   322     0028                     ___aldiv@counter:
   323                           
   324                           ; 1 bytes @ 0x8
   325     0028                     	ds	1
   326     0029                     ___aldiv@sign:
   327                           
   328                           ; 1 bytes @ 0x9
   329     0029                     	ds	1
   330     002A                     ___aldiv@quotient:
   331                           
   332                           ; 4 bytes @ 0xA
   333     002A                     	ds	4
   334     002E                     ?_initUart:
   335     002E                     initUart@baudRate:	
   336                           ; 1 bytes @ 0xE
   337                           
   338                           
   339                           ; 4 bytes @ 0xE
   340     002E                     	ds	4
   341     0032                     ??_initUart:
   342                           
   343                           ; 1 bytes @ 0x12
   344     0032                     	ds	4
   345                           
   346                           	psect	maintext
   347     01C8                     __pmaintext:	
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 49 in file "newmain.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : B00/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   367 ;;      Params:         0       0       0       0       0
   368 ;;      Locals:         0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0
   370 ;;      Totals:         0       0       0       0       0
   371 ;;Total ram usage:        0 bytes
   372 ;; Hardware stack levels required when called: 3
   373 ;; This function calls:
   374 ;;		_initLCD
   375 ;;		_initUart
   376 ;;		_printStringLCD
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382     01C8                     _main:	
   383                           ;psect for function _main
   384                           
   385     01C8                     l970:	
   386                           ;incstack = 0
   387                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   388                           
   389                           
   390                           ;newmain.c: 50:     initLCD();
   391     01C8  120A  118A  20C3  120A  118A  	fcall	_initLCD
   392                           
   393                           ;newmain.c: 51:     initUart(9600);
   394     01CD  3000               	movlw	0
   395     01CE  1283               	bcf	3,5	;RP0=0, select bank0
   396     01CF  1303               	bcf	3,6	;RP1=0, select bank0
   397     01D0  00B1               	movwf	initUart@baudRate+3
   398     01D1  3000               	movlw	0
   399     01D2  00B0               	movwf	initUart@baudRate+2
   400     01D3  3025               	movlw	37
   401     01D4  00AF               	movwf	initUart@baudRate+1
   402     01D5  3080               	movlw	128
   403     01D6  00AE               	movwf	initUart@baudRate
   404     01D7  120A  118A  2128  120A  118A  	fcall	_initUart
   405     01DC                     l972:
   406                           
   407                           ;newmain.c: 54:     {;newmain.c: 55:         if(endSend)
   408     01DC  0878               	movf	_endSend,w
   409     01DD  1903               	btfsc	3,2
   410     01DE  29E0               	goto	u361
   411     01DF  29E1               	goto	u360
   412     01E0                     u361:
   413     01E0  29DC               	goto	l972
   414     01E1                     u360:
   415     01E1                     l974:
   416                           
   417                           ;newmain.c: 56:         {;newmain.c: 59:             printStringLCD("ciao");
   418     01E1  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   419     01E2  120A  118A  216D  120A  118A  	fcall	_printStringLCD
   420     01E7                     l976:
   421                           
   422                           ;newmain.c: 61:             endSend = 0;
   423     01E7  01F8               	clrf	_endSend
   424     01E8                     l978:
   425                           
   426                           ;newmain.c: 62:             index = 0;
   427     01E8  01F9               	clrf	_index
   428     01E9  29DC               	goto	l972
   429     01EA  120A  118A  2810   	ljmp	start
   430     01ED                     __end_of_main:
   431                           
   432                           	psect	text1
   433     016D                     __ptext1:	
   434 ;; *************** function _printStringLCD *****************
   435 ;; Defined at:
   436 ;;		line 133 in file "newmain.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;  s               1    wreg     PTR unsigned char 
   439 ;;		 -> STR_1(5), 
   440 ;; Auto vars:     Size  Location     Type
   441 ;;  s               1    1[BANK0 ] PTR unsigned char 
   442 ;;		 -> STR_1(5), 
   443 ;;  i               1    2[BANK0 ] unsigned char 
   444 ;; Return value:  Size  Location     Type
   445 ;;                  1    wreg      void 
   446 ;; Registers used:
   447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   453 ;;      Params:         0       0       0       0       0
   454 ;;      Locals:         0       2       0       0       0
   455 ;;      Temps:          0       0       0       0       0
   456 ;;      Totals:         0       2       0       0       0
   457 ;;Total ram usage:        2 bytes
   458 ;; Hardware stack levels used: 1
   459 ;; Hardware stack levels required when called: 2
   460 ;; This function calls:
   461 ;;		_sendLCD
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467     016D                     _printStringLCD:	
   468                           ;psect for function _printStringLCD
   469                           
   470                           
   471                           ;incstack = 0
   472                           ; Regs used in _printStringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   473                           ;printStringLCD@s stored from wreg
   474     016D  1283               	bcf	3,5	;RP0=0, select bank0
   475     016E  1303               	bcf	3,6	;RP1=0, select bank0
   476     016F  00A1               	movwf	printStringLCD@s
   477     0170                     l960:
   478                           
   479                           ;newmain.c: 134:     char i = 0;
   480     0170  01A2               	clrf	printStringLCD@i
   481                           
   482                           ;newmain.c: 135:     while (s[i] != '\0') {
   483     0171  2987               	goto	l966
   484     0172                     l962:
   485                           
   486                           ;newmain.c: 136:         sendLCD(s[i++], 1);
   487     0172  01F4               	clrf	sendLCD@rs
   488     0173  0AF4               	incf	sendLCD@rs,f
   489     0174  0822               	movf	printStringLCD@i,w
   490     0175  0721               	addwf	printStringLCD@s,w
   491     0176  0084               	movwf	4
   492     0177  120A  118A  2211  120A  118A  	fcall	stringdir
   493     017C  120A  118A  21ED  120A  118A  	fcall	_sendLCD
   494     0181                     l964:
   495     0181  3001               	movlw	1
   496     0182  00FF               	movwf	btemp+1
   497     0183  087F               	movf	btemp+1,w
   498     0184  1283               	bcf	3,5	;RP0=0, select bank0
   499     0185  1303               	bcf	3,6	;RP1=0, select bank0
   500     0186  07A2               	addwf	printStringLCD@i,f
   501     0187                     l966:
   502                           
   503                           ;newmain.c: 135:     while (s[i] != '\0') {
   504     0187  0822               	movf	printStringLCD@i,w
   505     0188  0721               	addwf	printStringLCD@s,w
   506     0189  0084               	movwf	4
   507     018A  120A  118A  2211  120A  118A  	fcall	stringdir
   508     018F  3A00               	xorlw	0
   509     0190  1D03               	skipz
   510     0191  2993               	goto	u351
   511     0192  2994               	goto	u350
   512     0193                     u351:
   513     0193  2972               	goto	l962
   514     0194                     u350:
   515     0194                     l968:
   516                           
   517                           ;newmain.c: 139:     sendLCD('=', 1);
   518     0194  01F4               	clrf	sendLCD@rs
   519     0195  0AF4               	incf	sendLCD@rs,f
   520     0196  303D               	movlw	61
   521     0197  120A  118A  21ED  120A  118A  	fcall	_sendLCD
   522     019C                     l75:
   523     019C  0008               	return
   524     019D                     __end_of_printStringLCD:
   525                           
   526                           	psect	text2
   527     0128                     __ptext2:	
   528 ;; *************** function _initUart *****************
   529 ;; Defined at:
   530 ;;		line 90 in file "newmain.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;  baudRate        4   14[BANK0 ] long 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       4       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          0       4       0       0       0
   547 ;;      Totals:         0       8       0       0       0
   548 ;;Total ram usage:        8 bytes
   549 ;; Hardware stack levels used: 1
   550 ;; Hardware stack levels required when called: 2
   551 ;; This function calls:
   552 ;;		___aldiv
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558     0128                     _initUart:	
   559                           ;psect for function _initUart
   560                           
   561     0128                     l950:	
   562                           ;incstack = 0
   563                           ; Regs used in _initUart: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   564                           
   565                           
   566                           ;newmain.c: 92:     TRISC |= 0x80;
   567     0128  1683               	bsf	3,5	;RP0=1, select bank1
   568     0129  1303               	bcf	3,6	;RP1=0, select bank1
   569     012A  1787               	bsf	7,7	;volatile
   570     012B                     l952:
   571                           
   572                           ;newmain.c: 93:     TRISC &= ~0x40;
   573     012B  30BF               	movlw	191
   574     012C  00FF               	movwf	btemp+1
   575     012D  087F               	movf	btemp+1,w
   576     012E  0587               	andwf	7,f	;volatile
   577     012F                     l954:
   578                           
   579                           ;newmain.c: 95:     TXSTA |= 0x20;
   580     012F  1698               	bsf	24,5	;volatile
   581                           
   582                           ;newmain.c: 96:     RCSTA |= 0x90;
   583     0130  3090               	movlw	144
   584     0131  00FF               	movwf	btemp+1
   585     0132  087F               	movf	btemp+1,w
   586     0133  1283               	bcf	3,5	;RP0=0, select bank0
   587     0134  1303               	bcf	3,6	;RP1=0, select bank0
   588     0135  0498               	iorwf	24,f	;volatile
   589                           
   590                           ;newmain.c: 97:     INTCON |= 0xC0;
   591     0136  30C0               	movlw	192
   592     0137  00FF               	movwf	btemp+1
   593     0138  087F               	movf	btemp+1,w
   594     0139  048B               	iorwf	11,f	;volatile
   595     013A                     l956:
   596                           
   597                           ;newmain.c: 98:     PIE1 |= 0x20;
   598     013A  1683               	bsf	3,5	;RP0=1, select bank1
   599     013B  1303               	bcf	3,6	;RP1=0, select bank1
   600     013C  168C               	bsf	12,5	;volatile
   601     013D                     l958:
   602                           
   603                           ;newmain.c: 101:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   604     013D  1283               	bcf	3,5	;RP0=0, select bank0
   605     013E  1303               	bcf	3,6	;RP1=0, select bank0
   606     013F  082E               	movf	initUart@baudRate,w
   607     0140  00B2               	movwf	??_initUart
   608     0141  082F               	movf	initUart@baudRate+1,w
   609     0142  00B3               	movwf	??_initUart+1
   610     0143  0830               	movf	initUart@baudRate+2,w
   611     0144  00B4               	movwf	??_initUart+2
   612     0145  0831               	movf	initUart@baudRate+3,w
   613     0146  00B5               	movwf	??_initUart+3
   614     0147  3006               	movlw	6
   615     0148                     u345:
   616     0148  1003               	clrc
   617     0149  0DB2               	rlf	??_initUart,f
   618     014A  0DB3               	rlf	??_initUart+1,f
   619     014B  0DB4               	rlf	??_initUart+2,f
   620     014C  0DB5               	rlf	??_initUart+3,f
   621     014D                     u340:
   622     014D  3EFF               	addlw	-1
   623     014E  1D03               	skipz
   624     014F  2948               	goto	u345
   625     0150  0835               	movf	??_initUart+3,w
   626     0151  00A3               	movwf	___aldiv@divisor+3
   627     0152  0834               	movf	??_initUart+2,w
   628     0153  00A2               	movwf	___aldiv@divisor+2
   629     0154  0833               	movf	??_initUart+1,w
   630     0155  00A1               	movwf	___aldiv@divisor+1
   631     0156  0832               	movf	??_initUart,w
   632     0157  00A0               	movwf	___aldiv@divisor
   633     0158  3000               	movlw	0
   634     0159  00A7               	movwf	___aldiv@dividend+3
   635     015A  307A               	movlw	122
   636     015B  00A6               	movwf	___aldiv@dividend+2
   637     015C  3012               	movlw	18
   638     015D  00A5               	movwf	___aldiv@dividend+1
   639     015E  3000               	movlw	0
   640     015F  00A4               	movwf	___aldiv@dividend
   641     0160  120A  118A  2026  120A  118A  	fcall	___aldiv
   642     0165  1283               	bcf	3,5	;RP0=0, select bank0
   643     0166  1303               	bcf	3,6	;RP1=0, select bank0
   644     0167  0820               	movf	?___aldiv,w
   645     0168  3EFF               	addlw	255
   646     0169  1683               	bsf	3,5	;RP0=1, select bank1
   647     016A  1303               	bcf	3,6	;RP1=0, select bank1
   648     016B  0099               	movwf	25	;volatile
   649     016C                     l57:
   650     016C  0008               	return
   651     016D                     __end_of_initUart:
   652                           
   653                           	psect	text3
   654     0026                     __ptext3:	
   655 ;; *************** function ___aldiv *****************
   656 ;; Defined at:
   657 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  divisor         4    0[BANK0 ] long 
   660 ;;  dividend        4    4[BANK0 ] long 
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  quotient        4   10[BANK0 ] long 
   663 ;;  sign            1    9[BANK0 ] unsigned char 
   664 ;;  counter         1    8[BANK0 ] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  4    0[BANK0 ] long 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0, btemp+1
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   674 ;;      Params:         0       8       0       0       0
   675 ;;      Locals:         0       6       0       0       0
   676 ;;      Temps:          1       0       0       0       0
   677 ;;      Totals:         1      14       0       0       0
   678 ;;Total ram usage:       15 bytes
   679 ;; Hardware stack levels used: 1
   680 ;; Hardware stack levels required when called: 1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_initUart
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688     0026                     ___aldiv:	
   689                           ;psect for function ___aldiv
   690                           
   691     0026                     l788:	
   692                           ;incstack = 0
   693                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   694                           
   695     0026  1283               	bcf	3,5	;RP0=0, select bank0
   696     0027  1303               	bcf	3,6	;RP1=0, select bank0
   697     0028  01A9               	clrf	___aldiv@sign
   698     0029                     l790:
   699     0029  1FA3               	btfss	___aldiv@divisor+3,7
   700     002A  282C               	goto	u191
   701     002B  282D               	goto	u190
   702     002C                     u191:
   703     002C  283A               	goto	l233
   704     002D                     u190:
   705     002D                     l792:
   706     002D  09A0               	comf	___aldiv@divisor,f
   707     002E  09A1               	comf	___aldiv@divisor+1,f
   708     002F  09A2               	comf	___aldiv@divisor+2,f
   709     0030  09A3               	comf	___aldiv@divisor+3,f
   710     0031  0AA0               	incf	___aldiv@divisor,f
   711     0032  1903               	skipnz
   712     0033  0AA1               	incf	___aldiv@divisor+1,f
   713     0034  1903               	skipnz
   714     0035  0AA2               	incf	___aldiv@divisor+2,f
   715     0036  1903               	skipnz
   716     0037  0AA3               	incf	___aldiv@divisor+3,f
   717     0038  01A9               	clrf	___aldiv@sign
   718     0039  0AA9               	incf	___aldiv@sign,f
   719     003A                     l233:
   720     003A  1FA7               	btfss	___aldiv@dividend+3,7
   721     003B  283D               	goto	u201
   722     003C  283E               	goto	u200
   723     003D                     u201:
   724     003D  284D               	goto	l798
   725     003E                     u200:
   726     003E                     l794:
   727     003E  09A4               	comf	___aldiv@dividend,f
   728     003F  09A5               	comf	___aldiv@dividend+1,f
   729     0040  09A6               	comf	___aldiv@dividend+2,f
   730     0041  09A7               	comf	___aldiv@dividend+3,f
   731     0042  0AA4               	incf	___aldiv@dividend,f
   732     0043  1903               	skipnz
   733     0044  0AA5               	incf	___aldiv@dividend+1,f
   734     0045  1903               	skipnz
   735     0046  0AA6               	incf	___aldiv@dividend+2,f
   736     0047  1903               	skipnz
   737     0048  0AA7               	incf	___aldiv@dividend+3,f
   738     0049                     l796:
   739     0049  3001               	movlw	1
   740     004A  00FF               	movwf	btemp+1
   741     004B  087F               	movf	btemp+1,w
   742     004C  06A9               	xorwf	___aldiv@sign,f
   743     004D                     l798:
   744     004D  3000               	movlw	0
   745     004E  00AD               	movwf	___aldiv@quotient+3
   746     004F  3000               	movlw	0
   747     0050  00AC               	movwf	___aldiv@quotient+2
   748     0051  3000               	movlw	0
   749     0052  00AB               	movwf	___aldiv@quotient+1
   750     0053  3000               	movlw	0
   751     0054  00AA               	movwf	___aldiv@quotient
   752     0055                     l800:
   753     0055  0823               	movf	___aldiv@divisor+3,w
   754     0056  0422               	iorwf	___aldiv@divisor+2,w
   755     0057  0421               	iorwf	___aldiv@divisor+1,w
   756     0058  0420               	iorwf	___aldiv@divisor,w
   757     0059  1903               	skipnz
   758     005A  285C               	goto	u211
   759     005B  285D               	goto	u210
   760     005C                     u211:
   761     005C  28AA               	goto	l822
   762     005D                     u210:
   763     005D                     l802:
   764     005D  01A8               	clrf	___aldiv@counter
   765     005E  0AA8               	incf	___aldiv@counter,f
   766     005F  286D               	goto	l808
   767     0060                     l804:
   768     0060  3001               	movlw	1
   769     0061  00F4               	movwf	??___aldiv
   770     0062                     u225:
   771     0062  1003               	clrc
   772     0063  0DA0               	rlf	___aldiv@divisor,f
   773     0064  0DA1               	rlf	___aldiv@divisor+1,f
   774     0065  0DA2               	rlf	___aldiv@divisor+2,f
   775     0066  0DA3               	rlf	___aldiv@divisor+3,f
   776     0067  0BF4               	decfsz	??___aldiv,f
   777     0068  2862               	goto	u225
   778     0069                     l806:
   779     0069  3001               	movlw	1
   780     006A  00FF               	movwf	btemp+1
   781     006B  087F               	movf	btemp+1,w
   782     006C  07A8               	addwf	___aldiv@counter,f
   783     006D                     l808:
   784     006D  1FA3               	btfss	___aldiv@divisor+3,7
   785     006E  2870               	goto	u231
   786     006F  2871               	goto	u230
   787     0070                     u231:
   788     0070  2860               	goto	l804
   789     0071                     u230:
   790     0071                     l810:
   791     0071  3001               	movlw	1
   792     0072  00F4               	movwf	??___aldiv
   793     0073                     u245:
   794     0073  1003               	clrc
   795     0074  0DAA               	rlf	___aldiv@quotient,f
   796     0075  0DAB               	rlf	___aldiv@quotient+1,f
   797     0076  0DAC               	rlf	___aldiv@quotient+2,f
   798     0077  0DAD               	rlf	___aldiv@quotient+3,f
   799     0078  0BF4               	decfsz	??___aldiv,f
   800     0079  2873               	goto	u245
   801     007A                     l812:
   802     007A  0823               	movf	___aldiv@divisor+3,w
   803     007B  0227               	subwf	___aldiv@dividend+3,w
   804     007C  1D03               	skipz
   805     007D  2888               	goto	u255
   806     007E  0822               	movf	___aldiv@divisor+2,w
   807     007F  0226               	subwf	___aldiv@dividend+2,w
   808     0080  1D03               	skipz
   809     0081  2888               	goto	u255
   810     0082  0821               	movf	___aldiv@divisor+1,w
   811     0083  0225               	subwf	___aldiv@dividend+1,w
   812     0084  1D03               	skipz
   813     0085  2888               	goto	u255
   814     0086  0820               	movf	___aldiv@divisor,w
   815     0087  0224               	subwf	___aldiv@dividend,w
   816     0088                     u255:
   817     0088  1C03               	skipc
   818     0089  288B               	goto	u251
   819     008A  288C               	goto	u250
   820     008B                     u251:
   821     008B  289B               	goto	l818
   822     008C                     u250:
   823     008C                     l814:
   824     008C  0820               	movf	___aldiv@divisor,w
   825     008D  02A4               	subwf	___aldiv@dividend,f
   826     008E  0821               	movf	___aldiv@divisor+1,w
   827     008F  1C03               	skipc
   828     0090  0F21               	incfsz	___aldiv@divisor+1,w
   829     0091  02A5               	subwf	___aldiv@dividend+1,f
   830     0092  0822               	movf	___aldiv@divisor+2,w
   831     0093  1C03               	skipc
   832     0094  0F22               	incfsz	___aldiv@divisor+2,w
   833     0095  02A6               	subwf	___aldiv@dividend+2,f
   834     0096  0823               	movf	___aldiv@divisor+3,w
   835     0097  1C03               	skipc
   836     0098  0F23               	incfsz	___aldiv@divisor+3,w
   837     0099  02A7               	subwf	___aldiv@dividend+3,f
   838     009A                     l816:
   839     009A  142A               	bsf	___aldiv@quotient,0
   840     009B                     l818:
   841     009B  3001               	movlw	1
   842     009C                     u265:
   843     009C  1003               	clrc
   844     009D  0CA3               	rrf	___aldiv@divisor+3,f
   845     009E  0CA2               	rrf	___aldiv@divisor+2,f
   846     009F  0CA1               	rrf	___aldiv@divisor+1,f
   847     00A0  0CA0               	rrf	___aldiv@divisor,f
   848     00A1  3EFF               	addlw	-1
   849     00A2  1D03               	skipz
   850     00A3  289C               	goto	u265
   851     00A4                     l820:
   852     00A4  3001               	movlw	1
   853     00A5  02A8               	subwf	___aldiv@counter,f
   854     00A6  1D03               	btfss	3,2
   855     00A7  28A9               	goto	u271
   856     00A8  28AA               	goto	u270
   857     00A9                     u271:
   858     00A9  2871               	goto	l810
   859     00AA                     u270:
   860     00AA                     l822:
   861     00AA  0829               	movf	___aldiv@sign,w
   862     00AB  1903               	btfsc	3,2
   863     00AC  28AE               	goto	u281
   864     00AD  28AF               	goto	u280
   865     00AE                     u281:
   866     00AE  28BA               	goto	l826
   867     00AF                     u280:
   868     00AF                     l824:
   869     00AF  09AA               	comf	___aldiv@quotient,f
   870     00B0  09AB               	comf	___aldiv@quotient+1,f
   871     00B1  09AC               	comf	___aldiv@quotient+2,f
   872     00B2  09AD               	comf	___aldiv@quotient+3,f
   873     00B3  0AAA               	incf	___aldiv@quotient,f
   874     00B4  1903               	skipnz
   875     00B5  0AAB               	incf	___aldiv@quotient+1,f
   876     00B6  1903               	skipnz
   877     00B7  0AAC               	incf	___aldiv@quotient+2,f
   878     00B8  1903               	skipnz
   879     00B9  0AAD               	incf	___aldiv@quotient+3,f
   880     00BA                     l826:
   881     00BA  082D               	movf	___aldiv@quotient+3,w
   882     00BB  00A3               	movwf	?___aldiv+3
   883     00BC  082C               	movf	___aldiv@quotient+2,w
   884     00BD  00A2               	movwf	?___aldiv+2
   885     00BE  082B               	movf	___aldiv@quotient+1,w
   886     00BF  00A1               	movwf	?___aldiv+1
   887     00C0  082A               	movf	___aldiv@quotient,w
   888     00C1  00A0               	movwf	?___aldiv
   889     00C2                     l243:
   890     00C2  0008               	return
   891     00C3                     __end_of___aldiv:
   892                           
   893                           	psect	text4
   894     00C3                     __ptext4:	
   895 ;; *************** function _initLCD *****************
   896 ;; Defined at:
   897 ;;		line 67 in file "newmain.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   911 ;;      Params:         0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0
   913 ;;      Temps:          0       2       0       0       0
   914 ;;      Totals:         0       2       0       0       0
   915 ;;Total ram usage:        2 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; Hardware stack levels required when called: 2
   918 ;; This function calls:
   919 ;;		_sendLCD
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925     00C3                     _initLCD:	
   926                           ;psect for function _initLCD
   927                           
   928     00C3                     l918:	
   929                           ;incstack = 0
   930                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   931                           
   932                           
   933                           ;newmain.c: 68:     TRISD = 0x00;
   934     00C3  1683               	bsf	3,5	;RP0=1, select bank1
   935     00C4  1303               	bcf	3,6	;RP1=0, select bank1
   936     00C5  0188               	clrf	8	;volatile
   937     00C6                     l920:
   938                           
   939                           ;newmain.c: 69:     TRISE &= ~0x06;
   940     00C6  30F9               	movlw	249
   941     00C7  00FF               	movwf	btemp+1
   942     00C8  087F               	movf	btemp+1,w
   943     00C9  0589               	andwf	9,f	;volatile
   944     00CA                     l922:
   945                           
   946                           ;newmain.c: 71:     PORTEbits.RE1 = 0;
   947     00CA  1283               	bcf	3,5	;RP0=0, select bank0
   948     00CB  1303               	bcf	3,6	;RP1=0, select bank0
   949     00CC  1089               	bcf	9,1	;volatile
   950     00CD                     l924:
   951                           
   952                           ;newmain.c: 72:     PORTEbits.RE2 = 0;
   953     00CD  1109               	bcf	9,2	;volatile
   954     00CE                     l926:
   955                           
   956                           ;newmain.c: 74:     _delay((unsigned long)((20)*(8000000/4000.0)));
   957     00CE  3034               	movlw	52
   958     00CF  1283               	bcf	3,5	;RP0=0, select bank0
   959     00D0  1303               	bcf	3,6	;RP1=0, select bank0
   960     00D1  00A2               	movwf	??_initLCD+1
   961     00D2  30F1               	movlw	241
   962     00D3  00A1               	movwf	??_initLCD
   963     00D4                     u377:
   964     00D4  0BA1               	decfsz	??_initLCD,f
   965     00D5  28D4               	goto	u377
   966     00D6  0BA2               	decfsz	??_initLCD+1,f
   967     00D7  28D4               	goto	u377
   968     00D8                     l928:
   969                           
   970                           ;newmain.c: 75:     PORTEbits.RE1 = 1;
   971     00D8  1283               	bcf	3,5	;RP0=0, select bank0
   972     00D9  1303               	bcf	3,6	;RP1=0, select bank0
   973     00DA  1489               	bsf	9,1	;volatile
   974     00DB                     l930:
   975                           
   976                           ;newmain.c: 76:     sendLCD(0x38, 0);
   977     00DB  01F4               	clrf	sendLCD@rs
   978     00DC  3038               	movlw	56
   979     00DD  120A  118A  21ED  120A  118A  	fcall	_sendLCD
   980     00E2                     l932:
   981                           
   982                           ;newmain.c: 78:     _delay((unsigned long)((5)*(8000000/4000.0)));
   983     00E2  300D               	movlw	13
   984     00E3  1283               	bcf	3,5	;RP0=0, select bank0
   985     00E4  1303               	bcf	3,6	;RP1=0, select bank0
   986     00E5  00A2               	movwf	??_initLCD+1
   987     00E6  30FB               	movlw	251
   988     00E7  00A1               	movwf	??_initLCD
   989     00E8                     u387:
   990     00E8  0BA1               	decfsz	??_initLCD,f
   991     00E9  28E8               	goto	u387
   992     00EA  0BA2               	decfsz	??_initLCD+1,f
   993     00EB  28E8               	goto	u387
   994     00EC                     l934:
   995                           
   996                           ;newmain.c: 79:     sendLCD(0x38, 0);
   997     00EC  01F4               	clrf	sendLCD@rs
   998     00ED  3038               	movlw	56
   999     00EE  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1000     00F3                     l936:
  1001                           
  1002                           ;newmain.c: 81:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1003     00F3  3003               	movlw	3
  1004     00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1005     00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1006     00F6  00A2               	movwf	??_initLCD+1
  1007     00F7  3097               	movlw	151
  1008     00F8  00A1               	movwf	??_initLCD
  1009     00F9                     u397:
  1010     00F9  0BA1               	decfsz	??_initLCD,f
  1011     00FA  28F9               	goto	u397
  1012     00FB  0BA2               	decfsz	??_initLCD+1,f
  1013     00FC  28F9               	goto	u397
  1014     00FD                     l938:
  1015                           
  1016                           ;newmain.c: 82:     sendLCD(0x38, 0);
  1017     00FD  01F4               	clrf	sendLCD@rs
  1018     00FE  3038               	movlw	56
  1019     00FF  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1020     0104                     l940:
  1021                           
  1022                           ;newmain.c: 84:     sendLCD(0x08, 0);
  1023     0104  01F4               	clrf	sendLCD@rs
  1024     0105  3008               	movlw	8
  1025     0106  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1026     010B                     l942:
  1027                           
  1028                           ;newmain.c: 85:     sendLCD(0x0F, 0);
  1029     010B  01F4               	clrf	sendLCD@rs
  1030     010C  300F               	movlw	15
  1031     010D  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1032     0112                     l944:
  1033                           
  1034                           ;newmain.c: 86:     sendLCD(0x01, 0);
  1035     0112  01F4               	clrf	sendLCD@rs
  1036     0113  3001               	movlw	1
  1037     0114  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1038     0119                     l946:
  1039                           
  1040                           ;newmain.c: 87:     sendLCD(0x0E, 0);
  1041     0119  01F4               	clrf	sendLCD@rs
  1042     011A  300E               	movlw	14
  1043     011B  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1044     0120                     l948:
  1045                           
  1046                           ;newmain.c: 88:     sendLCD(0x80, 0);
  1047     0120  01F4               	clrf	sendLCD@rs
  1048     0121  3080               	movlw	128
  1049     0122  120A  118A  21ED  120A  118A  	fcall	_sendLCD
  1050     0127                     l54:
  1051     0127  0008               	return
  1052     0128                     __end_of_initLCD:
  1053                           
  1054                           	psect	text5
  1055     01ED                     __ptext5:	
  1056 ;; *************** function _sendLCD *****************
  1057 ;; Defined at:
  1058 ;;		line 104 in file "newmain.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;  dato            1    wreg     unsigned char 
  1061 ;;  rs              1    4[COMMON] unsigned char 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  dato            1    0[BANK0 ] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         1       0       0       0       0
  1074 ;;      Locals:         0       1       0       0       0
  1075 ;;      Temps:          2       0       0       0       0
  1076 ;;      Totals:         3       1       0       0       0
  1077 ;;Total ram usage:        4 bytes
  1078 ;; Hardware stack levels used: 1
  1079 ;; Hardware stack levels required when called: 1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_initLCD
  1084 ;;		_printStringLCD
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088     01ED                     _sendLCD:	
  1089                           ;psect for function _sendLCD
  1090                           
  1091                           
  1092                           ;incstack = 0
  1093                           ; Regs used in _sendLCD: [wreg+status,0]
  1094                           ;sendLCD@dato stored from wreg
  1095     01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1096     01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1097     01EF  00A0               	movwf	sendLCD@dato
  1098     01F0                     l904:
  1099                           
  1100                           ;newmain.c: 105:     PORTEbits.RE1 = 1;
  1101     01F0  1489               	bsf	9,1	;volatile
  1102     01F1                     l906:
  1103                           
  1104                           ;newmain.c: 106:     PORTD = dato;
  1105     01F1  0820               	movf	sendLCD@dato,w
  1106     01F2  0088               	movwf	8	;volatile
  1107     01F3                     l908:
  1108                           
  1109                           ;newmain.c: 107:     PORTEbits.RE2 = rs;
  1110     01F3  0C74               	rrf	sendLCD@rs,w
  1111     01F4  1C03               	skipc
  1112     01F5  1109               	bcf	9,2	;volatile
  1113     01F6  1803               	skipnc
  1114     01F7  1509               	bsf	9,2	;volatile
  1115     01F8                     l910:
  1116                           
  1117                           ;newmain.c: 108:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1118     01F8  3008               	movlw	8
  1119     01F9  00F6               	movwf	??_sendLCD+1
  1120     01FA  30C9               	movlw	201
  1121     01FB  00F5               	movwf	??_sendLCD
  1122     01FC                     u407:
  1123     01FC  0BF5               	decfsz	??_sendLCD,f
  1124     01FD  29FC               	goto	u407
  1125     01FE  0BF6               	decfsz	??_sendLCD+1,f
  1126     01FF  29FC               	goto	u407
  1127     0200  2A01               	nop2
  1128     0201                     l912:
  1129                           
  1130                           ;newmain.c: 110:     PORTEbits.RE1 = 0;
  1131     0201  1283               	bcf	3,5	;RP0=0, select bank0
  1132     0202  1303               	bcf	3,6	;RP1=0, select bank0
  1133     0203  1089               	bcf	9,1	;volatile
  1134     0204                     l914:
  1135                           
  1136                           ;newmain.c: 111:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1137     0204  3008               	movlw	8
  1138     0205  00F6               	movwf	??_sendLCD+1
  1139     0206  30C9               	movlw	201
  1140     0207  00F5               	movwf	??_sendLCD
  1141     0208                     u417:
  1142     0208  0BF5               	decfsz	??_sendLCD,f
  1143     0209  2A08               	goto	u417
  1144     020A  0BF6               	decfsz	??_sendLCD+1,f
  1145     020B  2A08               	goto	u417
  1146     020C  2A0D               	nop2
  1147     020D                     l916:
  1148                           
  1149                           ;newmain.c: 113:     PORTEbits.RE1 = 1;
  1150     020D  1283               	bcf	3,5	;RP0=0, select bank0
  1151     020E  1303               	bcf	3,6	;RP1=0, select bank0
  1152     020F  1489               	bsf	9,1	;volatile
  1153     0210                     l60:
  1154     0210  0008               	return
  1155     0211                     __end_of_sendLCD:
  1156                           
  1157                           	psect	text6
  1158     019D                     __ptext6:	
  1159 ;; *************** function _ISR *****************
  1160 ;; Defined at:
  1161 ;;		line 143 in file "newmain.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         0       0       0       0       0
  1176 ;;      Locals:         0       0       0       0       0
  1177 ;;      Temps:          4       0       0       0       0
  1178 ;;      Totals:         4       0       0       0       0
  1179 ;;Total ram usage:        4 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		Interrupt level 1
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188     019D                     _ISR:	
  1189                           ;psect for function _ISR
  1190                           
  1191     019D                     i1l892:
  1192                           
  1193                           ;newmain.c: 144:     if (RCIF) {
  1194     019D  1283               	bcf	3,5	;RP0=0, select bank0
  1195     019E  1303               	bcf	3,6	;RP1=0, select bank0
  1196     019F  1E8C               	btfss	12,5	;volatile
  1197     01A0  29A2               	goto	u32_21
  1198     01A1  29A3               	goto	u32_20
  1199     01A2                     u32_21:
  1200     01A2  29BD               	goto	i1l82
  1201     01A3                     u32_20:
  1202     01A3                     i1l894:
  1203                           
  1204                           ;newmain.c: 145:         string[index] = RCREG;
  1205     01A3  0879               	movf	_index,w
  1206     01A4  3E36               	addlw	(low (_string| 0))& (0+255)
  1207     01A5  0084               	movwf	4
  1208     01A6  081A               	movf	26,w	;volatile
  1209     01A7  1383               	bcf	3,7	;select IRP bank0
  1210     01A8  0080               	movwf	0
  1211                           
  1212                           ;newmain.c: 147:         if (string[index] == 13) {
  1213     01A9  0879               	movf	_index,w
  1214     01AA  3E36               	addlw	(low (_string| 0))& (0+255)
  1215     01AB  0084               	movwf	4
  1216     01AC  300D               	movlw	13
  1217     01AD  0600               	xorwf	0,w
  1218     01AE  1D03               	btfss	3,2
  1219     01AF  29B1               	goto	u33_21
  1220     01B0  29B2               	goto	u33_20
  1221     01B1                     u33_21:
  1222     01B1  29B8               	goto	i1l900
  1223     01B2                     u33_20:
  1224     01B2                     i1l896:
  1225                           
  1226                           ;newmain.c: 148:             string[index] = '\0';
  1227     01B2  0879               	movf	_index,w
  1228     01B3  3E36               	addlw	(low (_string| 0))& (0+255)
  1229     01B4  0084               	movwf	4
  1230     01B5  0180               	clrf	0
  1231     01B6                     i1l898:
  1232                           
  1233                           ;newmain.c: 149:             endSend = 1;
  1234     01B6  01F8               	clrf	_endSend
  1235     01B7  0AF8               	incf	_endSend,f
  1236     01B8                     i1l900:
  1237                           
  1238                           ;newmain.c: 151:         index++;
  1239     01B8  3001               	movlw	1
  1240     01B9  00FF               	movwf	btemp+1
  1241     01BA  087F               	movf	btemp+1,w
  1242     01BB  07F9               	addwf	_index,f
  1243     01BC                     i1l902:
  1244                           
  1245                           ;newmain.c: 152:         RCIF = 0;
  1246     01BC  128C               	bcf	12,5	;volatile
  1247     01BD                     i1l82:
  1248     01BD  0873               	movf	??_ISR+3,w
  1249     01BE  00FF               	movwf	btemp+1
  1250     01BF  0872               	movf	??_ISR+2,w
  1251     01C0  008A               	movwf	10
  1252     01C1  0871               	movf	??_ISR+1,w
  1253     01C2  0084               	movwf	4
  1254     01C3  0E70               	swapf	??_ISR,w
  1255     01C4  0083               	movwf	3
  1256     01C5  0EFE               	swapf	btemp,f
  1257     01C6  0E7E               	swapf	btemp,w
  1258     01C7  0009               	retfie
  1259     01C8                     __end_of_ISR:
  1260     007E                     btemp	set	126	;btemp
  1261     007E                     wtemp0	set	126
  1262                           
  1263                           	psect	intentry
  1264     0004                     __pintentry:	
  1265                           ;incstack = 0
  1266                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1267                           
  1268     0004                     interrupt_function:
  1269     007E                     saved_w	set	btemp
  1270     0004  00FE               	movwf	btemp
  1271     0005  0E03               	swapf	3,w
  1272     0006  00F0               	movwf	??_ISR
  1273     0007  0804               	movf	4,w
  1274     0008  00F1               	movwf	??_ISR+1
  1275     0009  080A               	movf	10,w
  1276     000A  00F2               	movwf	??_ISR+2
  1277     000B  087F               	movf	btemp+1,w
  1278     000C  00F3               	movwf	??_ISR+3
  1279     000D  120A  118A  299D   	ljmp	_ISR
  1280                           
  1281                           	psect	config
  1282                           
  1283                           ;Config register CONFIG @ 0x2007
  1284                           ;	Oscillator Selection bits
  1285                           ;	FOSC = HS, HS oscillator
  1286                           ;	Watchdog Timer Enable bit
  1287                           ;	WDTE = OFF, WDT disabled
  1288                           ;	Power-up Timer Enable bit
  1289                           ;	PWRTE = ON, PWRT enabled
  1290                           ;	Brown-out Reset Enable bit
  1291                           ;	BOREN = ON, BOR enabled
  1292                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1293                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1294                           ;	Data EEPROM Memory Code Protection bit
  1295                           ;	CPD = OFF, Data EEPROM code protection off
  1296                           ;	Flash Program Memory Write Enable bits
  1297                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1298                           ;	In-Circuit Debugger Mode bit
  1299                           ;	DEBUG = 0x1, unprogrammed default
  1300                           ;	Flash Program Memory Code Protection bit
  1301                           ;	CP = OFF, Code protection off
  1302     2007                     	org	8199
  1303     2007  3FF2               	dw	16370

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     22      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printStringLCD@s	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _printStringLCD->_sendLCD
    _initUart->___aldiv
    _initLCD->_sendLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUart
    _printStringLCD->_sendLCD
    _initUart->___aldiv
    _initLCD->_sendLCD

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2663
                            _initLCD
                           _initUart
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (1) _printStringLCD                                       2     2      0    1128
                                              1 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUart                                             8     4      4     573
                                             14 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     962
                                              1 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (2) _sendLCD                                              4     3      1     962
                                              4 COMMON     3     2      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _sendLCD
   _initUart
     ___aldiv
   _printStringLCD
     _sendLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Dec 05 11:47:31 2023

                      pc 0002                       l60 0210                       l54 0127  
                     l57 016C                       l75 019C                       fsr 0004  
                    l233 003A                      l243 00C2                      l800 0055  
                    l810 0071                      l802 005D                      l820 00A4  
                    l812 007A                      l804 0060                      l910 01F8  
                    l814 008C                      l806 0069                      l822 00AA  
                    l912 0201                      l904 01F0                      l920 00C6  
                    l824 00AF                      l816 009A                      l808 006D  
                    l914 0204                      l906 01F1                      l930 00DB  
                    l922 00CA                      l826 00BA                      l818 009B  
                    l916 020D                      l908 01F3                      l940 0104  
                    l932 00E2                      l924 00CD                      l942 010B  
                    l934 00EC                      l926 00CE                      l918 00C3  
                    l790 0029                      l950 0128                      l944 0112  
                    l936 00F3                      l928 00D8                      l792 002D  
                    l952 012B                      l960 0170                      l946 0119  
                    l938 00FD                      l794 003E                      l954 012F  
                    l962 0172                      l970 01C8                      l948 0120  
                    l796 0049                      l788 0026                      l956 013A  
                    l964 0181                      l972 01DC                      l798 004D  
                    l958 013D                      l966 0187                      l974 01E1  
                    l968 0194                      l976 01E7                      l978 01E8  
                    u200 003E                      u201 003D                      u210 005D  
                    u211 005C                      u230 0071                      u231 0070  
                    u225 0062                      u250 008C                      u251 008B  
                    u340 014D                      u245 0073                      u270 00AA  
                    u190 002D                      u350 0194                      u407 01FC  
                    u271 00A9                      u255 0088                      u191 002C  
                    u351 0193                      u280 00AF                      u360 01E1  
                    u417 0208                      u281 00AE                      u265 009C  
                    u345 0148                      u361 01E0                      _ISR 019D  
                    u377 00D4                      u387 00E8                      u397 00F9  
                    fsr0 0004                      indf 0000                     ?_ISR 0070  
                   STR_1 0217                     _PIE1 008C                     _RCIF 0065  
                   i1l82 01BD                     _main 01C8                     btemp 007E  
                   start 0010                    ??_ISR 0070          __end_of___aldiv 00C3  
                  ?_main 0070                    i1l900 01B8                    i1l902 01BC  
                  i1l892 019D                    i1l894 01A3                    i1l896 01B2  
                  i1l898 01B6                    _RCREG 001A                    _RCSTA 0018  
                  u32_20 01A3                    u32_21 01A2                    u33_20 01B2  
                  u33_21 01B1                    _SPBRG 0099                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _TXSTA 0098          __end_of_initLCD 0128                    _index 0079  
        __end_of_sendLCD 0211                    pclath 000A                    status 0003  
                  wtemp0 007E         initUart@baudRate 002E          __initialization 0013  
           __end_of_main 01ED                   ??_main 0077                   _INTCON 000B  
              ??___aldiv 0074         __end_of_initUart 016D                   _result 0077  
       ??_printStringLCD 0077                   _string 0036                ??_initLCD 0021  
              ??_sendLCD 0075                   saved_w 007E  __end_of__initialization 0022  
            sendLCD@dato 0020           __pcstackCOMMON 0070               __pbssBANK0 0036  
             __pmaintext 01C8               __pintentry 0004               __stringtab 0211  
              ?_initUart 002E                  ___aldiv 0026                  _endSend 0078  
                __ptext1 016D                  __ptext2 0128                  __ptext3 0026  
                __ptext4 00C3                  __ptext5 01ED                  __ptext6 019D  
                _initLCD 00C3                  _sendLCD 01ED         ___aldiv@dividend 0024  
        printStringLCD@i 0022          printStringLCD@s 0021     end_of_initialization 0022  
             ??_initUart 0032         ___aldiv@quotient 002A                _PORTEbits 0009  
    start_initialization 0013              __end_of_ISR 01C8              __pbssCOMMON 0077  
              ___latbits 0002            __pcstackBANK0 0020                 ?___aldiv 0020  
              __pstrings 0211                 ?_initLCD 0070                 ?_sendLCD 0074  
        ___aldiv@divisor 0020        interrupt_function 0004          ___aldiv@counter 0028  
            __stringbase 0216                sendLCD@rs 0074       __end_of__stringtab 0217  
         _printStringLCD 016D                 _initUart 0128   __end_of_printStringLCD 019D  
               intlevel1 0000                stringcode 0211                 stringdir 0211  
               stringtab 0211             ___aldiv@sign 0029          ?_printStringLCD 0070  
