

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Dec 21 14:57:04 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 22/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16LF877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009C                     	;# 
   105     009D                     	;# 
   106     009E                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     0006                     	;# 
   121     0007                     	;# 
   122     0008                     	;# 
   123     0009                     	;# 
   124     000A                     	;# 
   125     000B                     	;# 
   126     000C                     	;# 
   127     000D                     	;# 
   128     000E                     	;# 
   129     000E                     	;# 
   130     000F                     	;# 
   131     0010                     	;# 
   132     0011                     	;# 
   133     0012                     	;# 
   134     0013                     	;# 
   135     0014                     	;# 
   136     0015                     	;# 
   137     0015                     	;# 
   138     0016                     	;# 
   139     0017                     	;# 
   140     0018                     	;# 
   141     0019                     	;# 
   142     001A                     	;# 
   143     001B                     	;# 
   144     001B                     	;# 
   145     001C                     	;# 
   146     001D                     	;# 
   147     001E                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     0087                     	;# 
   153     0088                     	;# 
   154     0089                     	;# 
   155     008C                     	;# 
   156     008D                     	;# 
   157     008E                     	;# 
   158     0091                     	;# 
   159     0092                     	;# 
   160     0093                     	;# 
   161     0094                     	;# 
   162     0098                     	;# 
   163     0099                     	;# 
   164     009C                     	;# 
   165     009D                     	;# 
   166     009E                     	;# 
   167     009F                     	;# 
   168     010C                     	;# 
   169     010D                     	;# 
   170     010E                     	;# 
   171     010F                     	;# 
   172     018C                     	;# 
   173     018D                     	;# 
   174     001A                     _RCREG	set	26
   175     0009                     _PORTEbits	set	9
   176     0008                     _PORTD	set	8
   177     0006                     _PORTB	set	6
   178     0019                     _TXREG	set	25
   179     000C                     _PIR1bits	set	12
   180     000B                     _INTCON	set	11
   181     0018                     _RCSTA	set	24
   182     0065                     _RCIF	set	101
   183     0089                     _TRISE	set	137
   184     0088                     _TRISD	set	136
   185     0086                     _TRISB	set	134
   186     0099                     _SPBRG	set	153
   187     008C                     _PIE1	set	140
   188     0098                     _TXSTA	set	152
   189     0087                     _TRISC	set	135
   190                           
   191                           	psect	cinit
   192     0013                     start_initialization:	
   193                           ; #config settings
   194                           
   195     0013                     __initialization:
   196                           
   197                           ; Clear objects allocated to BANK0
   198     0013  1383               	bcf	3,7	;select IRP bank0
   199     0014  3020               	movlw	low __pbssBANK0
   200     0015  0084               	movwf	4
   201     0016  3036               	movlw	low (__pbssBANK0+22)
   202     0017  120A  118A  2200  120A  118A  	fcall	clear_ram0
   203     001C                     end_of_initialization:	
   204                           ;End of C runtime variable initialization code
   205                           
   206     001C                     __end_of__initialization:
   207     001C  0183               	clrf	3
   208     001D  120A  118A  298F   	ljmp	_main	;jump to C main() function
   209                           
   210                           	psect	bssBANK0
   211     0020                     __pbssBANK0:
   212     0020                     _columnConfig:
   213     0020                     	ds	10
   214     002A                     _indexString:
   215     002A                     	ds	1
   216     002B                     _endReceive:
   217     002B                     	ds	1
   218     002C                     _receivedString:
   219     002C                     	ds	10
   220                           
   221                           	psect	clrtext
   222     0200                     clear_ram0:	
   223                           ;	Called with FSR containing the base address, and
   224                           ;	W with the last address+1
   225                           
   226     0200  0064               	clrwdt	;clear the watchdog before getting into this loop
   227     0201                     clrloop0:
   228     0201  0180               	clrf	0	;clear RAM location pointed to by FSR
   229     0202  0A84               	incf	4,f	;increment pointer
   230     0203  0604               	xorwf	4,w	;XOR with final address
   231     0204  1903               	btfsc	3,2	;have we reached the end yet?
   232     0205  3400               	retlw	0	;all done for this memory range, return
   233     0206  0604               	xorwf	4,w	;XOR again to restore value
   234     0207  2A01               	goto	clrloop0	;do the next byte
   235                           
   236                           	psect	cstackCOMMON
   237     0070                     __pcstackCOMMON:
   238     0070                     ?_initLCD:
   239     0070                     ?_sendLCDString:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ?_main:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_ISR:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ??_ISR:	
   249                           ; 1 bytes @ 0x0
   250                           
   251                           
   252                           ; 1 bytes @ 0x0
   253     0070                     	ds	4
   254     0074                     ?_sendLCD:
   255     0074                     ??___aldiv:	
   256                           ; 1 bytes @ 0x4
   257                           
   258     0074                     sendLCD@rs:	
   259                           ; 1 bytes @ 0x4
   260                           
   261                           
   262                           ; 1 bytes @ 0x4
   263     0074                     	ds	1
   264     0075                     ??_initUART:
   265     0075                     ??_sendLCD:	
   266                           ; 1 bytes @ 0x5
   267                           
   268                           
   269                           ; 1 bytes @ 0x5
   270     0075                     	ds	2
   271     0077                     sendLCD@dato:
   272                           
   273                           ; 1 bytes @ 0x7
   274     0077                     	ds	1
   275     0078                     ??_initLCD:
   276     0078                     ??_sendLCDString:	
   277                           ; 1 bytes @ 0x8
   278                           
   279                           
   280                           ; 1 bytes @ 0x8
   281     0078                     	ds	2
   282     007A                     ??_main:
   283                           
   284                           	psect	cstackBANK0
   285     0036                     __pcstackBANK0:	
   286                           ; 1 bytes @ 0xA
   287                           
   288     0036                     ?___aldiv:
   289     0036                     sendLCDString@s:	
   290                           ; 4 bytes @ 0x0
   291                           
   292     0036                     ___aldiv@divisor:	
   293                           ; 1 bytes @ 0x0
   294                           
   295                           
   296                           ; 4 bytes @ 0x0
   297     0036                     	ds	1
   298     0037                     sendLCDString@i:
   299                           
   300                           ; 1 bytes @ 0x1
   301     0037                     	ds	3
   302     003A                     ___aldiv@dividend:
   303                           
   304                           ; 4 bytes @ 0x4
   305     003A                     	ds	4
   306     003E                     ___aldiv@counter:
   307                           
   308                           ; 1 bytes @ 0x8
   309     003E                     	ds	1
   310     003F                     ___aldiv@sign:
   311                           
   312                           ; 1 bytes @ 0x9
   313     003F                     	ds	1
   314     0040                     ___aldiv@quotient:
   315                           
   316                           ; 4 bytes @ 0xA
   317     0040                     	ds	4
   318     0044                     ?_initUART:
   319     0044                     initUART@baudRate:	
   320                           ; 1 bytes @ 0xE
   321                           
   322                           
   323                           ; 4 bytes @ 0xE
   324     0044                     	ds	4
   325                           
   326                           	psect	maintext
   327     018F                     __pmaintext:	
   328 ;;
   329 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   330 ;;
   331 ;; *************** function _main *****************
   332 ;; Defined at:
   333 ;;		line 45 in file "newmain.c"
   334 ;; Parameters:    Size  Location     Type
   335 ;;		None
   336 ;; Auto vars:     Size  Location     Type
   337 ;;		None
   338 ;; Return value:  Size  Location     Type
   339 ;;                  1    wreg      void 
   340 ;; Registers used:
   341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : B00/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   347 ;;      Params:         0       0       0       0       0
   348 ;;      Locals:         0       0       0       0       0
   349 ;;      Temps:          0       0       0       0       0
   350 ;;      Totals:         0       0       0       0       0
   351 ;;Total ram usage:        0 bytes
   352 ;; Hardware stack levels required when called: 3
   353 ;; This function calls:
   354 ;;		_initLCD
   355 ;;		_initUART
   356 ;;		_sendLCD
   357 ;;		_sendLCDString
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363     018F                     _main:	
   364                           ;psect for function _main
   365                           
   366     018F                     l921:	
   367                           ;incstack = 0
   368                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   369                           
   370                           
   371                           ;newmain.c: 46:     initUART(9600);
   372     018F  3000               	movlw	0
   373     0190  1283               	bcf	3,5	;RP0=0, select bank0
   374     0191  1303               	bcf	3,6	;RP1=0, select bank0
   375     0192  00C7               	movwf	initUART@baudRate+3
   376     0193  3000               	movlw	0
   377     0194  00C6               	movwf	initUART@baudRate+2
   378     0195  3025               	movlw	37
   379     0196  00C5               	movwf	initUART@baudRate+1
   380     0197  3080               	movlw	128
   381     0198  00C4               	movwf	initUART@baudRate
   382     0199  120A  118A  211F  120A  118A  	fcall	_initUART
   383                           
   384                           ;newmain.c: 48:     initLCD();
   385     019E  120A  118A  20BD  120A  118A  	fcall	_initLCD
   386     01A3                     l923:
   387                           
   388                           ;newmain.c: 52:         sendLCD(0x01, 0);
   389     01A3  01F4               	clrf	sendLCD@rs
   390     01A4  3001               	movlw	1
   391     01A5  120A  118A  21DC  120A  118A  	fcall	_sendLCD
   392     01AA                     l925:
   393                           
   394                           ;newmain.c: 53:         sendLCDString(receivedString);
   395     01AA  302C               	movlw	(low (_receivedString| 0))& (0+255)
   396     01AB  120A  118A  21B8  120A  118A  	fcall	_sendLCDString
   397     01B0                     l927:
   398                           
   399                           ;newmain.c: 54:         endReceive = 0;
   400     01B0  1283               	bcf	3,5	;RP0=0, select bank0
   401     01B1  1303               	bcf	3,6	;RP1=0, select bank0
   402     01B2  01AB               	clrf	_endReceive
   403     01B3                     l929:
   404                           
   405                           ;newmain.c: 55:         indexString = 0;
   406     01B3  01AA               	clrf	_indexString
   407     01B4  29A3               	goto	l923
   408     01B5  120A  118A  2810   	ljmp	start
   409     01B8                     __end_of_main:
   410                           
   411                           	psect	text1
   412     01B8                     __ptext1:	
   413 ;; *************** function _sendLCDString *****************
   414 ;; Defined at:
   415 ;;		line 138 in file "newmain.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;  s               1    wreg     PTR unsigned char 
   418 ;;		 -> receivedString(10), 
   419 ;; Auto vars:     Size  Location     Type
   420 ;;  s               1    0[BANK0 ] PTR unsigned char 
   421 ;;		 -> receivedString(10), 
   422 ;;  i               1    1[BANK0 ] unsigned char 
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   432 ;;      Params:         0       0       0       0       0
   433 ;;      Locals:         0       2       0       0       0
   434 ;;      Temps:          1       0       0       0       0
   435 ;;      Totals:         1       2       0       0       0
   436 ;;Total ram usage:        3 bytes
   437 ;; Hardware stack levels used: 1
   438 ;; Hardware stack levels required when called: 2
   439 ;; This function calls:
   440 ;;		_sendLCD
   441 ;; This function is called by:
   442 ;;		_main
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446     01B8                     _sendLCDString:	
   447                           ;psect for function _sendLCDString
   448                           
   449                           
   450                           ;incstack = 0
   451                           ; Regs used in _sendLCDString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   452                           ;sendLCDString@s stored from wreg
   453     01B8  1283               	bcf	3,5	;RP0=0, select bank0
   454     01B9  1303               	bcf	3,6	;RP1=0, select bank0
   455     01BA  00B6               	movwf	sendLCDString@s
   456     01BB                     l913:
   457                           
   458                           ;newmain.c: 139:     char i = 0;
   459     01BB  01B7               	clrf	sendLCDString@i
   460                           
   461                           ;newmain.c: 140:     while (s[i] != '\0')
   462     01BC  29D0               	goto	l919
   463     01BD                     l915:
   464                           
   465                           ;newmain.c: 141:     {;newmain.c: 142:         sendLCD(s[i], 1);
   466     01BD  01F4               	clrf	sendLCD@rs
   467     01BE  0AF4               	incf	sendLCD@rs,f
   468     01BF  0837               	movf	sendLCDString@i,w
   469     01C0  0736               	addwf	sendLCDString@s,w
   470     01C1  00F8               	movwf	??_sendLCDString
   471     01C2  0878               	movf	??_sendLCDString,w
   472     01C3  0084               	movwf	4
   473     01C4  0800               	movf	0,w
   474     01C5  120A  118A  21DC  120A  118A  	fcall	_sendLCD
   475     01CA                     l917:
   476                           
   477                           ;newmain.c: 143:         i++;
   478     01CA  3001               	movlw	1
   479     01CB  00FF               	movwf	btemp+1
   480     01CC  087F               	movf	btemp+1,w
   481     01CD  1283               	bcf	3,5	;RP0=0, select bank0
   482     01CE  1303               	bcf	3,6	;RP1=0, select bank0
   483     01CF  07B7               	addwf	sendLCDString@i,f
   484     01D0                     l919:
   485                           
   486                           ;newmain.c: 140:     while (s[i] != '\0')
   487     01D0  0837               	movf	sendLCDString@i,w
   488     01D1  0736               	addwf	sendLCDString@s,w
   489     01D2  00F8               	movwf	??_sendLCDString
   490     01D3  0878               	movf	??_sendLCDString,w
   491     01D4  0084               	movwf	4
   492     01D5  1383               	bcf	3,7	;select IRP bank0
   493     01D6  0800               	movf	0,w
   494     01D7  1D03               	btfss	3,2
   495     01D8  29DA               	goto	u321
   496     01D9  29DB               	goto	u320
   497     01DA                     u321:
   498     01DA  29BD               	goto	l915
   499     01DB                     u320:
   500     01DB                     l84:
   501     01DB  0008               	return
   502     01DC                     __end_of_sendLCDString:
   503                           
   504                           	psect	text2
   505     011F                     __ptext2:	
   506 ;; *************** function _initUART *****************
   507 ;; Defined at:
   508 ;;		line 59 in file "newmain.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;  baudRate        4   14[BANK0 ] long 
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       4       0       0       0
   523 ;;      Locals:         0       0       0       0       0
   524 ;;      Temps:          4       0       0       0       0
   525 ;;      Totals:         4       4       0       0       0
   526 ;;Total ram usage:        8 bytes
   527 ;; Hardware stack levels used: 1
   528 ;; Hardware stack levels required when called: 2
   529 ;; This function calls:
   530 ;;		___aldiv
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536     011F                     _initUART:	
   537                           ;psect for function _initUART
   538                           
   539     011F                     l871:	
   540                           ;incstack = 0
   541                           ; Regs used in _initUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   542                           
   543                           
   544                           ;newmain.c: 59: void initUART(long int baudRate);newmain.c: 60: {;newmain.c: 66:     TRI
      +                          SC |= 0x80;
   545     011F  1683               	bsf	3,5	;RP0=1, select bank1
   546     0120  1303               	bcf	3,6	;RP1=0, select bank1
   547     0121  1787               	bsf	7,7	;volatile
   548     0122                     l873:
   549                           
   550                           ;newmain.c: 67:     TRISC &= ~0x40;
   551     0122  30BF               	movlw	191
   552     0123  00FF               	movwf	btemp+1
   553     0124  087F               	movf	btemp+1,w
   554     0125  0587               	andwf	7,f	;volatile
   555     0126                     l875:
   556                           
   557                           ;newmain.c: 73:     TXSTA |= 0X20;
   558     0126  1698               	bsf	24,5	;volatile
   559                           
   560                           ;newmain.c: 78:     RCSTA |= 0x90;
   561     0127  3090               	movlw	144
   562     0128  00FF               	movwf	btemp+1
   563     0129  087F               	movf	btemp+1,w
   564     012A  1283               	bcf	3,5	;RP0=0, select bank0
   565     012B  1303               	bcf	3,6	;RP1=0, select bank0
   566     012C  0498               	iorwf	24,f	;volatile
   567                           
   568                           ;newmain.c: 80:     INTCON |= 0xC0;
   569     012D  30C0               	movlw	192
   570     012E  00FF               	movwf	btemp+1
   571     012F  087F               	movf	btemp+1,w
   572     0130  048B               	iorwf	11,f	;volatile
   573     0131                     l877:
   574                           
   575                           ;newmain.c: 81:     PIE1 |= 0x20;
   576     0131  1683               	bsf	3,5	;RP0=1, select bank1
   577     0132  1303               	bcf	3,6	;RP1=0, select bank1
   578     0133  168C               	bsf	12,5	;volatile
   579     0134                     l879:
   580                           
   581                           ;newmain.c: 84:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   582     0134  1283               	bcf	3,5	;RP0=0, select bank0
   583     0135  1303               	bcf	3,6	;RP1=0, select bank0
   584     0136  0844               	movf	initUART@baudRate,w
   585     0137  00F5               	movwf	??_initUART
   586     0138  0845               	movf	initUART@baudRate+1,w
   587     0139  00F6               	movwf	??_initUART+1
   588     013A  0846               	movf	initUART@baudRate+2,w
   589     013B  00F7               	movwf	??_initUART+2
   590     013C  0847               	movf	initUART@baudRate+3,w
   591     013D  00F8               	movwf	??_initUART+3
   592     013E  3006               	movlw	6
   593     013F                     u315:
   594     013F  1003               	clrc
   595     0140  0DF5               	rlf	??_initUART,f
   596     0141  0DF6               	rlf	??_initUART+1,f
   597     0142  0DF7               	rlf	??_initUART+2,f
   598     0143  0DF8               	rlf	??_initUART+3,f
   599     0144                     u310:
   600     0144  3EFF               	addlw	-1
   601     0145  1D03               	skipz
   602     0146  293F               	goto	u315
   603     0147  0878               	movf	??_initUART+3,w
   604     0148  00B9               	movwf	___aldiv@divisor+3
   605     0149  0877               	movf	??_initUART+2,w
   606     014A  00B8               	movwf	___aldiv@divisor+2
   607     014B  0876               	movf	??_initUART+1,w
   608     014C  00B7               	movwf	___aldiv@divisor+1
   609     014D  0875               	movf	??_initUART,w
   610     014E  00B6               	movwf	___aldiv@divisor
   611     014F  3000               	movlw	0
   612     0150  00BD               	movwf	___aldiv@dividend+3
   613     0151  307A               	movlw	122
   614     0152  00BC               	movwf	___aldiv@dividend+2
   615     0153  3012               	movlw	18
   616     0154  00BB               	movwf	___aldiv@dividend+1
   617     0155  3000               	movlw	0
   618     0156  00BA               	movwf	___aldiv@dividend
   619     0157  120A  118A  2020  120A  118A  	fcall	___aldiv
   620     015C  1283               	bcf	3,5	;RP0=0, select bank0
   621     015D  1303               	bcf	3,6	;RP1=0, select bank0
   622     015E  0836               	movf	?___aldiv,w
   623     015F  3EFF               	addlw	255
   624     0160  1683               	bsf	3,5	;RP0=1, select bank1
   625     0161  1303               	bcf	3,6	;RP1=0, select bank1
   626     0162  0099               	movwf	25	;volatile
   627     0163                     l61:
   628     0163  0008               	return
   629     0164                     __end_of_initUART:
   630                           
   631                           	psect	text3
   632     0020                     __ptext3:	
   633 ;; *************** function ___aldiv *****************
   634 ;; Defined at:
   635 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;  divisor         4    0[BANK0 ] long 
   638 ;;  dividend        4    4[BANK0 ] long 
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  quotient        4   10[BANK0 ] long 
   641 ;;  sign            1    9[BANK0 ] unsigned char 
   642 ;;  counter         1    8[BANK0 ] unsigned char 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  4    0[BANK0 ] long 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0, btemp+1
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   652 ;;      Params:         0       8       0       0       0
   653 ;;      Locals:         0       6       0       0       0
   654 ;;      Temps:          1       0       0       0       0
   655 ;;      Totals:         1      14       0       0       0
   656 ;;Total ram usage:       15 bytes
   657 ;; Hardware stack levels used: 1
   658 ;; Hardware stack levels required when called: 1
   659 ;; This function calls:
   660 ;;		Nothing
   661 ;; This function is called by:
   662 ;;		_initUART
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666     0020                     ___aldiv:	
   667                           ;psect for function ___aldiv
   668                           
   669     0020                     l829:	
   670                           ;incstack = 0
   671                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   672                           
   673     0020  1283               	bcf	3,5	;RP0=0, select bank0
   674     0021  1303               	bcf	3,6	;RP1=0, select bank0
   675     0022  01BF               	clrf	___aldiv@sign
   676     0023                     l831:
   677     0023  1FB9               	btfss	___aldiv@divisor+3,7
   678     0024  2826               	goto	u211
   679     0025  2827               	goto	u210
   680     0026                     u211:
   681     0026  2834               	goto	l248
   682     0027                     u210:
   683     0027                     l833:
   684     0027  09B6               	comf	___aldiv@divisor,f
   685     0028  09B7               	comf	___aldiv@divisor+1,f
   686     0029  09B8               	comf	___aldiv@divisor+2,f
   687     002A  09B9               	comf	___aldiv@divisor+3,f
   688     002B  0AB6               	incf	___aldiv@divisor,f
   689     002C  1903               	skipnz
   690     002D  0AB7               	incf	___aldiv@divisor+1,f
   691     002E  1903               	skipnz
   692     002F  0AB8               	incf	___aldiv@divisor+2,f
   693     0030  1903               	skipnz
   694     0031  0AB9               	incf	___aldiv@divisor+3,f
   695     0032  01BF               	clrf	___aldiv@sign
   696     0033  0ABF               	incf	___aldiv@sign,f
   697     0034                     l248:
   698     0034  1FBD               	btfss	___aldiv@dividend+3,7
   699     0035  2837               	goto	u221
   700     0036  2838               	goto	u220
   701     0037                     u221:
   702     0037  2847               	goto	l839
   703     0038                     u220:
   704     0038                     l835:
   705     0038  09BA               	comf	___aldiv@dividend,f
   706     0039  09BB               	comf	___aldiv@dividend+1,f
   707     003A  09BC               	comf	___aldiv@dividend+2,f
   708     003B  09BD               	comf	___aldiv@dividend+3,f
   709     003C  0ABA               	incf	___aldiv@dividend,f
   710     003D  1903               	skipnz
   711     003E  0ABB               	incf	___aldiv@dividend+1,f
   712     003F  1903               	skipnz
   713     0040  0ABC               	incf	___aldiv@dividend+2,f
   714     0041  1903               	skipnz
   715     0042  0ABD               	incf	___aldiv@dividend+3,f
   716     0043                     l837:
   717     0043  3001               	movlw	1
   718     0044  00FF               	movwf	btemp+1
   719     0045  087F               	movf	btemp+1,w
   720     0046  06BF               	xorwf	___aldiv@sign,f
   721     0047                     l839:
   722     0047  3000               	movlw	0
   723     0048  00C3               	movwf	___aldiv@quotient+3
   724     0049  3000               	movlw	0
   725     004A  00C2               	movwf	___aldiv@quotient+2
   726     004B  3000               	movlw	0
   727     004C  00C1               	movwf	___aldiv@quotient+1
   728     004D  3000               	movlw	0
   729     004E  00C0               	movwf	___aldiv@quotient
   730     004F                     l841:
   731     004F  0839               	movf	___aldiv@divisor+3,w
   732     0050  0438               	iorwf	___aldiv@divisor+2,w
   733     0051  0437               	iorwf	___aldiv@divisor+1,w
   734     0052  0436               	iorwf	___aldiv@divisor,w
   735     0053  1903               	skipnz
   736     0054  2856               	goto	u231
   737     0055  2857               	goto	u230
   738     0056                     u231:
   739     0056  28A4               	goto	l863
   740     0057                     u230:
   741     0057                     l843:
   742     0057  01BE               	clrf	___aldiv@counter
   743     0058  0ABE               	incf	___aldiv@counter,f
   744     0059  2867               	goto	l849
   745     005A                     l845:
   746     005A  3001               	movlw	1
   747     005B  00F4               	movwf	??___aldiv
   748     005C                     u245:
   749     005C  1003               	clrc
   750     005D  0DB6               	rlf	___aldiv@divisor,f
   751     005E  0DB7               	rlf	___aldiv@divisor+1,f
   752     005F  0DB8               	rlf	___aldiv@divisor+2,f
   753     0060  0DB9               	rlf	___aldiv@divisor+3,f
   754     0061  0BF4               	decfsz	??___aldiv,f
   755     0062  285C               	goto	u245
   756     0063                     l847:
   757     0063  3001               	movlw	1
   758     0064  00FF               	movwf	btemp+1
   759     0065  087F               	movf	btemp+1,w
   760     0066  07BE               	addwf	___aldiv@counter,f
   761     0067                     l849:
   762     0067  1FB9               	btfss	___aldiv@divisor+3,7
   763     0068  286A               	goto	u251
   764     0069  286B               	goto	u250
   765     006A                     u251:
   766     006A  285A               	goto	l845
   767     006B                     u250:
   768     006B                     l851:
   769     006B  3001               	movlw	1
   770     006C  00F4               	movwf	??___aldiv
   771     006D                     u265:
   772     006D  1003               	clrc
   773     006E  0DC0               	rlf	___aldiv@quotient,f
   774     006F  0DC1               	rlf	___aldiv@quotient+1,f
   775     0070  0DC2               	rlf	___aldiv@quotient+2,f
   776     0071  0DC3               	rlf	___aldiv@quotient+3,f
   777     0072  0BF4               	decfsz	??___aldiv,f
   778     0073  286D               	goto	u265
   779     0074                     l853:
   780     0074  0839               	movf	___aldiv@divisor+3,w
   781     0075  023D               	subwf	___aldiv@dividend+3,w
   782     0076  1D03               	skipz
   783     0077  2882               	goto	u275
   784     0078  0838               	movf	___aldiv@divisor+2,w
   785     0079  023C               	subwf	___aldiv@dividend+2,w
   786     007A  1D03               	skipz
   787     007B  2882               	goto	u275
   788     007C  0837               	movf	___aldiv@divisor+1,w
   789     007D  023B               	subwf	___aldiv@dividend+1,w
   790     007E  1D03               	skipz
   791     007F  2882               	goto	u275
   792     0080  0836               	movf	___aldiv@divisor,w
   793     0081  023A               	subwf	___aldiv@dividend,w
   794     0082                     u275:
   795     0082  1C03               	skipc
   796     0083  2885               	goto	u271
   797     0084  2886               	goto	u270
   798     0085                     u271:
   799     0085  2895               	goto	l859
   800     0086                     u270:
   801     0086                     l855:
   802     0086  0836               	movf	___aldiv@divisor,w
   803     0087  02BA               	subwf	___aldiv@dividend,f
   804     0088  0837               	movf	___aldiv@divisor+1,w
   805     0089  1C03               	skipc
   806     008A  0F37               	incfsz	___aldiv@divisor+1,w
   807     008B  02BB               	subwf	___aldiv@dividend+1,f
   808     008C  0838               	movf	___aldiv@divisor+2,w
   809     008D  1C03               	skipc
   810     008E  0F38               	incfsz	___aldiv@divisor+2,w
   811     008F  02BC               	subwf	___aldiv@dividend+2,f
   812     0090  0839               	movf	___aldiv@divisor+3,w
   813     0091  1C03               	skipc
   814     0092  0F39               	incfsz	___aldiv@divisor+3,w
   815     0093  02BD               	subwf	___aldiv@dividend+3,f
   816     0094                     l857:
   817     0094  1440               	bsf	___aldiv@quotient,0
   818     0095                     l859:
   819     0095  3001               	movlw	1
   820     0096                     u285:
   821     0096  1003               	clrc
   822     0097  0CB9               	rrf	___aldiv@divisor+3,f
   823     0098  0CB8               	rrf	___aldiv@divisor+2,f
   824     0099  0CB7               	rrf	___aldiv@divisor+1,f
   825     009A  0CB6               	rrf	___aldiv@divisor,f
   826     009B  3EFF               	addlw	-1
   827     009C  1D03               	skipz
   828     009D  2896               	goto	u285
   829     009E                     l861:
   830     009E  3001               	movlw	1
   831     009F  02BE               	subwf	___aldiv@counter,f
   832     00A0  1D03               	btfss	3,2
   833     00A1  28A3               	goto	u291
   834     00A2  28A4               	goto	u290
   835     00A3                     u291:
   836     00A3  286B               	goto	l851
   837     00A4                     u290:
   838     00A4                     l863:
   839     00A4  083F               	movf	___aldiv@sign,w
   840     00A5  1903               	btfsc	3,2
   841     00A6  28A8               	goto	u301
   842     00A7  28A9               	goto	u300
   843     00A8                     u301:
   844     00A8  28B4               	goto	l867
   845     00A9                     u300:
   846     00A9                     l865:
   847     00A9  09C0               	comf	___aldiv@quotient,f
   848     00AA  09C1               	comf	___aldiv@quotient+1,f
   849     00AB  09C2               	comf	___aldiv@quotient+2,f
   850     00AC  09C3               	comf	___aldiv@quotient+3,f
   851     00AD  0AC0               	incf	___aldiv@quotient,f
   852     00AE  1903               	skipnz
   853     00AF  0AC1               	incf	___aldiv@quotient+1,f
   854     00B0  1903               	skipnz
   855     00B1  0AC2               	incf	___aldiv@quotient+2,f
   856     00B2  1903               	skipnz
   857     00B3  0AC3               	incf	___aldiv@quotient+3,f
   858     00B4                     l867:
   859     00B4  0843               	movf	___aldiv@quotient+3,w
   860     00B5  00B9               	movwf	?___aldiv+3
   861     00B6  0842               	movf	___aldiv@quotient+2,w
   862     00B7  00B8               	movwf	?___aldiv+2
   863     00B8  0841               	movf	___aldiv@quotient+1,w
   864     00B9  00B7               	movwf	?___aldiv+1
   865     00BA  0840               	movf	___aldiv@quotient,w
   866     00BB  00B6               	movwf	?___aldiv
   867     00BC                     l258:
   868     00BC  0008               	return
   869     00BD                     __end_of___aldiv:
   870                           
   871                           	psect	text4
   872     00BD                     __ptext4:	
   873 ;; *************** function _initLCD *****************
   874 ;; Defined at:
   875 ;;		line 166 in file "newmain.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0
   891 ;;      Temps:          2       0       0       0       0
   892 ;;      Totals:         2       0       0       0       0
   893 ;;Total ram usage:        2 bytes
   894 ;; Hardware stack levels used: 1
   895 ;; Hardware stack levels required when called: 2
   896 ;; This function calls:
   897 ;;		_sendLCD
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903     00BD                     _initLCD:	
   904                           ;psect for function _initLCD
   905                           
   906     00BD                     l881:	
   907                           ;incstack = 0
   908                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   909                           
   910                           
   911                           ;newmain.c: 167:     TRISD = 0x00;
   912     00BD  1683               	bsf	3,5	;RP0=1, select bank1
   913     00BE  1303               	bcf	3,6	;RP1=0, select bank1
   914     00BF  0188               	clrf	8	;volatile
   915     00C0                     l883:
   916                           
   917                           ;newmain.c: 168:     TRISE &= ~0x06;
   918     00C0  30F9               	movlw	249
   919     00C1  00FF               	movwf	btemp+1
   920     00C2  087F               	movf	btemp+1,w
   921     00C3  0589               	andwf	9,f	;volatile
   922     00C4                     l885:
   923                           
   924                           ;newmain.c: 170:     PORTEbits.RE1 = 0;
   925     00C4  1283               	bcf	3,5	;RP0=0, select bank0
   926     00C5  1303               	bcf	3,6	;RP1=0, select bank0
   927     00C6  1089               	bcf	9,1	;volatile
   928     00C7                     l887:
   929                           
   930                           ;newmain.c: 171:     PORTEbits.RE2 = 0;
   931     00C7  1109               	bcf	9,2	;volatile
   932     00C8                     l889:
   933                           
   934                           ;newmain.c: 173:     _delay((unsigned long)((20)*(8000000/4000.0)));
   935     00C8  3034               	movlw	52
   936     00C9  00F9               	movwf	??_initLCD+1
   937     00CA  30F1               	movlw	241
   938     00CB  00F8               	movwf	??_initLCD
   939     00CC                     u397:
   940     00CC  0BF8               	decfsz	??_initLCD,f
   941     00CD  28CC               	goto	u397
   942     00CE  0BF9               	decfsz	??_initLCD+1,f
   943     00CF  28CC               	goto	u397
   944     00D0  28D1               	nop2
   945     00D1                     l891:
   946                           
   947                           ;newmain.c: 174:     PORTEbits.RE1 = 1;
   948     00D1  1283               	bcf	3,5	;RP0=0, select bank0
   949     00D2  1303               	bcf	3,6	;RP1=0, select bank0
   950     00D3  1489               	bsf	9,1	;volatile
   951     00D4                     l893:
   952                           
   953                           ;newmain.c: 175:     sendLCD(0x38, 0);
   954     00D4  01F4               	clrf	sendLCD@rs
   955     00D5  3038               	movlw	56
   956     00D6  120A  118A  21DC  120A  118A  	fcall	_sendLCD
   957     00DB                     l895:
   958                           
   959                           ;newmain.c: 177:     _delay((unsigned long)((5)*(8000000/4000.0)));
   960     00DB  300D               	movlw	13
   961     00DC  00F9               	movwf	??_initLCD+1
   962     00DD  30FB               	movlw	251
   963     00DE  00F8               	movwf	??_initLCD
   964     00DF                     u407:
   965     00DF  0BF8               	decfsz	??_initLCD,f
   966     00E0  28DF               	goto	u407
   967     00E1  0BF9               	decfsz	??_initLCD+1,f
   968     00E2  28DF               	goto	u407
   969     00E3  28E4               	nop2
   970     00E4                     l897:
   971                           
   972                           ;newmain.c: 178:     sendLCD(0x38, 0);
   973     00E4  01F4               	clrf	sendLCD@rs
   974     00E5  3038               	movlw	56
   975     00E6  120A  118A  21DC  120A  118A  	fcall	_sendLCD
   976     00EB                     l899:
   977                           
   978                           ;newmain.c: 180:     _delay((unsigned long)((1)*(8000000/4000.0)));
   979     00EB  3003               	movlw	3
   980     00EC  00F9               	movwf	??_initLCD+1
   981     00ED  3097               	movlw	151
   982     00EE  00F8               	movwf	??_initLCD
   983     00EF                     u417:
   984     00EF  0BF8               	decfsz	??_initLCD,f
   985     00F0  28EF               	goto	u417
   986     00F1  0BF9               	decfsz	??_initLCD+1,f
   987     00F2  28EF               	goto	u417
   988     00F3  28F4               	nop2
   989     00F4                     l901:
   990                           
   991                           ;newmain.c: 181:     sendLCD(0x38, 0);
   992     00F4  01F4               	clrf	sendLCD@rs
   993     00F5  3038               	movlw	56
   994     00F6  120A  118A  21DC  120A  118A  	fcall	_sendLCD
   995     00FB                     l903:
   996                           
   997                           ;newmain.c: 183:     sendLCD(0x08, 0);
   998     00FB  01F4               	clrf	sendLCD@rs
   999     00FC  3008               	movlw	8
  1000     00FD  120A  118A  21DC  120A  118A  	fcall	_sendLCD
  1001     0102                     l905:
  1002                           
  1003                           ;newmain.c: 184:     sendLCD(0x0F, 0);
  1004     0102  01F4               	clrf	sendLCD@rs
  1005     0103  300F               	movlw	15
  1006     0104  120A  118A  21DC  120A  118A  	fcall	_sendLCD
  1007     0109                     l907:
  1008                           
  1009                           ;newmain.c: 185:     sendLCD(0x01, 0);
  1010     0109  01F4               	clrf	sendLCD@rs
  1011     010A  3001               	movlw	1
  1012     010B  120A  118A  21DC  120A  118A  	fcall	_sendLCD
  1013     0110                     l909:
  1014                           
  1015                           ;newmain.c: 186:     sendLCD(0x0E, 0);
  1016     0110  01F4               	clrf	sendLCD@rs
  1017     0111  300E               	movlw	14
  1018     0112  120A  118A  21DC  120A  118A  	fcall	_sendLCD
  1019     0117                     l911:
  1020                           
  1021                           ;newmain.c: 187:     sendLCD(0x80, 0);
  1022     0117  01F4               	clrf	sendLCD@rs
  1023     0118  3080               	movlw	128
  1024     0119  120A  118A  21DC  120A  118A  	fcall	_sendLCD
  1025     011E                     l90:
  1026     011E  0008               	return
  1027     011F                     __end_of_initLCD:
  1028                           
  1029                           	psect	text5
  1030     01DC                     __ptext5:	
  1031 ;; *************** function _sendLCD *****************
  1032 ;; Defined at:
  1033 ;;		line 150 in file "newmain.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  dato            1    wreg     unsigned char 
  1036 ;;  rs              1    4[COMMON] unsigned char 
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  dato            1    7[COMMON] unsigned char 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, status,0
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1048 ;;      Params:         1       0       0       0       0
  1049 ;;      Locals:         1       0       0       0       0
  1050 ;;      Temps:          2       0       0       0       0
  1051 ;;      Totals:         4       0       0       0       0
  1052 ;;Total ram usage:        4 bytes
  1053 ;; Hardware stack levels used: 1
  1054 ;; Hardware stack levels required when called: 1
  1055 ;; This function calls:
  1056 ;;		Nothing
  1057 ;; This function is called by:
  1058 ;;		_main
  1059 ;;		_sendLCDString
  1060 ;;		_initLCD
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064     01DC                     _sendLCD:	
  1065                           ;psect for function _sendLCD
  1066                           
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _sendLCD: [wreg+status,0]
  1070                           ;sendLCD@dato stored from wreg
  1071     01DC  00F7               	movwf	sendLCD@dato
  1072     01DD                     l815:
  1073                           
  1074                           ;newmain.c: 150: void sendLCD(char dato, char rs);newmain.c: 151: {;newmain.c: 152:     
      +                          PORTEbits.RE1 = 1;
  1075     01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1076     01DE  1303               	bcf	3,6	;RP1=0, select bank0
  1077     01DF  1489               	bsf	9,1	;volatile
  1078     01E0                     l817:
  1079                           
  1080                           ;newmain.c: 153:     PORTD = dato;
  1081     01E0  0877               	movf	sendLCD@dato,w
  1082     01E1  0088               	movwf	8	;volatile
  1083     01E2                     l819:
  1084                           
  1085                           ;newmain.c: 154:     PORTEbits.RE2 = rs;
  1086     01E2  0C74               	rrf	sendLCD@rs,w
  1087     01E3  1C03               	skipc
  1088     01E4  1109               	bcf	9,2	;volatile
  1089     01E5  1803               	skipnc
  1090     01E6  1509               	bsf	9,2	;volatile
  1091     01E7                     l821:
  1092                           
  1093                           ;newmain.c: 155:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1094     01E7  3008               	movlw	8
  1095     01E8  00F6               	movwf	??_sendLCD+1
  1096     01E9  30C9               	movlw	201
  1097     01EA  00F5               	movwf	??_sendLCD
  1098     01EB                     u427:
  1099     01EB  0BF5               	decfsz	??_sendLCD,f
  1100     01EC  29EB               	goto	u427
  1101     01ED  0BF6               	decfsz	??_sendLCD+1,f
  1102     01EE  29EB               	goto	u427
  1103     01EF  29F0               	nop2
  1104     01F0                     l823:
  1105                           
  1106                           ;newmain.c: 157:     PORTEbits.RE1 = 0;
  1107     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1108     01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1109     01F2  1089               	bcf	9,1	;volatile
  1110     01F3                     l825:
  1111                           
  1112                           ;newmain.c: 158:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1113     01F3  3008               	movlw	8
  1114     01F4  00F6               	movwf	??_sendLCD+1
  1115     01F5  30C9               	movlw	201
  1116     01F6  00F5               	movwf	??_sendLCD
  1117     01F7                     u437:
  1118     01F7  0BF5               	decfsz	??_sendLCD,f
  1119     01F8  29F7               	goto	u437
  1120     01F9  0BF6               	decfsz	??_sendLCD+1,f
  1121     01FA  29F7               	goto	u437
  1122     01FB  29FC               	nop2
  1123     01FC                     l827:
  1124                           
  1125                           ;newmain.c: 160:     PORTEbits.RE1 = 1;
  1126     01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1127     01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1128     01FE  1489               	bsf	9,1	;volatile
  1129     01FF                     l87:
  1130     01FF  0008               	return
  1131     0200                     __end_of_sendLCD:
  1132                           
  1133                           	psect	text6
  1134     0164                     __ptext6:	
  1135 ;; *************** function _ISR *****************
  1136 ;; Defined at:
  1137 ;;		line 190 in file "newmain.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         0       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0
  1153 ;;      Temps:          4       0       0       0       0
  1154 ;;      Totals:         4       0       0       0       0
  1155 ;;Total ram usage:        4 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; This function calls:
  1158 ;;		Nothing
  1159 ;; This function is called by:
  1160 ;;		Interrupt level 1
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164     0164                     _ISR:	
  1165                           ;psect for function _ISR
  1166                           
  1167     0164                     i1l969:
  1168                           
  1169                           ;newmain.c: 192:     if(RCIF){
  1170     0164  1283               	bcf	3,5	;RP0=0, select bank0
  1171     0165  1303               	bcf	3,6	;RP1=0, select bank0
  1172     0166  1E8C               	btfss	12,5	;volatile
  1173     0167  2969               	goto	u37_21
  1174     0168  296A               	goto	u37_20
  1175     0169                     u37_21:
  1176     0169  2984               	goto	i1l97
  1177     016A                     u37_20:
  1178     016A                     i1l971:
  1179                           
  1180                           ;newmain.c: 193:         RCIF = 0;
  1181     016A  128C               	bcf	12,5	;volatile
  1182     016B                     i1l973:
  1183                           
  1184                           ;newmain.c: 195:         receivedString[indexString] = RCREG;
  1185     016B  082A               	movf	_indexString,w
  1186     016C  3E2C               	addlw	(low (_receivedString| 0))& (0+255)
  1187     016D  0084               	movwf	4
  1188     016E  081A               	movf	26,w	;volatile
  1189     016F  1383               	bcf	3,7	;select IRP bank0
  1190     0170  0080               	movwf	0
  1191                           
  1192                           ;newmain.c: 197:         if(receivedString[indexString] == 13) {
  1193     0171  082A               	movf	_indexString,w
  1194     0172  3E2C               	addlw	(low (_receivedString| 0))& (0+255)
  1195     0173  0084               	movwf	4
  1196     0174  300D               	movlw	13
  1197     0175  0600               	xorwf	0,w
  1198     0176  1D03               	btfss	3,2
  1199     0177  2979               	goto	u38_21
  1200     0178  297A               	goto	u38_20
  1201     0179                     u38_21:
  1202     0179  2980               	goto	i1l979
  1203     017A                     u38_20:
  1204     017A                     i1l975:
  1205                           
  1206                           ;newmain.c: 198:             receivedString[indexString] = '\0';
  1207     017A  082A               	movf	_indexString,w
  1208     017B  3E2C               	addlw	(low (_receivedString| 0))& (0+255)
  1209     017C  0084               	movwf	4
  1210     017D  0180               	clrf	0
  1211     017E                     i1l977:
  1212                           
  1213                           ;newmain.c: 199:             endReceive = 1;
  1214     017E  01AB               	clrf	_endReceive
  1215     017F  0AAB               	incf	_endReceive,f
  1216     0180                     i1l979:
  1217                           
  1218                           ;newmain.c: 202:         indexString++;
  1219     0180  3001               	movlw	1
  1220     0181  00FF               	movwf	btemp+1
  1221     0182  087F               	movf	btemp+1,w
  1222     0183  07AA               	addwf	_indexString,f
  1223     0184                     i1l97:
  1224     0184  0873               	movf	??_ISR+3,w
  1225     0185  00FF               	movwf	btemp+1
  1226     0186  0872               	movf	??_ISR+2,w
  1227     0187  008A               	movwf	10
  1228     0188  0871               	movf	??_ISR+1,w
  1229     0189  0084               	movwf	4
  1230     018A  0E70               	swapf	??_ISR,w
  1231     018B  0083               	movwf	3
  1232     018C  0EFE               	swapf	btemp,f
  1233     018D  0E7E               	swapf	btemp,w
  1234     018E  0009               	retfie
  1235     018F                     __end_of_ISR:
  1236     007E                     btemp	set	126	;btemp
  1237     007E                     wtemp0	set	126
  1238                           
  1239                           	psect	intentry
  1240     0004                     __pintentry:	
  1241                           ;incstack = 0
  1242                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1243                           
  1244     0004                     interrupt_function:
  1245     007E                     saved_w	set	btemp
  1246     0004  00FE               	movwf	btemp
  1247     0005  0E03               	swapf	3,w
  1248     0006  00F0               	movwf	??_ISR
  1249     0007  0804               	movf	4,w
  1250     0008  00F1               	movwf	??_ISR+1
  1251     0009  080A               	movf	10,w
  1252     000A  00F2               	movwf	??_ISR+2
  1253     000B  087F               	movf	btemp+1,w
  1254     000C  00F3               	movwf	??_ISR+3
  1255     000D  120A  118A  2964   	ljmp	_ISR
  1256                           
  1257                           	psect	config
  1258                           
  1259                           ;Config register CONFIG @ 0x2007
  1260                           ;	Oscillator Selection bits
  1261                           ;	FOSC = HS, HS oscillator
  1262                           ;	Watchdog Timer Enable bit
  1263                           ;	WDTE = OFF, WDT disabled
  1264                           ;	Power-up Timer Enable bit
  1265                           ;	PWRTE = ON, PWRT enabled
  1266                           ;	Brown-out Reset Enable bit
  1267                           ;	BOREN = ON, BOR enabled
  1268                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1269                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1270                           ;	Data EEPROM Memory Code Protection bit
  1271                           ;	CPD = OFF, Data EEPROM code protection off
  1272                           ;	Flash Program Memory Write Enable bits
  1273                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1274                           ;	In-Circuit Debugger Mode bit
  1275                           ;	DEBUG = 0x1, unprogrammed default
  1276                           ;	Flash Program Memory Code Protection bit
  1277                           ;	CP = OFF, Code protection off
  1278     2007                     	org	8199
  1279     2007  3FF2               	dw	16370

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     18      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sendLCDString@s	PTR unsigned char  size(1) Largest target is 10
		 -> receivedString(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_initLCD
    _sendLCDString->_sendLCD
    _initUART->___aldiv
    _initLCD->_sendLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUART
    _initUART->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3085
                            _initLCD
                           _initUART
                            _sendLCD
                      _sendLCDString
 ---------------------------------------------------------------------------------
 (1) _sendLCDString                                        3     3      0     927
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUART                                             8     4      4     550
                                              5 COMMON     4     4      0
                                             14 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     804
                                              8 COMMON     2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (2) _sendLCD                                              4     3      1     804
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _sendLCD
   _initUART
     ___aldiv
   _sendLCD
   _sendLCDString
     _sendLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      32       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     12      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      32      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Dec 21 14:57:04 2023

                     l61 0163                       l90 011E                       l84 01DB  
                     l87 01FF                       fsr 0004                      l248 0034  
                    l258 00BC                      l821 01E7                      l901 00F4  
                    l823 01F0                      l815 01DD                      l911 0117  
                    l903 00FB                      l831 0023                      l825 01F3  
                    l817 01E0                      l905 0102                      l841 004F  
                    l833 0027                      l913 01BB                      l921 018F  
                    l827 01FC                      l819 01E2                      l907 0109  
                    l851 006B                      l843 0057                      l835 0038  
                    l915 01BD                      l923 01A3                      l909 0110  
                    l861 009E                      l853 0074                      l845 005A  
                    l837 0043                      l829 0020                      l917 01CA  
                    l925 01AA                      l855 0086                      l847 0063  
                    l863 00A4                      l839 0047                      l871 011F  
                    l919 01D0                      l927 01B0                      l881 00BD  
                    l865 00A9                      l857 0094                      l849 0067  
                    l873 0122                      l929 01B3                      l891 00D1  
                    l883 00C0                      l867 00B4                      l859 0095  
                    l875 0126                      l893 00D4                      l885 00C4  
                    l877 0131                      l895 00DB                      l887 00C7  
                    l879 0134                      l897 00E4                      l889 00C8  
                    l899 00EB                      u210 0027                      u211 0026  
                    u300 00A9                      u220 0038                      u301 00A8  
                    u221 0037                      u230 0057                      u310 0144  
                    u231 0056                      u320 01DB                      u321 01DA  
                    u250 006B                      u251 006A                      u315 013F  
                    u245 005C                      u270 0086                      u407 00DF  
                    u271 0085                      u417 00EF                      u265 006D  
                    u290 00A4                      u427 01EB                      u291 00A3  
                    u275 0082                      _ISR 0164                      u437 01F7  
                    u285 0096                      u397 00CC                      fsr0 0004  
                    indf 0000                     ?_ISR 0070                     _PIE1 008C  
                   _RCIF 0065                     i1l97 0184                     _main 018F  
                   btemp 007E                     start 0010                    ??_ISR 0070  
        __end_of___aldiv 00BD                    ?_main 0070                    i1l971 016A  
                  i1l973 016B                    i1l975 017A                    i1l977 017E  
                  i1l969 0164                    i1l979 0180                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTB 0006  
                  _PORTD 0008                    u37_20 016A                    u37_21 0169  
                  u38_20 017A                    u38_21 0179                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019                    _TXSTA 0098          __end_of_initLCD 011F  
        __end_of_sendLCD 0200                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0013             __end_of_main 01B8  
                 ??_main 007A                   _INTCON 000B                ??___aldiv 0074  
       __end_of_initUART 0164           sendLCDString@i 0037           sendLCDString@s 0036  
              ??_initLCD 0078                ??_sendLCD 0075                   saved_w 007E  
       initUART@baudRate 0044  __end_of__initialization 001C              sendLCD@dato 0077  
         __pcstackCOMMON 0070               __pbssBANK0 0020               __pmaintext 018F  
             _endReceive 002B               __pintentry 0004                ?_initUART 0044  
                ___aldiv 0020            _sendLCDString 01B8                  __ptext1 01B8  
                __ptext2 011F                  __ptext3 0020                  __ptext4 00BD  
                __ptext5 01DC                  __ptext6 0164                  _initLCD 00BD  
                _sendLCD 01DC         ___aldiv@dividend 003A                  clrloop0 0201  
   end_of_initialization 001C               ??_initUART 0075         ___aldiv@quotient 0040  
         ?_sendLCDString 0070                _PORTEbits 0009             _columnConfig 0020  
    start_initialization 0013              __end_of_ISR 018F          ??_sendLCDString 0078  
              ___latbits 0002            __pcstackBANK0 0036                 ?___aldiv 0036  
               ?_initLCD 0070                 ?_sendLCD 0074          ___aldiv@divisor 0036  
      interrupt_function 0004          ___aldiv@counter 003E                clear_ram0 0200  
               _PIR1bits 000C              _indexString 002A                sendLCD@rs 0074  
               _initUART 011F           _receivedString 002C                 intlevel1 0000  
  __end_of_sendLCDString 01DC             ___aldiv@sign 003F  
