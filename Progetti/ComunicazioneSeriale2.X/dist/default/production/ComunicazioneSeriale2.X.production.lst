

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Dec 15 10:48:30 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 22/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16LF877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     001A                     _RCREG	set	26
   174     0008                     _PORTD	set	8
   175     0019                     _TXREG	set	25
   176     000C                     _PIR1bits	set	12
   177     0009                     _PORTEbits	set	9
   178     000B                     _INTCON	set	11
   179     0018                     _RCSTA	set	24
   180     0065                     _RCIF	set	101
   181     0089                     _TRISE	set	137
   182     0088                     _TRISD	set	136
   183     0099                     _SPBRG	set	153
   184     008C                     _PIE1	set	140
   185     0098                     _TXSTAbits	set	152
   186     0087                     _TRISCbits	set	135
   187                           
   188                           	psect	strings
   189     0174                     __pstrings:
   190     0174                     stringtab:
   191     0174                     __stringtab:
   192     0174                     stringcode:	
   193                           ;	String table - string pointers are 1 byte each
   194                           
   195     0174                     stringdir:
   196     0174  3001               	movlw	high stringdir
   197     0175  008A               	movwf	10
   198     0176  0804               	movf	4,w
   199     0177  0A84               	incf	4,f
   200     0178  0782               	addwf	2,f
   201     0179                     __stringbase:
   202     0179  3400               	retlw	0
   203     017A                     __end_of__stringtab:
   204     017A                     STR_1:
   205     017A  3463               	retlw	99	;'c'
   206     017B  3469               	retlw	105	;'i'
   207     017C  3461               	retlw	97	;'a'
   208     017D  346F               	retlw	111	;'o'
   209     017E  3400               	retlw	0
   210                           
   211                           	psect	cinit
   212     0013                     start_initialization:	
   213                           ; #config settings
   214                           
   215     0013                     __initialization:
   216                           
   217                           ; Clear objects allocated to COMMON
   218     0013  01F9               	clrf	__pbssCOMMON& (0+127)
   219                           
   220                           ; Clear objects allocated to BANK0
   221     0014  1283               	bcf	3,5	;RP0=0, select bank0
   222     0015  1303               	bcf	3,6	;RP1=0, select bank0
   223     0016  01B3               	clrf	__pbssBANK0& (0+127)
   224     0017  01B4               	clrf	(__pbssBANK0+1)& (0+127)
   225     0018  01B5               	clrf	(__pbssBANK0+2)& (0+127)
   226     0019  01B6               	clrf	(__pbssBANK0+3)& (0+127)
   227     001A  01B7               	clrf	(__pbssBANK0+4)& (0+127)
   228     001B  01B8               	clrf	(__pbssBANK0+5)& (0+127)
   229     001C  01B9               	clrf	(__pbssBANK0+6)& (0+127)
   230     001D  01BA               	clrf	(__pbssBANK0+7)& (0+127)
   231     001E  01BB               	clrf	(__pbssBANK0+8)& (0+127)
   232     001F  01BC               	clrf	(__pbssBANK0+9)& (0+127)
   233     0020                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     0020                     __end_of__initialization:
   237     0020  0183               	clrf	3
   238     0021  120A  118A  2951   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241     0079                     __pbssCOMMON:
   242     0079                     _indexString:
   243     0079                     	ds	1
   244                           
   245                           	psect	bssBANK0
   246     0033                     __pbssBANK0:
   247     0033                     _receivedString:
   248     0033                     	ds	10
   249                           
   250                           	psect	cstackCOMMON
   251     0070                     __pcstackCOMMON:
   252     0070                     ?_SENDUARTSTRING:
   253     0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0070                     ?_ISR:	
   257                           ; 1 bytes @ 0x0
   258                           
   259     0070                     ??_ISR:	
   260                           ; 1 bytes @ 0x0
   261                           
   262                           
   263                           ; 1 bytes @ 0x0
   264     0070                     	ds	4
   265     0074                     ??_SENDUARTSTRING:
   266     0074                     ??___aldiv:	
   267                           ; 1 bytes @ 0x4
   268                           
   269     0074                     SENDUARTSTRING@string:	
   270                           ; 1 bytes @ 0x4
   271                           
   272                           
   273                           ; 1 bytes @ 0x4
   274     0074                     	ds	1
   275     0075                     ??_INITUART:
   276     0075                     SENDUARTSTRING@i:	
   277                           ; 1 bytes @ 0x5
   278                           
   279                           
   280                           ; 1 bytes @ 0x5
   281     0075                     	ds	4
   282                           
   283                           	psect	cstackBANK0
   284     0020                     __pcstackBANK0:
   285     0020                     ?___aldiv:
   286     0020                     ___aldiv@divisor:	
   287                           ; 4 bytes @ 0x0
   288                           
   289                           
   290                           ; 4 bytes @ 0x0
   291     0020                     	ds	4
   292     0024                     ___aldiv@dividend:
   293                           
   294                           ; 4 bytes @ 0x4
   295     0024                     	ds	4
   296     0028                     ___aldiv@counter:
   297                           
   298                           ; 1 bytes @ 0x8
   299     0028                     	ds	1
   300     0029                     ___aldiv@sign:
   301                           
   302                           ; 1 bytes @ 0x9
   303     0029                     	ds	1
   304     002A                     ___aldiv@quotient:
   305                           
   306                           ; 4 bytes @ 0xA
   307     002A                     	ds	4
   308     002E                     ?_INITUART:
   309     002E                     INITUART@baudRate:	
   310                           ; 1 bytes @ 0xE
   311                           
   312                           
   313                           ; 2 bytes @ 0xE
   314     002E                     	ds	2
   315     0030                     ??_main:
   316                           
   317                           ; 1 bytes @ 0x10
   318     0030                     	ds	3
   319                           
   320                           	psect	maintext
   321     0151                     __pmaintext:	
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 39 in file "newmain.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;		None
   332 ;; Return value:  Size  Location     Type
   333 ;;                  1    wreg      void 
   334 ;; Registers used:
   335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : B00/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   341 ;;      Params:         0       0       0       0       0
   342 ;;      Locals:         0       0       0       0       0
   343 ;;      Temps:          0       3       0       0       0
   344 ;;      Totals:         0       3       0       0       0
   345 ;;Total ram usage:        3 bytes
   346 ;; Hardware stack levels required when called: 3
   347 ;; This function calls:
   348 ;;		_INITUART
   349 ;;		_SENDUARTSTRING
   350 ;; This function is called by:
   351 ;;		Startup code after reset
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355     0151                     _main:	
   356                           ;psect for function _main
   357                           
   358     0151                     l795:	
   359                           ;incstack = 0
   360                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   361                           
   362                           
   363                           ;newmain.c: 41:     INITUART(9600);
   364     0151  3080               	movlw	128
   365     0152  1283               	bcf	3,5	;RP0=0, select bank0
   366     0153  1303               	bcf	3,6	;RP1=0, select bank0
   367     0154  00AE               	movwf	INITUART@baudRate
   368     0155  3025               	movlw	37
   369     0156  00AF               	movwf	INITUART@baudRate+1
   370     0157  120A  118A  20C1  120A  118A  	fcall	_INITUART
   371     015C                     l797:
   372                           
   373                           ;newmain.c: 44:         SENDUARTSTRING("ciao");
   374     015C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   375     015D  120A  118A  212D  120A  118A  	fcall	_SENDUARTSTRING
   376     0162                     l799:
   377                           
   378                           ;newmain.c: 45:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   379     0162  300B               	movlw	11
   380     0163  1283               	bcf	3,5	;RP0=0, select bank0
   381     0164  1303               	bcf	3,6	;RP1=0, select bank0
   382     0165  00B2               	movwf	??_main+2
   383     0166  3026               	movlw	38
   384     0167  00B1               	movwf	??_main+1
   385     0168  305D               	movlw	93
   386     0169  00B0               	movwf	??_main
   387     016A                     u317:
   388     016A  0BB0               	decfsz	??_main,f
   389     016B  296A               	goto	u317
   390     016C  0BB1               	decfsz	??_main+1,f
   391     016D  296A               	goto	u317
   392     016E  0BB2               	decfsz	??_main+2,f
   393     016F  296A               	goto	u317
   394     0170  295C               	goto	l797
   395     0171  120A  118A  2810   	ljmp	start
   396     0174                     __end_of_main:
   397                           
   398                           	psect	text1
   399     012D                     __ptext1:	
   400 ;; *************** function _SENDUARTSTRING *****************
   401 ;; Defined at:
   402 ;;		line 97 in file "newmain.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;  string          1    wreg     PTR unsigned char 
   405 ;;		 -> STR_1(5), 
   406 ;; Auto vars:     Size  Location     Type
   407 ;;  string          1    4[COMMON] PTR unsigned char 
   408 ;;		 -> STR_1(5), 
   409 ;;  i               1    5[COMMON] unsigned char 
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   419 ;;      Params:         0       0       0       0       0
   420 ;;      Locals:         2       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0
   422 ;;      Totals:         2       0       0       0       0
   423 ;;Total ram usage:        2 bytes
   424 ;; Hardware stack levels used: 2
   425 ;; Hardware stack levels required when called: 1
   426 ;; This function calls:
   427 ;;		Nothing
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433     012D                     _SENDUARTSTRING:	
   434                           ;psect for function _SENDUARTSTRING
   435                           
   436                           
   437                           ;incstack = 0
   438                           ; Regs used in _SENDUARTSTRING: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   439                           ;SENDUARTSTRING@string stored from wreg
   440     012D  00F4               	movwf	SENDUARTSTRING@string
   441     012E                     l787:
   442                           
   443                           ;newmain.c: 99:     char i = 0;
   444     012E  01F5               	clrf	SENDUARTSTRING@i
   445                           
   446                           ;newmain.c: 101:     while (string[i] != '\0') {
   447     012F  2943               	goto	l793
   448     0130                     l59:
   449     0130  1283               	bcf	3,5	;RP0=0, select bank0
   450     0131  1303               	bcf	3,6	;RP1=0, select bank0
   451     0132  1E0C               	btfss	12,4	;volatile
   452     0133  2935               	goto	u271
   453     0134  2936               	goto	u270
   454     0135                     u271:
   455     0135  2930               	goto	l59
   456     0136                     u270:
   457     0136                     l789:
   458                           
   459                           ;newmain.c: 104:         TXREG = string[i++];
   460     0136  0875               	movf	SENDUARTSTRING@i,w
   461     0137  0774               	addwf	SENDUARTSTRING@string,w
   462     0138  0084               	movwf	4
   463     0139  120A  118A  2174  120A  118A  	fcall	stringdir
   464     013E  0099               	movwf	25	;volatile
   465     013F                     l791:
   466     013F  3001               	movlw	1
   467     0140  00FF               	movwf	btemp+1
   468     0141  087F               	movf	btemp+1,w
   469     0142  07F5               	addwf	SENDUARTSTRING@i,f
   470     0143                     l793:
   471                           
   472                           ;newmain.c: 101:     while (string[i] != '\0') {
   473     0143  0875               	movf	SENDUARTSTRING@i,w
   474     0144  0774               	addwf	SENDUARTSTRING@string,w
   475     0145  0084               	movwf	4
   476     0146  120A  118A  2174  120A  118A  	fcall	stringdir
   477     014B  3A00               	xorlw	0
   478     014C  1D03               	skipz
   479     014D  294F               	goto	u281
   480     014E  2950               	goto	u280
   481     014F                     u281:
   482     014F  2930               	goto	l59
   483     0150                     u280:
   484     0150                     l63:
   485     0150  0008               	return
   486     0151                     __end_of_SENDUARTSTRING:
   487                           
   488                           	psect	text2
   489     00C1                     __ptext2:	
   490 ;; *************** function _INITUART *****************
   491 ;; Defined at:
   492 ;;		line 49 in file "newmain.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;  baudRate        2   14[BANK0 ] int 
   495 ;; Auto vars:     Size  Location     Type
   496 ;;		None
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      void 
   499 ;; Registers used:
   500 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   506 ;;      Params:         0       2       0       0       0
   507 ;;      Locals:         0       0       0       0       0
   508 ;;      Temps:          4       0       0       0       0
   509 ;;      Totals:         4       2       0       0       0
   510 ;;Total ram usage:        6 bytes
   511 ;; Hardware stack levels used: 1
   512 ;; Hardware stack levels required when called: 2
   513 ;; This function calls:
   514 ;;		___aldiv
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520     00C1                     _INITUART:	
   521                           ;psect for function _INITUART
   522                           
   523     00C1                     l779:	
   524                           ;incstack = 0
   525                           ; Regs used in _INITUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   526                           
   527                           
   528                           ;newmain.c: 49: void INITUART(int baudRate);newmain.c: 50: {;newmain.c: 51:     TRISCbit
      +                          s.TRISC7 = 1;
   529     00C1  1683               	bsf	3,5	;RP0=1, select bank1
   530     00C2  1303               	bcf	3,6	;RP1=0, select bank1
   531     00C3  1787               	bsf	7,7	;volatile
   532                           
   533                           ;newmain.c: 52:     TRISCbits.TRISC6 = 0;
   534     00C4  1307               	bcf	7,6	;volatile
   535                           
   536                           ;newmain.c: 58:     TXSTAbits.TXEN = 1;
   537     00C5  1698               	bsf	24,5	;volatile
   538     00C6                     l781:
   539                           
   540                           ;newmain.c: 64:     RCSTA |= 0x90;
   541     00C6  3090               	movlw	144
   542     00C7  00FF               	movwf	btemp+1
   543     00C8  087F               	movf	btemp+1,w
   544     00C9  1283               	bcf	3,5	;RP0=0, select bank0
   545     00CA  1303               	bcf	3,6	;RP1=0, select bank0
   546     00CB  0498               	iorwf	24,f	;volatile
   547                           
   548                           ;newmain.c: 66:     INTCON |= 0xC0;
   549     00CC  30C0               	movlw	192
   550     00CD  00FF               	movwf	btemp+1
   551     00CE  087F               	movf	btemp+1,w
   552     00CF  048B               	iorwf	11,f	;volatile
   553     00D0                     l783:
   554                           
   555                           ;newmain.c: 67:     PIE1 |= 0x20;
   556     00D0  1683               	bsf	3,5	;RP0=1, select bank1
   557     00D1  1303               	bcf	3,6	;RP1=0, select bank1
   558     00D2  168C               	bsf	12,5	;volatile
   559     00D3                     l785:
   560                           
   561                           ;newmain.c: 69:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   562     00D3  1283               	bcf	3,5	;RP0=0, select bank0
   563     00D4  1303               	bcf	3,6	;RP1=0, select bank0
   564     00D5  082E               	movf	INITUART@baudRate,w
   565     00D6  00F5               	movwf	??_INITUART
   566     00D7  082F               	movf	INITUART@baudRate+1,w
   567     00D8  00F6               	movwf	??_INITUART+1
   568     00D9  3000               	movlw	0
   569     00DA  1BF6               	btfsc	??_INITUART+1,7
   570     00DB  30FF               	movlw	255
   571     00DC  00F7               	movwf	??_INITUART+2
   572     00DD  00F8               	movwf	??_INITUART+3
   573     00DE  3006               	movlw	6
   574     00DF                     u265:
   575     00DF  1003               	clrc
   576     00E0  0DF5               	rlf	??_INITUART,f
   577     00E1  0DF6               	rlf	??_INITUART+1,f
   578     00E2  0DF7               	rlf	??_INITUART+2,f
   579     00E3  0DF8               	rlf	??_INITUART+3,f
   580     00E4                     u260:
   581     00E4  3EFF               	addlw	-1
   582     00E5  1D03               	skipz
   583     00E6  28DF               	goto	u265
   584     00E7  0878               	movf	??_INITUART+3,w
   585     00E8  00A3               	movwf	___aldiv@divisor+3
   586     00E9  0877               	movf	??_INITUART+2,w
   587     00EA  00A2               	movwf	___aldiv@divisor+2
   588     00EB  0876               	movf	??_INITUART+1,w
   589     00EC  00A1               	movwf	___aldiv@divisor+1
   590     00ED  0875               	movf	??_INITUART,w
   591     00EE  00A0               	movwf	___aldiv@divisor
   592     00EF  3000               	movlw	0
   593     00F0  00A7               	movwf	___aldiv@dividend+3
   594     00F1  307A               	movlw	122
   595     00F2  00A6               	movwf	___aldiv@dividend+2
   596     00F3  3012               	movlw	18
   597     00F4  00A5               	movwf	___aldiv@dividend+1
   598     00F5  3000               	movlw	0
   599     00F6  00A4               	movwf	___aldiv@dividend
   600     00F7  120A  118A  2024  120A  118A  	fcall	___aldiv
   601     00FC  1283               	bcf	3,5	;RP0=0, select bank0
   602     00FD  1303               	bcf	3,6	;RP1=0, select bank0
   603     00FE  0820               	movf	?___aldiv,w
   604     00FF  3EFF               	addlw	255
   605     0100  1683               	bsf	3,5	;RP0=1, select bank1
   606     0101  1303               	bcf	3,6	;RP1=0, select bank1
   607     0102  0099               	movwf	25	;volatile
   608     0103                     l51:
   609     0103  0008               	return
   610     0104                     __end_of_INITUART:
   611                           
   612                           	psect	text3
   613     0024                     __ptext3:	
   614 ;; *************** function ___aldiv *****************
   615 ;; Defined at:
   616 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  divisor         4    0[BANK0 ] long 
   619 ;;  dividend        4    4[BANK0 ] long 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  quotient        4   10[BANK0 ] long 
   622 ;;  sign            1    9[BANK0 ] unsigned char 
   623 ;;  counter         1    8[BANK0 ] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  4    0[BANK0 ] long 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0, btemp+1
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   633 ;;      Params:         0       8       0       0       0
   634 ;;      Locals:         0       6       0       0       0
   635 ;;      Temps:          1       0       0       0       0
   636 ;;      Totals:         1      14       0       0       0
   637 ;;Total ram usage:       15 bytes
   638 ;; Hardware stack levels used: 1
   639 ;; Hardware stack levels required when called: 1
   640 ;; This function calls:
   641 ;;		Nothing
   642 ;; This function is called by:
   643 ;;		_INITUART
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647     0024                     ___aldiv:	
   648                           ;psect for function ___aldiv
   649                           
   650     0024                     l737:	
   651                           ;incstack = 0
   652                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   653                           
   654     0024  1283               	bcf	3,5	;RP0=0, select bank0
   655     0025  1303               	bcf	3,6	;RP1=0, select bank0
   656     0026  01A9               	clrf	___aldiv@sign
   657     0027                     l739:
   658     0027  1FA3               	btfss	___aldiv@divisor+3,7
   659     0028  282A               	goto	u161
   660     0029  282B               	goto	u160
   661     002A                     u161:
   662     002A  2838               	goto	l224
   663     002B                     u160:
   664     002B                     l741:
   665     002B  09A0               	comf	___aldiv@divisor,f
   666     002C  09A1               	comf	___aldiv@divisor+1,f
   667     002D  09A2               	comf	___aldiv@divisor+2,f
   668     002E  09A3               	comf	___aldiv@divisor+3,f
   669     002F  0AA0               	incf	___aldiv@divisor,f
   670     0030  1903               	skipnz
   671     0031  0AA1               	incf	___aldiv@divisor+1,f
   672     0032  1903               	skipnz
   673     0033  0AA2               	incf	___aldiv@divisor+2,f
   674     0034  1903               	skipnz
   675     0035  0AA3               	incf	___aldiv@divisor+3,f
   676     0036  01A9               	clrf	___aldiv@sign
   677     0037  0AA9               	incf	___aldiv@sign,f
   678     0038                     l224:
   679     0038  1FA7               	btfss	___aldiv@dividend+3,7
   680     0039  283B               	goto	u171
   681     003A  283C               	goto	u170
   682     003B                     u171:
   683     003B  284B               	goto	l747
   684     003C                     u170:
   685     003C                     l743:
   686     003C  09A4               	comf	___aldiv@dividend,f
   687     003D  09A5               	comf	___aldiv@dividend+1,f
   688     003E  09A6               	comf	___aldiv@dividend+2,f
   689     003F  09A7               	comf	___aldiv@dividend+3,f
   690     0040  0AA4               	incf	___aldiv@dividend,f
   691     0041  1903               	skipnz
   692     0042  0AA5               	incf	___aldiv@dividend+1,f
   693     0043  1903               	skipnz
   694     0044  0AA6               	incf	___aldiv@dividend+2,f
   695     0045  1903               	skipnz
   696     0046  0AA7               	incf	___aldiv@dividend+3,f
   697     0047                     l745:
   698     0047  3001               	movlw	1
   699     0048  00FF               	movwf	btemp+1
   700     0049  087F               	movf	btemp+1,w
   701     004A  06A9               	xorwf	___aldiv@sign,f
   702     004B                     l747:
   703     004B  3000               	movlw	0
   704     004C  00AD               	movwf	___aldiv@quotient+3
   705     004D  3000               	movlw	0
   706     004E  00AC               	movwf	___aldiv@quotient+2
   707     004F  3000               	movlw	0
   708     0050  00AB               	movwf	___aldiv@quotient+1
   709     0051  3000               	movlw	0
   710     0052  00AA               	movwf	___aldiv@quotient
   711     0053                     l749:
   712     0053  0823               	movf	___aldiv@divisor+3,w
   713     0054  0422               	iorwf	___aldiv@divisor+2,w
   714     0055  0421               	iorwf	___aldiv@divisor+1,w
   715     0056  0420               	iorwf	___aldiv@divisor,w
   716     0057  1903               	skipnz
   717     0058  285A               	goto	u181
   718     0059  285B               	goto	u180
   719     005A                     u181:
   720     005A  28A8               	goto	l771
   721     005B                     u180:
   722     005B                     l751:
   723     005B  01A8               	clrf	___aldiv@counter
   724     005C  0AA8               	incf	___aldiv@counter,f
   725     005D  286B               	goto	l757
   726     005E                     l753:
   727     005E  3001               	movlw	1
   728     005F  00F4               	movwf	??___aldiv
   729     0060                     u195:
   730     0060  1003               	clrc
   731     0061  0DA0               	rlf	___aldiv@divisor,f
   732     0062  0DA1               	rlf	___aldiv@divisor+1,f
   733     0063  0DA2               	rlf	___aldiv@divisor+2,f
   734     0064  0DA3               	rlf	___aldiv@divisor+3,f
   735     0065  0BF4               	decfsz	??___aldiv,f
   736     0066  2860               	goto	u195
   737     0067                     l755:
   738     0067  3001               	movlw	1
   739     0068  00FF               	movwf	btemp+1
   740     0069  087F               	movf	btemp+1,w
   741     006A  07A8               	addwf	___aldiv@counter,f
   742     006B                     l757:
   743     006B  1FA3               	btfss	___aldiv@divisor+3,7
   744     006C  286E               	goto	u201
   745     006D  286F               	goto	u200
   746     006E                     u201:
   747     006E  285E               	goto	l753
   748     006F                     u200:
   749     006F                     l759:
   750     006F  3001               	movlw	1
   751     0070  00F4               	movwf	??___aldiv
   752     0071                     u215:
   753     0071  1003               	clrc
   754     0072  0DAA               	rlf	___aldiv@quotient,f
   755     0073  0DAB               	rlf	___aldiv@quotient+1,f
   756     0074  0DAC               	rlf	___aldiv@quotient+2,f
   757     0075  0DAD               	rlf	___aldiv@quotient+3,f
   758     0076  0BF4               	decfsz	??___aldiv,f
   759     0077  2871               	goto	u215
   760     0078                     l761:
   761     0078  0823               	movf	___aldiv@divisor+3,w
   762     0079  0227               	subwf	___aldiv@dividend+3,w
   763     007A  1D03               	skipz
   764     007B  2886               	goto	u225
   765     007C  0822               	movf	___aldiv@divisor+2,w
   766     007D  0226               	subwf	___aldiv@dividend+2,w
   767     007E  1D03               	skipz
   768     007F  2886               	goto	u225
   769     0080  0821               	movf	___aldiv@divisor+1,w
   770     0081  0225               	subwf	___aldiv@dividend+1,w
   771     0082  1D03               	skipz
   772     0083  2886               	goto	u225
   773     0084  0820               	movf	___aldiv@divisor,w
   774     0085  0224               	subwf	___aldiv@dividend,w
   775     0086                     u225:
   776     0086  1C03               	skipc
   777     0087  2889               	goto	u221
   778     0088  288A               	goto	u220
   779     0089                     u221:
   780     0089  2899               	goto	l767
   781     008A                     u220:
   782     008A                     l763:
   783     008A  0820               	movf	___aldiv@divisor,w
   784     008B  02A4               	subwf	___aldiv@dividend,f
   785     008C  0821               	movf	___aldiv@divisor+1,w
   786     008D  1C03               	skipc
   787     008E  0F21               	incfsz	___aldiv@divisor+1,w
   788     008F  02A5               	subwf	___aldiv@dividend+1,f
   789     0090  0822               	movf	___aldiv@divisor+2,w
   790     0091  1C03               	skipc
   791     0092  0F22               	incfsz	___aldiv@divisor+2,w
   792     0093  02A6               	subwf	___aldiv@dividend+2,f
   793     0094  0823               	movf	___aldiv@divisor+3,w
   794     0095  1C03               	skipc
   795     0096  0F23               	incfsz	___aldiv@divisor+3,w
   796     0097  02A7               	subwf	___aldiv@dividend+3,f
   797     0098                     l765:
   798     0098  142A               	bsf	___aldiv@quotient,0
   799     0099                     l767:
   800     0099  3001               	movlw	1
   801     009A                     u235:
   802     009A  1003               	clrc
   803     009B  0CA3               	rrf	___aldiv@divisor+3,f
   804     009C  0CA2               	rrf	___aldiv@divisor+2,f
   805     009D  0CA1               	rrf	___aldiv@divisor+1,f
   806     009E  0CA0               	rrf	___aldiv@divisor,f
   807     009F  3EFF               	addlw	-1
   808     00A0  1D03               	skipz
   809     00A1  289A               	goto	u235
   810     00A2                     l769:
   811     00A2  3001               	movlw	1
   812     00A3  02A8               	subwf	___aldiv@counter,f
   813     00A4  1D03               	btfss	3,2
   814     00A5  28A7               	goto	u241
   815     00A6  28A8               	goto	u240
   816     00A7                     u241:
   817     00A7  286F               	goto	l759
   818     00A8                     u240:
   819     00A8                     l771:
   820     00A8  0829               	movf	___aldiv@sign,w
   821     00A9  1903               	btfsc	3,2
   822     00AA  28AC               	goto	u251
   823     00AB  28AD               	goto	u250
   824     00AC                     u251:
   825     00AC  28B8               	goto	l775
   826     00AD                     u250:
   827     00AD                     l773:
   828     00AD  09AA               	comf	___aldiv@quotient,f
   829     00AE  09AB               	comf	___aldiv@quotient+1,f
   830     00AF  09AC               	comf	___aldiv@quotient+2,f
   831     00B0  09AD               	comf	___aldiv@quotient+3,f
   832     00B1  0AAA               	incf	___aldiv@quotient,f
   833     00B2  1903               	skipnz
   834     00B3  0AAB               	incf	___aldiv@quotient+1,f
   835     00B4  1903               	skipnz
   836     00B5  0AAC               	incf	___aldiv@quotient+2,f
   837     00B6  1903               	skipnz
   838     00B7  0AAD               	incf	___aldiv@quotient+3,f
   839     00B8                     l775:
   840     00B8  082D               	movf	___aldiv@quotient+3,w
   841     00B9  00A3               	movwf	?___aldiv+3
   842     00BA  082C               	movf	___aldiv@quotient+2,w
   843     00BB  00A2               	movwf	?___aldiv+2
   844     00BC  082B               	movf	___aldiv@quotient+1,w
   845     00BD  00A1               	movwf	?___aldiv+1
   846     00BE  082A               	movf	___aldiv@quotient,w
   847     00BF  00A0               	movwf	?___aldiv
   848     00C0                     l234:
   849     00C0  0008               	return
   850     00C1                     __end_of___aldiv:
   851                           
   852                           	psect	text4
   853     0104                     __ptext4:	
   854 ;; *************** function _ISR *****************
   855 ;; Defined at:
   856 ;;		line 120 in file "newmain.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   870 ;;      Params:         0       0       0       0       0
   871 ;;      Locals:         0       0       0       0       0
   872 ;;      Temps:          4       0       0       0       0
   873 ;;      Totals:         4       0       0       0       0
   874 ;;Total ram usage:        4 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		Interrupt level 1
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883     0104                     _ISR:	
   884                           ;psect for function _ISR
   885                           
   886     0104                     i1l801:
   887                           
   888                           ;newmain.c: 122:     if(RCIF){
   889     0104  1283               	bcf	3,5	;RP0=0, select bank0
   890     0105  1303               	bcf	3,6	;RP1=0, select bank0
   891     0106  1E8C               	btfss	12,5	;volatile
   892     0107  2909               	goto	u29_21
   893     0108  290A               	goto	u29_20
   894     0109                     u29_21:
   895     0109  2922               	goto	i1l73
   896     010A                     u29_20:
   897     010A                     i1l803:
   898                           
   899                           ;newmain.c: 123:         RCIF = 0;
   900     010A  128C               	bcf	12,5	;volatile
   901     010B                     i1l805:
   902                           
   903                           ;newmain.c: 125:         receivedString[indexString] = RCREG;
   904     010B  0879               	movf	_indexString,w
   905     010C  3E33               	addlw	(low (_receivedString| 0))& (0+255)
   906     010D  0084               	movwf	4
   907     010E  081A               	movf	26,w	;volatile
   908     010F  1383               	bcf	3,7	;select IRP bank0
   909     0110  0080               	movwf	0
   910                           
   911                           ;newmain.c: 127:         if(receivedString[indexString] == 13)
   912     0111  0879               	movf	_indexString,w
   913     0112  3E33               	addlw	(low (_receivedString| 0))& (0+255)
   914     0113  0084               	movwf	4
   915     0114  300D               	movlw	13
   916     0115  0600               	xorwf	0,w
   917     0116  1D03               	btfss	3,2
   918     0117  2919               	goto	u30_21
   919     0118  291A               	goto	u30_20
   920     0119                     u30_21:
   921     0119  291E               	goto	i1l809
   922     011A                     u30_20:
   923     011A                     i1l807:
   924                           
   925                           ;newmain.c: 128:             receivedString[indexString] = '\0';
   926     011A  0879               	movf	_indexString,w
   927     011B  3E33               	addlw	(low (_receivedString| 0))& (0+255)
   928     011C  0084               	movwf	4
   929     011D  0180               	clrf	0
   930     011E                     i1l809:
   931                           
   932                           ;newmain.c: 130:         indexString++;
   933     011E  3001               	movlw	1
   934     011F  00FF               	movwf	btemp+1
   935     0120  087F               	movf	btemp+1,w
   936     0121  07F9               	addwf	_indexString,f
   937     0122                     i1l73:
   938     0122  0873               	movf	??_ISR+3,w
   939     0123  00FF               	movwf	btemp+1
   940     0124  0872               	movf	??_ISR+2,w
   941     0125  008A               	movwf	10
   942     0126  0871               	movf	??_ISR+1,w
   943     0127  0084               	movwf	4
   944     0128  0E70               	swapf	??_ISR,w
   945     0129  0083               	movwf	3
   946     012A  0EFE               	swapf	btemp,f
   947     012B  0E7E               	swapf	btemp,w
   948     012C  0009               	retfie
   949     012D                     __end_of_ISR:
   950     007E                     btemp	set	126	;btemp
   951     007E                     wtemp0	set	126
   952                           
   953                           	psect	intentry
   954     0004                     __pintentry:	
   955                           ;incstack = 0
   956                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
   957                           
   958     0004                     interrupt_function:
   959     007E                     saved_w	set	btemp
   960     0004  00FE               	movwf	btemp
   961     0005  0E03               	swapf	3,w
   962     0006  00F0               	movwf	??_ISR
   963     0007  0804               	movf	4,w
   964     0008  00F1               	movwf	??_ISR+1
   965     0009  080A               	movf	10,w
   966     000A  00F2               	movwf	??_ISR+2
   967     000B  087F               	movf	btemp+1,w
   968     000C  00F3               	movwf	??_ISR+3
   969     000D  120A  118A  2904   	ljmp	_ISR
   970                           
   971                           	psect	config
   972                           
   973                           ;Config register CONFIG @ 0x2007
   974                           ;	Oscillator Selection bits
   975                           ;	FOSC = HS, HS oscillator
   976                           ;	Watchdog Timer Enable bit
   977                           ;	WDTE = OFF, WDT disabled
   978                           ;	Power-up Timer Enable bit
   979                           ;	PWRTE = ON, PWRT enabled
   980                           ;	Brown-out Reset Enable bit
   981                           ;	BOREN = ON, BOR enabled
   982                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   983                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   984                           ;	Data EEPROM Memory Code Protection bit
   985                           ;	CPD = OFF, Data EEPROM code protection off
   986                           ;	Flash Program Memory Write Enable bits
   987                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   988                           ;	In-Circuit Debugger Mode bit
   989                           ;	DEBUG = 0x1, unprogrammed default
   990                           ;	Flash Program Memory Code Protection bit
   991                           ;	CP = OFF, Code protection off
   992     2007                     	org	8199
   993     2007  3FF2               	dw	16370

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     19      29
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SENDUARTSTRING@string	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_INITUART
    _INITUART->___aldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_INITUART
    _INITUART->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     673
                                             16 BANK0      3     3      0
                           _INITUART
                     _SENDUARTSTRING
 ---------------------------------------------------------------------------------
 (2) _SENDUARTSTRING                                       2     2      0     123
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INITUART                                             6     4      2     550
                                              5 COMMON     4     4      0
                                             14 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INITUART
     ___aldiv
   _SENDUARTSTRING

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      27       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      1D       5       36.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      27      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Dec 15 10:48:30 2023

                      pc 0002                       l51 0103                       l63 0150  
                     l59 0130                       fsr 0004                      l224 0038  
                    l234 00C0                      l741 002B                      l751 005B  
                    l743 003C                      l761 0078                      l753 005E  
                    l745 0047                      l737 0024                      l763 008A  
                    l755 0067                      l771 00A8                      l747 004B  
                    l739 0027                      l773 00AD                      l765 0098  
                    l757 006B                      l749 0053                      l781 00C6  
                    l775 00B8                      l767 0099                      l759 006F  
                    l783 00D0                      l791 013F                      l769 00A2  
                    l785 00D3                      l793 0143                      l779 00C1  
                    l787 012E                      l795 0151                      l789 0136  
                    l797 015C                      l799 0162                      u200 006F  
                    u201 006E                      u220 008A                      u221 0089  
                    u215 0071                      u240 00A8                      u160 002B  
                    u241 00A7                      u225 0086                      u161 002A  
                    u250 00AD                      u170 003C                      u251 00AC  
                    u235 009A                      u171 003B                      u180 005B  
                    u260 00E4                      u181 005A                      u317 016A  
                    u270 0136                      u271 0135                      u280 0150  
                    u265 00DF                      u281 014F                      u195 0060  
                    _ISR 0104                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     STR_1 017A                     _PIE1 008C  
                   _RCIF 0065                     i1l73 0122                     _main 0151  
                   btemp 007E                     start 0010                    ??_ISR 0070  
       __end_of_INITUART 0104          __end_of___aldiv 00C1                    ?_main 0070  
                  i1l801 0104                    i1l803 010A                    i1l805 010B  
                  i1l807 011A                    i1l809 011E                    _RCREG 001A  
   SENDUARTSTRING@string 0074                    _RCSTA 0018                    u30_20 011A  
                  u30_21 0119                    _SPBRG 0099                    _PORTD 0008  
                  u29_20 010A                    u29_21 0109                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0013  
           __end_of_main 0174                   ??_main 0030         ??_SENDUARTSTRING 0074  
                 _INTCON 000B          SENDUARTSTRING@i 0075                ??___aldiv 0074  
                 saved_w 007E         INITUART@baudRate 002E  __end_of__initialization 0020  
              ?_INITUART 002E           __pcstackCOMMON 0070               __pbssBANK0 0033  
             ??_INITUART 0075               __pmaintext 0151               __pintentry 0004  
             __stringtab 0174                  ___aldiv 0024                  __ptext1 012D  
                __ptext2 00C1                  __ptext3 0024                  __ptext4 0104  
       ___aldiv@dividend 0024     end_of_initialization 0020         ___aldiv@quotient 002A  
              _PORTEbits 0009                _TRISCbits 0087                _TXSTAbits 0098  
    start_initialization 0013              __end_of_ISR 012D              __pbssCOMMON 0079  
              ___latbits 0002            __pcstackBANK0 0020                 ?___aldiv 0020  
              __pstrings 0174          ___aldiv@divisor 0020        interrupt_function 0004  
        ___aldiv@counter 0028                 _INITUART 00C1                 _PIR1bits 000C  
            __stringbase 0179           _SENDUARTSTRING 012D              _indexString 0079  
     __end_of__stringtab 017A   __end_of_SENDUARTSTRING 0151           _receivedString 0033  
        ?_SENDUARTSTRING 0070                 intlevel1 0000                stringcode 0174  
               stringdir 0174                 stringtab 0174             ___aldiv@sign 0029  
