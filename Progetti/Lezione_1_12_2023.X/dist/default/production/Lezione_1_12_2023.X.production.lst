

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Dec 01 12:06:15 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16LF877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     001A                     _RCREG	set	26
   172     0019                     _TXREG	set	25
   173     000C                     _PIR1bits	set	12
   174     000B                     _INTCONbits	set	11
   175     0018                     _RCSTAbits	set	24
   176     0065                     _RCIF	set	101
   177     008C                     _PIE1bits	set	140
   178     0099                     _SPBRG	set	153
   179     0098                     _TXSTAbits	set	152
   180     0087                     _TRISCbits	set	135
   181     0088                     _TRISD	set	136
   182                           
   183                           	psect	strings
   184     0149                     __pstrings:
   185     0149                     stringtab:
   186     0149                     __stringtab:
   187     0149                     stringcode:	
   188                           ;	String table - string pointers are 1 byte each
   189                           
   190     0149                     stringdir:
   191     0149  3001               	movlw	high stringdir
   192     014A  008A               	movwf	10
   193     014B  0804               	movf	4,w
   194     014C  0A84               	incf	4,f
   195     014D  0782               	addwf	2,f
   196     014E                     __stringbase:
   197     014E  3400               	retlw	0
   198     014F                     __end_of__stringtab:
   199     014F                     STR_1:
   200     014F  3463               	retlw	99	;'c'
   201     0150  3469               	retlw	105	;'i'
   202     0151  3461               	retlw	97	;'a'
   203     0152  346F               	retlw	111	;'o'
   204     0153  3400               	retlw	0
   205                           
   206                           	psect	cinit
   207     000F                     start_initialization:	
   208                           ; #config settings
   209                           
   210     000F                     __initialization:
   211     000F                     end_of_initialization:	
   212                           ;End of C runtime variable initialization code
   213                           
   214     000F                     __end_of__initialization:
   215     000F  0183               	clrf	3
   216     0010  120A  118A  28E8   	ljmp	_main	;jump to C main() function
   217                           
   218                           	psect	cstackCOMMON
   219     0070                     __pcstackCOMMON:
   220     0070                     ?_SendUARTString:
   221     0070                     ?_main:	
   222                           ; 1 bytes @ 0x0
   223                           
   224     0070                     ?_ISR:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0070                     ??_ISR:	
   228                           ; 1 bytes @ 0x0
   229                           
   230                           
   231                           ; 1 bytes @ 0x0
   232     0070                     	ds	2
   233     0072                     ??_SendUARTString:
   234     0072                     ?___aldiv:	
   235                           ; 1 bytes @ 0x2
   236                           
   237     0072                     SendUARTString@i:	
   238                           ; 4 bytes @ 0x2
   239                           
   240     0072                     ___aldiv@divisor:	
   241                           ; 2 bytes @ 0x2
   242                           
   243                           
   244                           ; 4 bytes @ 0x2
   245     0072                     	ds	2
   246     0074                     SendUARTString@str:
   247                           
   248                           ; 1 bytes @ 0x4
   249     0074                     	ds	2
   250     0076                     ___aldiv@dividend:
   251                           
   252                           ; 4 bytes @ 0x6
   253     0076                     	ds	4
   254     007A                     ??___aldiv:
   255                           
   256                           ; 1 bytes @ 0xA
   257     007A                     	ds	1
   258                           
   259                           	psect	cstackBANK0
   260     0020                     __pcstackBANK0:
   261     0020                     ___aldiv@counter:
   262                           
   263                           ; 1 bytes @ 0x0
   264     0020                     	ds	1
   265     0021                     ___aldiv@sign:
   266                           
   267                           ; 1 bytes @ 0x1
   268     0021                     	ds	1
   269     0022                     ___aldiv@quotient:
   270                           
   271                           ; 4 bytes @ 0x2
   272     0022                     	ds	4
   273     0026                     ?_initUART:
   274     0026                     initUART@baudRate:	
   275                           ; 1 bytes @ 0x6
   276                           
   277                           
   278                           ; 4 bytes @ 0x6
   279     0026                     	ds	4
   280     002A                     ??_initUART:
   281                           
   282                           ; 1 bytes @ 0xA
   283     002A                     	ds	4
   284     002E                     ??_main:
   285                           
   286                           ; 1 bytes @ 0xE
   287     002E                     	ds	3
   288                           
   289                           	psect	maintext
   290     00E8                     __pmaintext:	
   291 ;;
   292 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   293 ;;
   294 ;; *************** function _main *****************
   295 ;; Defined at:
   296 ;;		line 23 in file "newmain.c"
   297 ;; Parameters:    Size  Location     Type
   298 ;;		None
   299 ;; Auto vars:     Size  Location     Type
   300 ;;		None
   301 ;; Return value:  Size  Location     Type
   302 ;;                  1    wreg      void 
   303 ;; Registers used:
   304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   305 ;; Tracked objects:
   306 ;;		On entry : B00/0
   307 ;;		On exit  : 0/0
   308 ;;		Unchanged: 0/0
   309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   310 ;;      Params:         0       0       0       0       0
   311 ;;      Locals:         0       0       0       0       0
   312 ;;      Temps:          0       3       0       0       0
   313 ;;      Totals:         0       3       0       0       0
   314 ;;Total ram usage:        3 bytes
   315 ;; Hardware stack levels required when called: 3
   316 ;; This function calls:
   317 ;;		_SendUARTString
   318 ;;		_initUART
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324     00E8                     _main:	
   325                           ;psect for function _main
   326                           
   327     00E8                     l732:	
   328                           ;incstack = 0
   329                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   330                           
   331                           
   332                           ;newmain.c: 25:     initUART(9600);
   333     00E8  3000               	movlw	0
   334     00E9  1283               	bcf	3,5	;RP0=0, select bank0
   335     00EA  1303               	bcf	3,6	;RP1=0, select bank0
   336     00EB  00A9               	movwf	initUART@baudRate+3
   337     00EC  3000               	movlw	0
   338     00ED  00A8               	movwf	initUART@baudRate+2
   339     00EE  3025               	movlw	37
   340     00EF  00A7               	movwf	initUART@baudRate+1
   341     00F0  3080               	movlw	128
   342     00F1  00A6               	movwf	initUART@baudRate
   343     00F2  120A  118A  20B0  120A  118A  	fcall	_initUART
   344     00F7                     l734:
   345                           
   346                           ;newmain.c: 26:     TRISD = 0x00;
   347     00F7  1683               	bsf	3,5	;RP0=1, select bank1
   348     00F8  1303               	bcf	3,6	;RP1=0, select bank1
   349     00F9  0188               	clrf	8	;volatile
   350     00FA                     l736:
   351                           
   352                           ;newmain.c: 29:         SendUARTString("ciao");
   353     00FA  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   354     00FB  120A  118A  2112  120A  118A  	fcall	_SendUARTString
   355     0100                     l738:
   356                           
   357                           ;newmain.c: 30:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   358     0100  300B               	movlw	11
   359     0101  1283               	bcf	3,5	;RP0=0, select bank0
   360     0102  1303               	bcf	3,6	;RP1=0, select bank0
   361     0103  00B0               	movwf	??_main+2
   362     0104  3026               	movlw	38
   363     0105  00AF               	movwf	??_main+1
   364     0106  305D               	movlw	93
   365     0107  00AE               	movwf	??_main
   366     0108                     u287:
   367     0108  0BAE               	decfsz	??_main,f
   368     0109  2908               	goto	u287
   369     010A  0BAF               	decfsz	??_main+1,f
   370     010B  2908               	goto	u287
   371     010C  0BB0               	decfsz	??_main+2,f
   372     010D  2908               	goto	u287
   373     010E  28FA               	goto	l736
   374     010F  120A  118A  280C   	ljmp	start
   375     0112                     __end_of_main:
   376                           
   377                           	psect	text1
   378     00B0                     __ptext1:	
   379 ;; *************** function _initUART *****************
   380 ;; Defined at:
   381 ;;		line 36 in file "newmain.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;  baudRate        4    6[BANK0 ] long 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   395 ;;      Params:         0       4       0       0       0
   396 ;;      Locals:         0       0       0       0       0
   397 ;;      Temps:          0       4       0       0       0
   398 ;;      Totals:         0       8       0       0       0
   399 ;;Total ram usage:        8 bytes
   400 ;; Hardware stack levels used: 1
   401 ;; Hardware stack levels required when called: 2
   402 ;; This function calls:
   403 ;;		___aldiv
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409     00B0                     _initUART:	
   410                           ;psect for function _initUART
   411                           
   412     00B0                     l714:	
   413                           ;incstack = 0
   414                           ; Regs used in _initUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   415                           
   416                           
   417                           ;newmain.c: 37:     TRISCbits.TRISC7 = 1;
   418     00B0  1683               	bsf	3,5	;RP0=1, select bank1
   419     00B1  1303               	bcf	3,6	;RP1=0, select bank1
   420     00B2  1787               	bsf	7,7	;volatile
   421                           
   422                           ;newmain.c: 38:     TRISCbits.TRISC6 = 0;
   423     00B3  1307               	bcf	7,6	;volatile
   424                           
   425                           ;newmain.c: 40:     TXSTAbits.TXEN = 1;
   426     00B4  1698               	bsf	24,5	;volatile
   427                           
   428                           ;newmain.c: 41:     RCSTAbits.SPEN = 1;
   429     00B5  1283               	bcf	3,5	;RP0=0, select bank0
   430     00B6  1303               	bcf	3,6	;RP1=0, select bank0
   431     00B7  1798               	bsf	24,7	;volatile
   432                           
   433                           ;newmain.c: 42:     RCSTAbits.CREN = 1;
   434     00B8  1618               	bsf	24,4	;volatile
   435     00B9                     l716:
   436                           
   437                           ;newmain.c: 43:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   438     00B9  0826               	movf	initUART@baudRate,w
   439     00BA  00AA               	movwf	??_initUART
   440     00BB  0827               	movf	initUART@baudRate+1,w
   441     00BC  00AB               	movwf	??_initUART+1
   442     00BD  0828               	movf	initUART@baudRate+2,w
   443     00BE  00AC               	movwf	??_initUART+2
   444     00BF  0829               	movf	initUART@baudRate+3,w
   445     00C0  00AD               	movwf	??_initUART+3
   446     00C1  3006               	movlw	6
   447     00C2                     u255:
   448     00C2  1003               	clrc
   449     00C3  0DAA               	rlf	??_initUART,f
   450     00C4  0DAB               	rlf	??_initUART+1,f
   451     00C5  0DAC               	rlf	??_initUART+2,f
   452     00C6  0DAD               	rlf	??_initUART+3,f
   453     00C7                     u250:
   454     00C7  3EFF               	addlw	-1
   455     00C8  1D03               	skipz
   456     00C9  28C2               	goto	u255
   457     00CA  082D               	movf	??_initUART+3,w
   458     00CB  00F5               	movwf	___aldiv@divisor+3
   459     00CC  082C               	movf	??_initUART+2,w
   460     00CD  00F4               	movwf	___aldiv@divisor+2
   461     00CE  082B               	movf	??_initUART+1,w
   462     00CF  00F3               	movwf	___aldiv@divisor+1
   463     00D0  082A               	movf	??_initUART,w
   464     00D1  00F2               	movwf	___aldiv@divisor
   465     00D2  3000               	movlw	0
   466     00D3  00F9               	movwf	___aldiv@dividend+3
   467     00D4  307A               	movlw	122
   468     00D5  00F8               	movwf	___aldiv@dividend+2
   469     00D6  3012               	movlw	18
   470     00D7  00F7               	movwf	___aldiv@dividend+1
   471     00D8  3000               	movlw	0
   472     00D9  00F6               	movwf	___aldiv@dividend
   473     00DA  120A  118A  2013  120A  118A  	fcall	___aldiv
   474     00DF  0872               	movf	?___aldiv,w
   475     00E0  3EFF               	addlw	255
   476     00E1  1683               	bsf	3,5	;RP0=1, select bank1
   477     00E2  1303               	bcf	3,6	;RP1=0, select bank1
   478     00E3  0099               	movwf	25	;volatile
   479     00E4                     l718:
   480                           
   481                           ;newmain.c: 45:     INTCONbits.GIE = 1;
   482     00E4  178B               	bsf	11,7	;volatile
   483     00E5                     l720:
   484                           
   485                           ;newmain.c: 46:     INTCONbits.PEIE = 1;
   486     00E5  170B               	bsf	11,6	;volatile
   487     00E6                     l722:
   488                           
   489                           ;newmain.c: 47:     PIE1bits.RCIE = 1;
   490     00E6  168C               	bsf	12,5	;volatile
   491     00E7                     l39:
   492     00E7  0008               	return
   493     00E8                     __end_of_initUART:
   494                           
   495                           	psect	text2
   496     0013                     __ptext2:	
   497 ;; *************** function ___aldiv *****************
   498 ;; Defined at:
   499 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;  divisor         4    2[COMMON] long 
   502 ;;  dividend        4    6[COMMON] long 
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  quotient        4    2[BANK0 ] long 
   505 ;;  sign            1    1[BANK0 ] unsigned char 
   506 ;;  counter         1    0[BANK0 ] unsigned char 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  4    2[COMMON] long 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, btemp+1
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         8       0       0       0       0
   517 ;;      Locals:         0       6       0       0       0
   518 ;;      Temps:          1       0       0       0       0
   519 ;;      Totals:         9       6       0       0       0
   520 ;;Total ram usage:       15 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; Hardware stack levels required when called: 1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_initUART
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530     0013                     ___aldiv:	
   531                           ;psect for function ___aldiv
   532                           
   533     0013                     l672:	
   534                           ;incstack = 0
   535                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   536                           
   537     0013  1283               	bcf	3,5	;RP0=0, select bank0
   538     0014  1303               	bcf	3,6	;RP1=0, select bank0
   539     0015  01A1               	clrf	___aldiv@sign
   540     0016                     l674:
   541     0016  1FF5               	btfss	___aldiv@divisor+3,7
   542     0017  2819               	goto	u151
   543     0018  281A               	goto	u150
   544     0019                     u151:
   545     0019  2827               	goto	l205
   546     001A                     u150:
   547     001A                     l676:
   548     001A  09F2               	comf	___aldiv@divisor,f
   549     001B  09F3               	comf	___aldiv@divisor+1,f
   550     001C  09F4               	comf	___aldiv@divisor+2,f
   551     001D  09F5               	comf	___aldiv@divisor+3,f
   552     001E  0AF2               	incf	___aldiv@divisor,f
   553     001F  1903               	skipnz
   554     0020  0AF3               	incf	___aldiv@divisor+1,f
   555     0021  1903               	skipnz
   556     0022  0AF4               	incf	___aldiv@divisor+2,f
   557     0023  1903               	skipnz
   558     0024  0AF5               	incf	___aldiv@divisor+3,f
   559     0025  01A1               	clrf	___aldiv@sign
   560     0026  0AA1               	incf	___aldiv@sign,f
   561     0027                     l205:
   562     0027  1FF9               	btfss	___aldiv@dividend+3,7
   563     0028  282A               	goto	u161
   564     0029  282B               	goto	u160
   565     002A                     u161:
   566     002A  283A               	goto	l682
   567     002B                     u160:
   568     002B                     l678:
   569     002B  09F6               	comf	___aldiv@dividend,f
   570     002C  09F7               	comf	___aldiv@dividend+1,f
   571     002D  09F8               	comf	___aldiv@dividend+2,f
   572     002E  09F9               	comf	___aldiv@dividend+3,f
   573     002F  0AF6               	incf	___aldiv@dividend,f
   574     0030  1903               	skipnz
   575     0031  0AF7               	incf	___aldiv@dividend+1,f
   576     0032  1903               	skipnz
   577     0033  0AF8               	incf	___aldiv@dividend+2,f
   578     0034  1903               	skipnz
   579     0035  0AF9               	incf	___aldiv@dividend+3,f
   580     0036                     l680:
   581     0036  3001               	movlw	1
   582     0037  00FF               	movwf	btemp+1
   583     0038  087F               	movf	btemp+1,w
   584     0039  06A1               	xorwf	___aldiv@sign,f
   585     003A                     l682:
   586     003A  3000               	movlw	0
   587     003B  00A5               	movwf	___aldiv@quotient+3
   588     003C  3000               	movlw	0
   589     003D  00A4               	movwf	___aldiv@quotient+2
   590     003E  3000               	movlw	0
   591     003F  00A3               	movwf	___aldiv@quotient+1
   592     0040  3000               	movlw	0
   593     0041  00A2               	movwf	___aldiv@quotient
   594     0042                     l684:
   595     0042  0875               	movf	___aldiv@divisor+3,w
   596     0043  0474               	iorwf	___aldiv@divisor+2,w
   597     0044  0473               	iorwf	___aldiv@divisor+1,w
   598     0045  0472               	iorwf	___aldiv@divisor,w
   599     0046  1903               	skipnz
   600     0047  2849               	goto	u171
   601     0048  284A               	goto	u170
   602     0049                     u171:
   603     0049  2897               	goto	l706
   604     004A                     u170:
   605     004A                     l686:
   606     004A  01A0               	clrf	___aldiv@counter
   607     004B  0AA0               	incf	___aldiv@counter,f
   608     004C  285A               	goto	l692
   609     004D                     l688:
   610     004D  3001               	movlw	1
   611     004E  00FA               	movwf	??___aldiv
   612     004F                     u185:
   613     004F  1003               	clrc
   614     0050  0DF2               	rlf	___aldiv@divisor,f
   615     0051  0DF3               	rlf	___aldiv@divisor+1,f
   616     0052  0DF4               	rlf	___aldiv@divisor+2,f
   617     0053  0DF5               	rlf	___aldiv@divisor+3,f
   618     0054  0BFA               	decfsz	??___aldiv,f
   619     0055  284F               	goto	u185
   620     0056                     l690:
   621     0056  3001               	movlw	1
   622     0057  00FF               	movwf	btemp+1
   623     0058  087F               	movf	btemp+1,w
   624     0059  07A0               	addwf	___aldiv@counter,f
   625     005A                     l692:
   626     005A  1FF5               	btfss	___aldiv@divisor+3,7
   627     005B  285D               	goto	u191
   628     005C  285E               	goto	u190
   629     005D                     u191:
   630     005D  284D               	goto	l688
   631     005E                     u190:
   632     005E                     l694:
   633     005E  3001               	movlw	1
   634     005F  00FA               	movwf	??___aldiv
   635     0060                     u205:
   636     0060  1003               	clrc
   637     0061  0DA2               	rlf	___aldiv@quotient,f
   638     0062  0DA3               	rlf	___aldiv@quotient+1,f
   639     0063  0DA4               	rlf	___aldiv@quotient+2,f
   640     0064  0DA5               	rlf	___aldiv@quotient+3,f
   641     0065  0BFA               	decfsz	??___aldiv,f
   642     0066  2860               	goto	u205
   643     0067                     l696:
   644     0067  0875               	movf	___aldiv@divisor+3,w
   645     0068  0279               	subwf	___aldiv@dividend+3,w
   646     0069  1D03               	skipz
   647     006A  2875               	goto	u215
   648     006B  0874               	movf	___aldiv@divisor+2,w
   649     006C  0278               	subwf	___aldiv@dividend+2,w
   650     006D  1D03               	skipz
   651     006E  2875               	goto	u215
   652     006F  0873               	movf	___aldiv@divisor+1,w
   653     0070  0277               	subwf	___aldiv@dividend+1,w
   654     0071  1D03               	skipz
   655     0072  2875               	goto	u215
   656     0073  0872               	movf	___aldiv@divisor,w
   657     0074  0276               	subwf	___aldiv@dividend,w
   658     0075                     u215:
   659     0075  1C03               	skipc
   660     0076  2878               	goto	u211
   661     0077  2879               	goto	u210
   662     0078                     u211:
   663     0078  2888               	goto	l702
   664     0079                     u210:
   665     0079                     l698:
   666     0079  0872               	movf	___aldiv@divisor,w
   667     007A  02F6               	subwf	___aldiv@dividend,f
   668     007B  0873               	movf	___aldiv@divisor+1,w
   669     007C  1C03               	skipc
   670     007D  0F73               	incfsz	___aldiv@divisor+1,w
   671     007E  02F7               	subwf	___aldiv@dividend+1,f
   672     007F  0874               	movf	___aldiv@divisor+2,w
   673     0080  1C03               	skipc
   674     0081  0F74               	incfsz	___aldiv@divisor+2,w
   675     0082  02F8               	subwf	___aldiv@dividend+2,f
   676     0083  0875               	movf	___aldiv@divisor+3,w
   677     0084  1C03               	skipc
   678     0085  0F75               	incfsz	___aldiv@divisor+3,w
   679     0086  02F9               	subwf	___aldiv@dividend+3,f
   680     0087                     l700:
   681     0087  1422               	bsf	___aldiv@quotient,0
   682     0088                     l702:
   683     0088  3001               	movlw	1
   684     0089                     u225:
   685     0089  1003               	clrc
   686     008A  0CF5               	rrf	___aldiv@divisor+3,f
   687     008B  0CF4               	rrf	___aldiv@divisor+2,f
   688     008C  0CF3               	rrf	___aldiv@divisor+1,f
   689     008D  0CF2               	rrf	___aldiv@divisor,f
   690     008E  3EFF               	addlw	-1
   691     008F  1D03               	skipz
   692     0090  2889               	goto	u225
   693     0091                     l704:
   694     0091  3001               	movlw	1
   695     0092  02A0               	subwf	___aldiv@counter,f
   696     0093  1D03               	btfss	3,2
   697     0094  2896               	goto	u231
   698     0095  2897               	goto	u230
   699     0096                     u231:
   700     0096  285E               	goto	l694
   701     0097                     u230:
   702     0097                     l706:
   703     0097  0821               	movf	___aldiv@sign,w
   704     0098  1903               	btfsc	3,2
   705     0099  289B               	goto	u241
   706     009A  289C               	goto	u240
   707     009B                     u241:
   708     009B  28A7               	goto	l710
   709     009C                     u240:
   710     009C                     l708:
   711     009C  09A2               	comf	___aldiv@quotient,f
   712     009D  09A3               	comf	___aldiv@quotient+1,f
   713     009E  09A4               	comf	___aldiv@quotient+2,f
   714     009F  09A5               	comf	___aldiv@quotient+3,f
   715     00A0  0AA2               	incf	___aldiv@quotient,f
   716     00A1  1903               	skipnz
   717     00A2  0AA3               	incf	___aldiv@quotient+1,f
   718     00A3  1903               	skipnz
   719     00A4  0AA4               	incf	___aldiv@quotient+2,f
   720     00A5  1903               	skipnz
   721     00A6  0AA5               	incf	___aldiv@quotient+3,f
   722     00A7                     l710:
   723     00A7  0825               	movf	___aldiv@quotient+3,w
   724     00A8  00F5               	movwf	?___aldiv+3
   725     00A9  0824               	movf	___aldiv@quotient+2,w
   726     00AA  00F4               	movwf	?___aldiv+2
   727     00AB  0823               	movf	___aldiv@quotient+1,w
   728     00AC  00F3               	movwf	?___aldiv+1
   729     00AD  0822               	movf	___aldiv@quotient,w
   730     00AE  00F2               	movwf	?___aldiv
   731     00AF                     l215:
   732     00AF  0008               	return
   733     00B0                     __end_of___aldiv:
   734                           
   735                           	psect	text3
   736     0112                     __ptext3:	
   737 ;; *************** function _SendUARTString *****************
   738 ;; Defined at:
   739 ;;		line 50 in file "newmain.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  str             1    wreg     PTR unsigned char 
   742 ;;		 -> STR_1(5), 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  str             1    4[COMMON] PTR unsigned char 
   745 ;;		 -> STR_1(5), 
   746 ;;  i               2    2[COMMON] int 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         0       0       0       0       0
   757 ;;      Locals:         3       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0
   759 ;;      Totals:         3       0       0       0       0
   760 ;;Total ram usage:        3 bytes
   761 ;; Hardware stack levels used: 2
   762 ;; Hardware stack levels required when called: 1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770     0112                     _SendUARTString:	
   771                           ;psect for function _SendUARTString
   772                           
   773                           
   774                           ;incstack = 0
   775                           ; Regs used in _SendUARTString: [wreg-fsr0h+status,2+status,0+pclath]
   776                           ;SendUARTString@str stored from wreg
   777     0112  00F4               	movwf	SendUARTString@str
   778     0113                     l724:
   779                           
   780                           ;newmain.c: 51:     int i = 0;
   781     0113  01F2               	clrf	SendUARTString@i
   782     0114  01F3               	clrf	SendUARTString@i+1
   783                           
   784                           ;newmain.c: 53:     while (str[i] != '\0') {
   785     0115  292B               	goto	l730
   786     0116                     l44:
   787     0116  1283               	bcf	3,5	;RP0=0, select bank0
   788     0117  1303               	bcf	3,6	;RP1=0, select bank0
   789     0118  1E0C               	btfss	12,4	;volatile
   790     0119  291B               	goto	u261
   791     011A  291C               	goto	u260
   792     011B                     u261:
   793     011B  2916               	goto	l44
   794     011C                     u260:
   795     011C                     l726:
   796                           
   797                           ;newmain.c: 56:         TXREG = str[i];
   798     011C  0872               	movf	SendUARTString@i,w
   799     011D  0774               	addwf	SendUARTString@str,w
   800     011E  0084               	movwf	4
   801     011F  120A  118A  2149  120A  118A  	fcall	stringdir
   802     0124  0099               	movwf	25	;volatile
   803     0125                     l728:
   804                           
   805                           ;newmain.c: 57:         i++;
   806     0125  3001               	movlw	1
   807     0126  07F2               	addwf	SendUARTString@i,f
   808     0127  1803               	skipnc
   809     0128  0AF3               	incf	SendUARTString@i+1,f
   810     0129  3000               	movlw	0
   811     012A  07F3               	addwf	SendUARTString@i+1,f
   812     012B                     l730:
   813                           
   814                           ;newmain.c: 53:     while (str[i] != '\0') {
   815     012B  0872               	movf	SendUARTString@i,w
   816     012C  0774               	addwf	SendUARTString@str,w
   817     012D  0084               	movwf	4
   818     012E  120A  118A  2149  120A  118A  	fcall	stringdir
   819     0133  3A00               	xorlw	0
   820     0134  1D03               	skipz
   821     0135  2937               	goto	u271
   822     0136  2938               	goto	u270
   823     0137                     u271:
   824     0137  2916               	goto	l44
   825     0138                     u270:
   826     0138                     l48:
   827     0138  0008               	return
   828     0139                     __end_of_SendUARTString:
   829                           
   830                           	psect	text4
   831     0139                     __ptext4:	
   832 ;; *************** function _ISR *****************
   833 ;; Defined at:
   834 ;;		line 61 in file "newmain.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;		None
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   848 ;;      Params:         0       0       0       0       0
   849 ;;      Locals:         0       0       0       0       0
   850 ;;      Temps:          2       0       0       0       0
   851 ;;      Totals:         2       0       0       0       0
   852 ;;Total ram usage:        2 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		Interrupt level 1
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861     0139                     _ISR:	
   862                           ;psect for function _ISR
   863                           
   864     0139                     i1l666:
   865                           
   866                           ;newmain.c: 62:     if (RCIF) {
   867     0139  1283               	bcf	3,5	;RP0=0, select bank0
   868     013A  1303               	bcf	3,6	;RP1=0, select bank0
   869     013B  1E8C               	btfss	12,5	;volatile
   870     013C  293E               	goto	u14_21
   871     013D  293F               	goto	u14_20
   872     013E                     u14_21:
   873     013E  2942               	goto	i1l54
   874     013F                     u14_20:
   875     013F                     i1l668:
   876                           
   877                           ;newmain.c: 63:         TXREG = RCREG;
   878     013F  081A               	movf	26,w	;volatile
   879     0140  0099               	movwf	25	;volatile
   880     0141                     i1l670:
   881                           
   882                           ;newmain.c: 64:         RCIF = 0;
   883     0141  128C               	bcf	12,5	;volatile
   884     0142                     i1l54:
   885     0142  0871               	movf	??_ISR+1,w
   886     0143  008A               	movwf	10
   887     0144  0E70               	swapf	??_ISR,w
   888     0145  0083               	movwf	3
   889     0146  0EFE               	swapf	btemp,f
   890     0147  0E7E               	swapf	btemp,w
   891     0148  0009               	retfie
   892     0149                     __end_of_ISR:
   893     007E                     btemp	set	126	;btemp
   894     007E                     wtemp0	set	126
   895                           
   896                           	psect	intentry
   897     0004                     __pintentry:	
   898                           ;incstack = 0
   899                           ; Regs used in _ISR: [wreg]
   900                           
   901     0004                     interrupt_function:
   902     007E                     saved_w	set	btemp
   903     0004  00FE               	movwf	btemp
   904     0005  0E03               	swapf	3,w
   905     0006  00F0               	movwf	??_ISR
   906     0007  080A               	movf	10,w
   907     0008  00F1               	movwf	??_ISR+1
   908     0009  120A  118A  2939   	ljmp	_ISR
   909                           
   910                           	psect	config
   911                           
   912                           ;Config register CONFIG @ 0x2007
   913                           ;	Oscillator Selection bits
   914                           ;	FOSC = HS, HS oscillator
   915                           ;	Watchdog Timer Enable bit
   916                           ;	WDTE = OFF, WDT disabled
   917                           ;	Power-up Timer Enable bit
   918                           ;	PWRTE = ON, PWRT enabled
   919                           ;	Brown-out Reset Enable bit
   920                           ;	BOREN = ON, BOR enabled
   921                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   922                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   923                           ;	Data EEPROM Memory Code Protection bit
   924                           ;	CPD = OFF, Data EEPROM code protection off
   925                           ;	Flash Program Memory Write Enable bits
   926                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   927                           ;	In-Circuit Debugger Mode bit
   928                           ;	DEBUG = 0x1, unprogrammed default
   929                           ;	Flash Program Memory Code Protection bit
   930                           ;	CP = OFF, Code protection off
   931     2007                     	org	8199
   932     2007  3FF2               	dw	16370

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     17      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SendUARTString@str	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _initUART->___aldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUART
    _initUART->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     673
                                             14 BANK0      3     3      0
                     _SendUARTString
                           _initUART
 ---------------------------------------------------------------------------------
 (1) _initUART                                             8     4      4     550
                                              6 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              2 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _SendUARTString                                       3     3      0     123
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendUARTString
   _initUART
     ___aldiv

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     11      11       5       21.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Dec 01 12:06:15 2023

                      pc 0002                       l44 0116                       l39 00E7  
                     l48 0138                       fsr 0004                      l205 0027  
                    l215 00AF                      l700 0087                      l710 00A7  
                    l702 0088                      l704 0091                      l720 00E5  
                    l730 012B                      l706 0097                      l722 00E6  
                    l714 00B0                      l724 0113                      l708 009C  
                    l716 00B9                      l732 00E8                      l726 011C  
                    l718 00E4                      l734 00F7                      l728 0125  
                    l680 0036                      l672 0013                      l736 00FA  
                    l690 0056                      l682 003A                      l674 0016  
                    l738 0100                      l692 005A                      l684 0042  
                    l676 001A                      l694 005E                      l686 004A  
                    l678 002B                      l696 0067                      l688 004D  
                    l698 0079                      u210 0079                      u211 0078  
                    u205 0060                      u230 0097                      u150 001A  
                    u231 0096                      u215 0075                      u151 0019  
                    u240 009C                      u160 002B                      u241 009B  
                    u225 0089                      u161 002A                      u170 004A  
                    u250 00C7                      u171 0049                      u260 011C  
                    u261 011B                      u270 0138                      u190 005E  
                    u271 0137                      u191 005D                      u255 00C2  
                    u185 004F                      _ISR 0139                      u287 0108  
                    fsr0 0004                     ?_ISR 0070                     STR_1 014F  
                   _RCIF 0065                     i1l54 0142                     _main 00E8  
                   btemp 007E                     start 000C                    ??_ISR 0070  
        __end_of___aldiv 00B0                    ?_main 0070                    i1l670 0141  
                  i1l666 0139                    i1l668 013F                    _RCREG 001A  
                  u14_20 013F                    u14_21 013E                    _SPBRG 0099  
                  _TRISD 0088                    _TXREG 0019                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 0112                   ??_main 002E                ??___aldiv 007A  
       __end_of_initUART 00E8                   saved_w 007E         initUART@baudRate 0026  
__end_of__initialization 000F           __pcstackCOMMON 0070               __pmaintext 00E8  
             __pintentry 0004               __stringtab 0149                ?_initUART 0026  
                ___aldiv 0013                  __ptext1 00B0                  __ptext2 0013  
                __ptext3 0112                  __ptext4 0139          SendUARTString@i 0072  
       ___aldiv@dividend 0076     end_of_initialization 000F               ??_initUART 002A  
              _RCSTAbits 0018         ___aldiv@quotient 0022                _TRISCbits 0087  
              _TXSTAbits 0098      start_initialization 000F              __end_of_ISR 0149  
         _SendUARTString 0112                ___latbits 0002            __pcstackBANK0 0020  
 __end_of_SendUARTString 0139                 ?___aldiv 0072                __pstrings 0149  
      SendUARTString@str 0074          ?_SendUARTString 0070          ___aldiv@divisor 0072  
      interrupt_function 0004          ___aldiv@counter 0020                 _PIE1bits 008C  
               _PIR1bits 000C              __stringbase 014E       __end_of__stringtab 014F  
               _initUART 00B0               _INTCONbits 000B                 intlevel1 0000  
              stringcode 0149         ??_SendUARTString 0072                 stringdir 0149  
               stringtab 0149             ___aldiv@sign 0021  
