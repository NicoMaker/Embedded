

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 02 14:44:20 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 22/03/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     0091                     	;# 
   102     0092                     	;# 
   103     0093                     	;# 
   104     0094                     	;# 
   105     0098                     	;# 
   106     0099                     	;# 
   107     009C                     	;# 
   108     009D                     	;# 
   109     009E                     	;# 
   110     009F                     	;# 
   111     010C                     	;# 
   112     010D                     	;# 
   113     010E                     	;# 
   114     010F                     	;# 
   115     018C                     	;# 
   116     018D                     	;# 
   117     0000                     	;# 
   118     0001                     	;# 
   119     0002                     	;# 
   120     0003                     	;# 
   121     0004                     	;# 
   122     0005                     	;# 
   123     0006                     	;# 
   124     0007                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     000C                     	;# 
   130     000D                     	;# 
   131     000E                     	;# 
   132     000E                     	;# 
   133     000F                     	;# 
   134     0010                     	;# 
   135     0011                     	;# 
   136     0012                     	;# 
   137     0013                     	;# 
   138     0014                     	;# 
   139     0015                     	;# 
   140     0015                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001B                     	;# 
   147     001B                     	;# 
   148     001C                     	;# 
   149     001D                     	;# 
   150     001E                     	;# 
   151     001F                     	;# 
   152     0081                     	;# 
   153     0085                     	;# 
   154     0086                     	;# 
   155     0087                     	;# 
   156     0088                     	;# 
   157     0089                     	;# 
   158     008C                     	;# 
   159     008D                     	;# 
   160     008E                     	;# 
   161     0091                     	;# 
   162     0092                     	;# 
   163     0093                     	;# 
   164     0094                     	;# 
   165     0098                     	;# 
   166     0099                     	;# 
   167     009C                     	;# 
   168     009D                     	;# 
   169     009E                     	;# 
   170     009F                     	;# 
   171     010C                     	;# 
   172     010D                     	;# 
   173     010E                     	;# 
   174     010F                     	;# 
   175     018C                     	;# 
   176     018D                     	;# 
   177                           
   178                           	psect	strings
   179     0295                     __pstrings:
   180     0295                     stringtab:
   181     0295                     __stringtab:
   182                           
   183                           ;	String table - string pointers are 1 byte each
   184     0295  1BFF               	btfsc	btemp+1,7
   185     0296  2A9F               	ljmp	stringcode
   186     0297  1383               	bcf	3,7
   187     0298  187F               	btfsc	btemp+1,0
   188     0299  1783               	bsf	3,7
   189     029A  0800               	movf	0,w
   190     029B  0A84               	incf	4,f
   191     029C  1903               	skipnz
   192     029D  0AFF               	incf	btemp+1,f
   193     029E  0008               	return
   194     029F                     stringcode:
   195     029F                     stringdir:
   196     029F  3002               	movlw	high stringdir
   197     02A0  008A               	movwf	10
   198     02A1  0804               	movf	4,w
   199     02A2  0A84               	incf	4,f
   200     02A3  0782               	addwf	2,f
   201     02A4                     __stringbase:
   202     02A4  3400               	retlw	0
   203     02A5                     __end_of__stringtab:
   204     02A5                     _columnConfig:
   205     02A5  34FE               	retlw	254
   206     02A6  34FD               	retlw	253
   207     02A7  34FB               	retlw	251
   208     02A8                     __end_of_columnConfig:
   209     001A                     _RCREG	set	26
   210     0019                     _TXREG	set	25
   211     000C                     _PIR1bits	set	12
   212     000B                     _INTCONbits	set	11
   213     0018                     _RCSTAbits	set	24
   214     0005                     _PORTA	set	5
   215     0006                     _PORTB	set	6
   216     0008                     _PORTD	set	8
   217     0009                     _PORTEbits	set	9
   218     0065                     _RCIF	set	101
   219     008C                     _PIE1bits	set	140
   220     0099                     _SPBRG	set	153
   221     0098                     _TXSTAbits	set	152
   222     0087                     _TRISCbits	set	135
   223     0086                     _TRISB	set	134
   224     0089                     _TRISE	set	137
   225     0088                     _TRISD	set	136
   226     0085                     _TRISA	set	133
   227     009F                     _ADCON1	set	159
   228     02A8                     STR_15:
   229     02A8  3454               	retlw	84	;'T'
   230     02A9  3452               	retlw	82	;'R'
   231     02AA  3449               	retlw	73	;'I'
   232     02AB  3453               	retlw	83	;'S'
   233     02AC  3441               	retlw	65	;'A'
   234     02AD  3400               	retlw	0
   235     02AE                     STR_14:
   236     02AE  3454               	retlw	84	;'T'
   237     02AF  3452               	retlw	82	;'R'
   238     02B0  3449               	retlw	73	;'I'
   239     02B1  3453               	retlw	83	;'S'
   240     02B2  3442               	retlw	66	;'B'
   241     02B3  3400               	retlw	0
   242     02B4                     STR_1:
   243     02B4  3463               	retlw	99	;'c'
   244     02B5  3469               	retlw	105	;'i'
   245     02B6  3461               	retlw	97	;'a'
   246     02B7  346F               	retlw	111	;'o'
   247     02B8  3400               	retlw	0
   248     02B9                     STR_13:
   249     02B9  3423               	retlw	35	;'#'
   250     02BA  3400               	retlw	0
   251     02BB                     STR_11:
   252     02BB  342A               	retlw	42	;'*'
   253     02BC  3400               	retlw	0
   254     02BD                     STR_12:
   255     02BD  3430               	retlw	48	;'0'
   256     02BE  3400               	retlw	0
   257     02BF                     STR_2:
   258     02BF  3431               	retlw	49	;'1'
   259     02C0  3400               	retlw	0
   260     02C1                     STR_3:
   261     02C1  3432               	retlw	50	;'2'
   262     02C2  3400               	retlw	0
   263     02C3                     STR_4:
   264     02C3  3433               	retlw	51	;'3'
   265     02C4  3400               	retlw	0
   266     02C5                     STR_5:
   267     02C5  3434               	retlw	52	;'4'
   268     02C6  3400               	retlw	0
   269     02C7                     STR_6:
   270     02C7  3435               	retlw	53	;'5'
   271     02C8  3400               	retlw	0
   272     02C9                     STR_7:
   273     02C9  3436               	retlw	54	;'6'
   274     02CA  3400               	retlw	0
   275     02CB                     STR_8:
   276     02CB  3437               	retlw	55	;'7'
   277     02CC  3400               	retlw	0
   278     02CD                     STR_9:
   279     02CD  3438               	retlw	56	;'8'
   280     02CE  3400               	retlw	0
   281     02CF                     STR_10:
   282     02CF  3439               	retlw	57	;'9'
   283     02D0  3400               	retlw	0
   284                           
   285                           	psect	cinit
   286     0013                     start_initialization:	
   287                           ; #config settings
   288                           
   289     0013                     __initialization:
   290                           
   291                           ; Clear objects allocated to COMMON
   292     0013  01F6               	clrf	__pbssCOMMON& (0+127)
   293     0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   294     0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   295     0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   296                           
   297                           ; Clear objects allocated to BANK0
   298     0017  1283               	bcf	3,5	;RP0=0, select bank0
   299     0018  1303               	bcf	3,6	;RP1=0, select bank0
   300     0019  01B8               	clrf	__pbssBANK0& (0+127)
   301     001A  01B9               	clrf	(__pbssBANK0+1)& (0+127)
   302     001B  01BA               	clrf	(__pbssBANK0+2)& (0+127)
   303     001C  01BB               	clrf	(__pbssBANK0+3)& (0+127)
   304     001D  01BC               	clrf	(__pbssBANK0+4)& (0+127)
   305     001E  01BD               	clrf	(__pbssBANK0+5)& (0+127)
   306     001F  01BE               	clrf	(__pbssBANK0+6)& (0+127)
   307     0020  01BF               	clrf	(__pbssBANK0+7)& (0+127)
   308     0021  01C0               	clrf	(__pbssBANK0+8)& (0+127)
   309     0022  01C1               	clrf	(__pbssBANK0+9)& (0+127)
   310     0023                     end_of_initialization:	
   311                           ;End of C runtime variable initialization code
   312                           
   313     0023                     __end_of__initialization:
   314     0023  0183               	clrf	3
   315     0024  120A  118A  2827   	ljmp	_main	;jump to C main() function
   316                           
   317                           	psect	bssCOMMON
   318     0076                     __pbssCOMMON:
   319     0076                     _endsend:
   320     0076                     	ds	1
   321     0077                     _index:
   322     0077                     	ds	1
   323     0078                     _bottone_premuto:
   324     0078                     	ds	1
   325     0079                     _x:
   326     0079                     	ds	1
   327                           
   328                           	psect	bssBANK0
   329     0038                     __pbssBANK0:
   330     0038                     _string:
   331     0038                     	ds	10
   332                           
   333                           	psect	cstackCOMMON
   334     0070                     __pcstackCOMMON:
   335     0070                     ?_initLCD:
   336     0070                     ?_buttonMatrix:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ?_SendUARTString:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_main:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ?_ISR:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ??_ISR:	
   349                           ; 1 bytes @ 0x0
   350                           
   351                           
   352                           ; 1 bytes @ 0x0
   353     0070                     	ds	4
   354     0074                     ?_sendLCD:
   355     0074                     ??_buttonMatrix:	
   356                           ; 1 bytes @ 0x4
   357                           
   358     0074                     ??_SendUARTString:	
   359                           ; 1 bytes @ 0x4
   360                           
   361     0074                     ??___aldiv:	
   362                           ; 1 bytes @ 0x4
   363                           
   364     0074                     sendLCD@rs:	
   365                           ; 1 bytes @ 0x4
   366                           
   367                           
   368                           ; 1 bytes @ 0x4
   369     0074                     	ds	1
   370     0075                     sendLCD@dato:
   371                           
   372                           ; 1 bytes @ 0x5
   373     0075                     	ds	1
   374     0076                     ??_printStringLCD:
   375                           
   376                           	psect	cstackBANK0
   377     0020                     __pcstackBANK0:	
   378                           ; 1 bytes @ 0x6
   379                           
   380     0020                     ??_sendLCD:
   381     0020                     ?___aldiv:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0020                     SendUARTString@i:	
   385                           ; 4 bytes @ 0x0
   386                           
   387     0020                     ___aldiv@divisor:	
   388                           ; 2 bytes @ 0x0
   389                           
   390                           
   391                           ; 4 bytes @ 0x0
   392     0020                     	ds	2
   393     0022                     ??_initLCD:
   394     0022                     ?_printStringLCD:	
   395                           ; 1 bytes @ 0x2
   396                           
   397     0022                     SendUARTString@str:	
   398                           ; 1 bytes @ 0x2
   399                           
   400     0022                     printStringLCD@s:	
   401                           ; 1 bytes @ 0x2
   402                           
   403                           
   404                           ; 2 bytes @ 0x2
   405     0022                     	ds	1
   406     0023                     buttonMatrix@read:
   407                           
   408                           ; 1 bytes @ 0x3
   409     0023                     	ds	1
   410     0024                     printStringLCD@i:
   411     0024                     buttonMatrix@k:	
   412                           ; 1 bytes @ 0x4
   413                           
   414     0024                     ___aldiv@dividend:	
   415                           ; 1 bytes @ 0x4
   416                           
   417                           
   418                           ; 4 bytes @ 0x4
   419     0024                     	ds	1
   420     0025                     buttonMatrix@col:
   421                           
   422                           ; 1 bytes @ 0x5
   423     0025                     	ds	1
   424     0026                     buttonMatrix@row:
   425                           
   426                           ; 1 bytes @ 0x6
   427     0026                     	ds	2
   428     0028                     ___aldiv@counter:
   429                           
   430                           ; 1 bytes @ 0x8
   431     0028                     	ds	1
   432     0029                     ___aldiv@sign:
   433                           
   434                           ; 1 bytes @ 0x9
   435     0029                     	ds	1
   436     002A                     ___aldiv@quotient:
   437                           
   438                           ; 4 bytes @ 0xA
   439     002A                     	ds	4
   440     002E                     ?_initUART:
   441     002E                     initUART@baudRate:	
   442                           ; 1 bytes @ 0xE
   443                           
   444                           
   445                           ; 4 bytes @ 0xE
   446     002E                     	ds	4
   447     0032                     ??_initUART:
   448                           
   449                           ; 1 bytes @ 0x12
   450     0032                     	ds	4
   451     0036                     ??_main:
   452                           
   453                           ; 1 bytes @ 0x16
   454     0036                     	ds	2
   455                           
   456                           	psect	maintext
   457     0027                     __pmaintext:	
   458 ;;
   459 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   460 ;;
   461 ;; *************** function _main *****************
   462 ;; Defined at:
   463 ;;		line 57 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : B00/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   477 ;;      Params:         0       0       0       0       0
   478 ;;      Locals:         0       0       0       0       0
   479 ;;      Temps:          0       2       0       0       0
   480 ;;      Totals:         0       2       0       0       0
   481 ;;Total ram usage:        2 bytes
   482 ;; Hardware stack levels required when called: 4
   483 ;; This function calls:
   484 ;;		_SendUARTString
   485 ;;		_buttonMatrix
   486 ;;		_initLCD
   487 ;;		_initUART
   488 ;;		_printStringLCD
   489 ;;		_sendLCD
   490 ;; This function is called by:
   491 ;;		Startup code after reset
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495     0027                     _main:	
   496                           ;psect for function _main
   497                           
   498     0027                     l1376:	
   499                           ;incstack = 0
   500                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   501                           
   502                           
   503                           ;main.c: 58:     initLCD();
   504     0027  120A  118A  2234  120A  118A  	fcall	_initLCD
   505                           
   506                           ;main.c: 59:     initUART(9600);
   507     002C  3000               	movlw	0
   508     002D  1283               	bcf	3,5	;RP0=0, select bank0
   509     002E  1303               	bcf	3,6	;RP1=0, select bank0
   510     002F  00B1               	movwf	initUART@baudRate+3
   511     0030  3000               	movlw	0
   512     0031  00B0               	movwf	initUART@baudRate+2
   513     0032  3025               	movlw	37
   514     0033  00AF               	movwf	initUART@baudRate+1
   515     0034  3080               	movlw	128
   516     0035  00AE               	movwf	initUART@baudRate
   517     0036  120A  118A  22D1  120A  118A  	fcall	_initUART
   518     003B                     l1378:
   519                           
   520                           ;main.c: 61:     printStringLCD("ciao");
   521     003B  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   522     003C  1283               	bcf	3,5	;RP0=0, select bank0
   523     003D  1303               	bcf	3,6	;RP1=0, select bank0
   524     003E  00A2               	movwf	printStringLCD@s
   525     003F  3080               	movlw	128
   526     0040  00A3               	movwf	printStringLCD@s+1
   527     0041  120A  118A  230B  120A  118A  	fcall	_printStringLCD
   528     0046                     l1380:
   529                           
   530                           ;main.c: 62:     sendLCD(0xC0, 0);
   531     0046  01F4               	clrf	sendLCD@rs
   532     0047  30C0               	movlw	192
   533     0048  120A  118A  239C  120A  118A  	fcall	_sendLCD
   534     004D                     l1382:
   535                           
   536                           ;main.c: 64:     ADCON1 = 0x06;
   537     004D  3006               	movlw	6
   538     004E  1683               	bsf	3,5	;RP0=1, select bank1
   539     004F  1303               	bcf	3,6	;RP1=0, select bank1
   540     0050  009F               	movwf	31	;volatile
   541     0051                     l1384:
   542                           
   543                           ;main.c: 65:     TRISA = 0x20;
   544     0051  3020               	movlw	32
   545     0052  0085               	movwf	5	;volatile
   546     0053                     l1386:
   547                           
   548                           ;main.c: 68:         TRISD = 0x00;
   549     0053  1683               	bsf	3,5	;RP0=1, select bank1
   550     0054  1303               	bcf	3,6	;RP1=0, select bank1
   551     0055  0188               	clrf	8	;volatile
   552     0056                     l1388:
   553                           
   554                           ;main.c: 69:         if (endsend) {
   555     0056  0876               	movf	_endsend,w
   556     0057  1903               	btfsc	3,2
   557     0058  285A               	goto	u701
   558     0059  285B               	goto	u700
   559     005A                     u701:
   560     005A  2868               	goto	l1394
   561     005B                     u700:
   562     005B                     l1390:
   563                           
   564                           ;main.c: 70:             endsend = 0;
   565     005B  01F6               	clrf	_endsend
   566                           
   567                           ;main.c: 71:             index = 0;
   568     005C  01F7               	clrf	_index
   569     005D                     l1392:
   570                           
   571                           ;main.c: 72:             printStringLCD(string);
   572     005D  3038               	movlw	(low (_string| 0))& (0+255)
   573     005E  1283               	bcf	3,5	;RP0=0, select bank0
   574     005F  1303               	bcf	3,6	;RP1=0, select bank0
   575     0060  00A2               	movwf	printStringLCD@s
   576     0061  3000               	movlw	0
   577     0062  00A3               	movwf	printStringLCD@s+1
   578     0063  120A  118A  230B  120A  118A  	fcall	_printStringLCD
   579     0068                     l1394:
   580                           
   581                           ;main.c: 74:         x = buttonMatrix();
   582     0068  120A  118A  21A1  120A  118A  	fcall	_buttonMatrix
   583     006D  00F9               	movwf	_x
   584     006E                     l1396:
   585                           
   586                           ;main.c: 75:         if (x == 99) {
   587     006E  3063               	movlw	99
   588     006F  0679               	xorwf	_x,w
   589     0070  1D03               	btfss	3,2
   590     0071  2873               	goto	u711
   591     0072  2874               	goto	u710
   592     0073                     u711:
   593     0073  2876               	goto	l1400
   594     0074                     u710:
   595     0074                     l1398:
   596                           
   597                           ;main.c: 76:             bottone_premuto = 0;
   598     0074  01F8               	clrf	_bottone_premuto
   599                           
   600                           ;main.c: 77:             continue;
   601     0075  2853               	goto	l1386
   602     0076                     l1400:
   603                           
   604                           ;main.c: 79:         if (x == 55)
   605     0076  3037               	movlw	55
   606     0077  0679               	xorwf	_x,w
   607     0078  1D03               	btfss	3,2
   608     0079  287B               	goto	u721
   609     007A  287C               	goto	u720
   610     007B                     u721:
   611     007B  28D1               	goto	l1430
   612     007C                     u720:
   613     007C  2853               	goto	l1386
   614     007D                     l1404:
   615                           
   616                           ;main.c: 84:                 SendUARTString("1");
   617     007D  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   618     007E  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   619                           
   620                           ;main.c: 85:                 break;
   621     0083  2853               	goto	l1386
   622     0084                     l1406:
   623                           
   624                           ;main.c: 87:                 SendUARTString("2");
   625     0084  301D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   626     0085  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   627                           
   628                           ;main.c: 88:                 break;
   629     008A  2853               	goto	l1386
   630     008B                     l1408:
   631                           
   632                           ;main.c: 90:                 SendUARTString("3");
   633     008B  301F               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   634     008C  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   635                           
   636                           ;main.c: 91:                 break;
   637     0091  2853               	goto	l1386
   638     0092                     l1410:
   639                           
   640                           ;main.c: 93:                 SendUARTString("4");
   641     0092  3021               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   642     0093  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   643                           
   644                           ;main.c: 94:                 break;
   645     0098  2853               	goto	l1386
   646     0099                     l1412:
   647                           
   648                           ;main.c: 96:                 SendUARTString("5");
   649     0099  3023               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   650     009A  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   651                           
   652                           ;main.c: 97:                 break;
   653     009F  2853               	goto	l1386
   654     00A0                     l1414:
   655                           
   656                           ;main.c: 99:                 SendUARTString("6");
   657     00A0  3025               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   658     00A1  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   659                           
   660                           ;main.c: 100:                 break;
   661     00A6  2853               	goto	l1386
   662     00A7                     l1416:
   663                           
   664                           ;main.c: 102:                 SendUARTString("7");
   665     00A7  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   666     00A8  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   667                           
   668                           ;main.c: 103:                 break;
   669     00AD  2853               	goto	l1386
   670     00AE                     l1418:
   671                           
   672                           ;main.c: 105:                 SendUARTString("8");
   673     00AE  3029               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   674     00AF  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   675                           
   676                           ;main.c: 106:                 break;
   677     00B4  2853               	goto	l1386
   678     00B5                     l1420:
   679                           
   680                           ;main.c: 108:                 SendUARTString("9");
   681     00B5  302B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
   682     00B6  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   683                           
   684                           ;main.c: 109:                 break;
   685     00BB  2853               	goto	l1386
   686     00BC                     l1422:
   687                           
   688                           ;main.c: 111:                 SendUARTString("*");
   689     00BC  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
   690     00BD  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   691                           
   692                           ;main.c: 112:                 break;
   693     00C2  2853               	goto	l1386
   694     00C3                     l1424:
   695                           
   696                           ;main.c: 114:                 SendUARTString("0");
   697     00C3  3019               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
   698     00C4  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   699                           
   700                           ;main.c: 115:                 break;
   701     00C9  2853               	goto	l1386
   702     00CA                     l1426:
   703                           
   704                           ;main.c: 117:                 SendUARTString("#");
   705     00CA  3015               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
   706     00CB  120A  118A  2342  120A  118A  	fcall	_SendUARTString
   707                           
   708                           ;main.c: 118:                 break;
   709     00D0  2853               	goto	l1386
   710     00D1                     l1430:
   711     00D1  0879               	movf	_x,w
   712     00D2  1283               	bcf	3,5	;RP0=0, select bank0
   713     00D3  1303               	bcf	3,6	;RP1=0, select bank0
   714     00D4  00B6               	movwf	??_main
   715     00D5  01B7               	clrf	??_main+1
   716                           
   717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   718                           ; Switch size 1, requested type "simple"
   719                           ; Number of cases is 1, Range of values is 0 to 0
   720                           ; switch strategies available:
   721                           ; Name         Instructions Cycles
   722                           ; simple_byte            4     3 (average)
   723                           ; direct_byte           11     8 (fixed)
   724                           ; jumptable            260     6 (fixed)
   725                           ;	Chosen strategy is simple_byte
   726     00D6  0837               	movf	??_main+1,w
   727     00D7  3A00               	xorlw	0	; case 0
   728     00D8  1903               	skipnz
   729     00D9  28DB               	goto	l1456
   730     00DA  2853               	goto	l1386
   731     00DB                     l1456:
   732                           
   733                           ; Switch size 1, requested type "simple"
   734                           ; Number of cases is 12, Range of values is 0 to 11
   735                           ; switch strategies available:
   736                           ; Name         Instructions Cycles
   737                           ; simple_byte           37    19 (average)
   738                           ; direct_byte           44     8 (fixed)
   739                           ; jumptable            260     6 (fixed)
   740                           ;	Chosen strategy is simple_byte
   741     00DB  0836               	movf	??_main,w
   742     00DC  3A00               	xorlw	0	; case 0
   743     00DD  1903               	skipnz
   744     00DE  28BC               	goto	l1422
   745     00DF  3A01               	xorlw	1	; case 1
   746     00E0  1903               	skipnz
   747     00E1  28A7               	goto	l1416
   748     00E2  3A03               	xorlw	3	; case 2
   749     00E3  1903               	skipnz
   750     00E4  2892               	goto	l1410
   751     00E5  3A01               	xorlw	1	; case 3
   752     00E6  1903               	skipnz
   753     00E7  287D               	goto	l1404
   754     00E8  3A07               	xorlw	7	; case 4
   755     00E9  1903               	skipnz
   756     00EA  28C3               	goto	l1424
   757     00EB  3A01               	xorlw	1	; case 5
   758     00EC  1903               	skipnz
   759     00ED  28AE               	goto	l1418
   760     00EE  3A03               	xorlw	3	; case 6
   761     00EF  1903               	skipnz
   762     00F0  2899               	goto	l1412
   763     00F1  3A01               	xorlw	1	; case 7
   764     00F2  1903               	skipnz
   765     00F3  2884               	goto	l1406
   766     00F4  3A0F               	xorlw	15	; case 8
   767     00F5  1903               	skipnz
   768     00F6  28CA               	goto	l1426
   769     00F7  3A01               	xorlw	1	; case 9
   770     00F8  1903               	skipnz
   771     00F9  28B5               	goto	l1420
   772     00FA  3A03               	xorlw	3	; case 10
   773     00FB  1903               	skipnz
   774     00FC  28A0               	goto	l1414
   775     00FD  3A01               	xorlw	1	; case 11
   776     00FE  1903               	skipnz
   777     00FF  288B               	goto	l1408
   778     0100  2853               	goto	l1386
   779     0101  120A  118A  2810   	ljmp	start
   780     0104                     __end_of_main:
   781                           
   782                           	psect	text1
   783     030B                     __ptext1:	
   784 ;; *************** function _printStringLCD *****************
   785 ;; Defined at:
   786 ;;		line 156 in file "main.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  s               2    2[BANK0 ] PTR unsigned char 
   789 ;;		 -> string(10), STR_1(5), 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  i               1    4[BANK0 ] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   801 ;;      Params:         0       2       0       0       0
   802 ;;      Locals:         0       1       0       0       0
   803 ;;      Temps:          0       0       0       0       0
   804 ;;      Totals:         0       3       0       0       0
   805 ;;Total ram usage:        3 bytes
   806 ;; Hardware stack levels used: 1
   807 ;; Hardware stack levels required when called: 2
   808 ;; This function calls:
   809 ;;		_sendLCD
   810 ;; This function is called by:
   811 ;;		_main
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815     030B                     _printStringLCD:	
   816                           ;psect for function _printStringLCD
   817                           
   818     030B                     l1300:	
   819                           ;incstack = 0
   820                           ; Regs used in _printStringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   821                           
   822                           
   823                           ;main.c: 157:     if (bottone_premuto)
   824     030B  0878               	movf	_bottone_premuto,w
   825     030C  1903               	btfsc	3,2
   826     030D  2B0F               	goto	u611
   827     030E  2B10               	goto	u610
   828     030F                     u611:
   829     030F  2B11               	goto	l1304
   830     0310                     u610:
   831     0310  2B41               	goto	l99
   832     0311                     l1304:
   833                           
   834                           ;main.c: 159:     char i = 0;
   835     0311  1283               	bcf	3,5	;RP0=0, select bank0
   836     0312  1303               	bcf	3,6	;RP1=0, select bank0
   837     0313  01A4               	clrf	printStringLCD@i
   838                           
   839                           ;main.c: 160:     while (s[i] != '\0') {
   840     0314  2B2E               	goto	l1310
   841     0315                     l1306:
   842                           
   843                           ;main.c: 161:         sendLCD(s[i++], 1);
   844     0315  01F4               	clrf	sendLCD@rs
   845     0316  0AF4               	incf	sendLCD@rs,f
   846     0317  0824               	movf	printStringLCD@i,w
   847     0318  0722               	addwf	printStringLCD@s,w
   848     0319  0084               	movwf	4
   849     031A  0823               	movf	printStringLCD@s+1,w
   850     031B  1803               	skipnc
   851     031C  0A23               	incf	printStringLCD@s+1,w
   852     031D  00FF               	movwf	btemp+1
   853     031E  120A  118A  2295  120A  118A  	fcall	stringtab
   854     0323  120A  118A  239C  120A  118A  	fcall	_sendLCD
   855     0328                     l1308:
   856     0328  3001               	movlw	1
   857     0329  00FF               	movwf	btemp+1
   858     032A  087F               	movf	btemp+1,w
   859     032B  1283               	bcf	3,5	;RP0=0, select bank0
   860     032C  1303               	bcf	3,6	;RP1=0, select bank0
   861     032D  07A4               	addwf	printStringLCD@i,f
   862     032E                     l1310:
   863                           
   864                           ;main.c: 160:     while (s[i] != '\0') {
   865     032E  0824               	movf	printStringLCD@i,w
   866     032F  0722               	addwf	printStringLCD@s,w
   867     0330  0084               	movwf	4
   868     0331  0823               	movf	printStringLCD@s+1,w
   869     0332  1803               	skipnc
   870     0333  0A23               	incf	printStringLCD@s+1,w
   871     0334  00FF               	movwf	btemp+1
   872     0335  120A  118A  2295  120A  118A  	fcall	stringtab
   873     033A  3A00               	xorlw	0
   874     033B  1D03               	skipz
   875     033C  2B3E               	goto	u621
   876     033D  2B3F               	goto	u620
   877     033E                     u621:
   878     033E  2B15               	goto	l1306
   879     033F                     u620:
   880     033F                     l102:
   881                           
   882                           ;main.c: 163:     bottone_premuto = 1;
   883     033F  01F8               	clrf	_bottone_premuto
   884     0340  0AF8               	incf	_bottone_premuto,f
   885     0341                     l99:
   886     0341  0008               	return
   887     0342                     __end_of_printStringLCD:
   888                           
   889                           	psect	text2
   890     02D1                     __ptext2:	
   891 ;; *************** function _initUART *****************
   892 ;; Defined at:
   893 ;;		line 203 in file "main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;  baudRate        4   14[BANK0 ] long 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   907 ;;      Params:         0       4       0       0       0
   908 ;;      Locals:         0       0       0       0       0
   909 ;;      Temps:          0       4       0       0       0
   910 ;;      Totals:         0       8       0       0       0
   911 ;;Total ram usage:        8 bytes
   912 ;; Hardware stack levels used: 1
   913 ;; Hardware stack levels required when called: 2
   914 ;; This function calls:
   915 ;;		___aldiv
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921     02D1                     _initUART:	
   922                           ;psect for function _initUART
   923                           
   924     02D1                     l1290:	
   925                           ;incstack = 0
   926                           ; Regs used in _initUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   927                           
   928                           
   929                           ;main.c: 204:     TRISCbits.TRISC7 = 1;
   930     02D1  1683               	bsf	3,5	;RP0=1, select bank1
   931     02D2  1303               	bcf	3,6	;RP1=0, select bank1
   932     02D3  1787               	bsf	7,7	;volatile
   933                           
   934                           ;main.c: 205:     TRISCbits.TRISC6 = 0;
   935     02D4  1307               	bcf	7,6	;volatile
   936                           
   937                           ;main.c: 207:     TXSTAbits.TXEN = 1;
   938     02D5  1698               	bsf	24,5	;volatile
   939                           
   940                           ;main.c: 208:     RCSTAbits.SPEN = 1;
   941     02D6  1283               	bcf	3,5	;RP0=0, select bank0
   942     02D7  1303               	bcf	3,6	;RP1=0, select bank0
   943     02D8  1798               	bsf	24,7	;volatile
   944                           
   945                           ;main.c: 209:     RCSTAbits.CREN = 1;
   946     02D9  1618               	bsf	24,4	;volatile
   947     02DA                     l1292:
   948                           
   949                           ;main.c: 210:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   950     02DA  082E               	movf	initUART@baudRate,w
   951     02DB  00B2               	movwf	??_initUART
   952     02DC  082F               	movf	initUART@baudRate+1,w
   953     02DD  00B3               	movwf	??_initUART+1
   954     02DE  0830               	movf	initUART@baudRate+2,w
   955     02DF  00B4               	movwf	??_initUART+2
   956     02E0  0831               	movf	initUART@baudRate+3,w
   957     02E1  00B5               	movwf	??_initUART+3
   958     02E2  3006               	movlw	6
   959     02E3                     u605:
   960     02E3  1003               	clrc
   961     02E4  0DB2               	rlf	??_initUART,f
   962     02E5  0DB3               	rlf	??_initUART+1,f
   963     02E6  0DB4               	rlf	??_initUART+2,f
   964     02E7  0DB5               	rlf	??_initUART+3,f
   965     02E8                     u600:
   966     02E8  3EFF               	addlw	-1
   967     02E9  1D03               	skipz
   968     02EA  2AE3               	goto	u605
   969     02EB  0835               	movf	??_initUART+3,w
   970     02EC  00A3               	movwf	___aldiv@divisor+3
   971     02ED  0834               	movf	??_initUART+2,w
   972     02EE  00A2               	movwf	___aldiv@divisor+2
   973     02EF  0833               	movf	??_initUART+1,w
   974     02F0  00A1               	movwf	___aldiv@divisor+1
   975     02F1  0832               	movf	??_initUART,w
   976     02F2  00A0               	movwf	___aldiv@divisor
   977     02F3  3000               	movlw	0
   978     02F4  00A7               	movwf	___aldiv@dividend+3
   979     02F5  307A               	movlw	122
   980     02F6  00A6               	movwf	___aldiv@dividend+2
   981     02F7  3012               	movlw	18
   982     02F8  00A5               	movwf	___aldiv@dividend+1
   983     02F9  3000               	movlw	0
   984     02FA  00A4               	movwf	___aldiv@dividend
   985     02FB  120A  118A  2104  120A  118A  	fcall	___aldiv
   986     0300  1283               	bcf	3,5	;RP0=0, select bank0
   987     0301  1303               	bcf	3,6	;RP1=0, select bank0
   988     0302  0820               	movf	?___aldiv,w
   989     0303  3EFF               	addlw	255
   990     0304  1683               	bsf	3,5	;RP0=1, select bank1
   991     0305  1303               	bcf	3,6	;RP1=0, select bank1
   992     0306  0099               	movwf	25	;volatile
   993     0307                     l1294:
   994                           
   995                           ;main.c: 212:     INTCONbits.GIE = 1;
   996     0307  178B               	bsf	11,7	;volatile
   997     0308                     l1296:
   998                           
   999                           ;main.c: 213:     INTCONbits.PEIE = 1;
  1000     0308  170B               	bsf	11,6	;volatile
  1001     0309                     l1298:
  1002                           
  1003                           ;main.c: 214:     PIE1bits.RCIE = 1;
  1004     0309  168C               	bsf	12,5	;volatile
  1005     030A                     l115:
  1006     030A  0008               	return
  1007     030B                     __end_of_initUART:
  1008                           
  1009                           	psect	text3
  1010     0104                     __ptext3:	
  1011 ;; *************** function ___aldiv *****************
  1012 ;; Defined at:
  1013 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  divisor         4    0[BANK0 ] long 
  1016 ;;  dividend        4    4[BANK0 ] long 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  quotient        4   10[BANK0 ] long 
  1019 ;;  sign            1    9[BANK0 ] unsigned char 
  1020 ;;  counter         1    8[BANK0 ] unsigned char 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  4    0[BANK0 ] long 
  1023 ;; Registers used:
  1024 ;;		wreg, status,2, status,0, btemp+1
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1030 ;;      Params:         0       8       0       0       0
  1031 ;;      Locals:         0       6       0       0       0
  1032 ;;      Temps:          1       0       0       0       0
  1033 ;;      Totals:         1      14       0       0       0
  1034 ;;Total ram usage:       15 bytes
  1035 ;; Hardware stack levels used: 1
  1036 ;; Hardware stack levels required when called: 1
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_initUART
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044     0104                     ___aldiv:	
  1045                           ;psect for function ___aldiv
  1046                           
  1047     0104                     l988:	
  1048                           ;incstack = 0
  1049                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1050                           
  1051     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1052     0105  1303               	bcf	3,6	;RP1=0, select bank0
  1053     0106  01A9               	clrf	___aldiv@sign
  1054     0107                     l990:
  1055     0107  1FA3               	btfss	___aldiv@divisor+3,7
  1056     0108  290A               	goto	u321
  1057     0109  290B               	goto	u320
  1058     010A                     u321:
  1059     010A  2918               	goto	l283
  1060     010B                     u320:
  1061     010B                     l992:
  1062     010B  09A0               	comf	___aldiv@divisor,f
  1063     010C  09A1               	comf	___aldiv@divisor+1,f
  1064     010D  09A2               	comf	___aldiv@divisor+2,f
  1065     010E  09A3               	comf	___aldiv@divisor+3,f
  1066     010F  0AA0               	incf	___aldiv@divisor,f
  1067     0110  1903               	skipnz
  1068     0111  0AA1               	incf	___aldiv@divisor+1,f
  1069     0112  1903               	skipnz
  1070     0113  0AA2               	incf	___aldiv@divisor+2,f
  1071     0114  1903               	skipnz
  1072     0115  0AA3               	incf	___aldiv@divisor+3,f
  1073     0116  01A9               	clrf	___aldiv@sign
  1074     0117  0AA9               	incf	___aldiv@sign,f
  1075     0118                     l283:
  1076     0118  1FA7               	btfss	___aldiv@dividend+3,7
  1077     0119  291B               	goto	u331
  1078     011A  291C               	goto	u330
  1079     011B                     u331:
  1080     011B  292B               	goto	l998
  1081     011C                     u330:
  1082     011C                     l994:
  1083     011C  09A4               	comf	___aldiv@dividend,f
  1084     011D  09A5               	comf	___aldiv@dividend+1,f
  1085     011E  09A6               	comf	___aldiv@dividend+2,f
  1086     011F  09A7               	comf	___aldiv@dividend+3,f
  1087     0120  0AA4               	incf	___aldiv@dividend,f
  1088     0121  1903               	skipnz
  1089     0122  0AA5               	incf	___aldiv@dividend+1,f
  1090     0123  1903               	skipnz
  1091     0124  0AA6               	incf	___aldiv@dividend+2,f
  1092     0125  1903               	skipnz
  1093     0126  0AA7               	incf	___aldiv@dividend+3,f
  1094     0127                     l996:
  1095     0127  3001               	movlw	1
  1096     0128  00FF               	movwf	btemp+1
  1097     0129  087F               	movf	btemp+1,w
  1098     012A  06A9               	xorwf	___aldiv@sign,f
  1099     012B                     l998:
  1100     012B  3000               	movlw	0
  1101     012C  00AD               	movwf	___aldiv@quotient+3
  1102     012D  3000               	movlw	0
  1103     012E  00AC               	movwf	___aldiv@quotient+2
  1104     012F  3000               	movlw	0
  1105     0130  00AB               	movwf	___aldiv@quotient+1
  1106     0131  3000               	movlw	0
  1107     0132  00AA               	movwf	___aldiv@quotient
  1108     0133                     l1000:
  1109     0133  0823               	movf	___aldiv@divisor+3,w
  1110     0134  0422               	iorwf	___aldiv@divisor+2,w
  1111     0135  0421               	iorwf	___aldiv@divisor+1,w
  1112     0136  0420               	iorwf	___aldiv@divisor,w
  1113     0137  1903               	skipnz
  1114     0138  293A               	goto	u341
  1115     0139  293B               	goto	u340
  1116     013A                     u341:
  1117     013A  2988               	goto	l1022
  1118     013B                     u340:
  1119     013B                     l1002:
  1120     013B  01A8               	clrf	___aldiv@counter
  1121     013C  0AA8               	incf	___aldiv@counter,f
  1122     013D  294B               	goto	l1008
  1123     013E                     l1004:
  1124     013E  3001               	movlw	1
  1125     013F  00F4               	movwf	??___aldiv
  1126     0140                     u355:
  1127     0140  1003               	clrc
  1128     0141  0DA0               	rlf	___aldiv@divisor,f
  1129     0142  0DA1               	rlf	___aldiv@divisor+1,f
  1130     0143  0DA2               	rlf	___aldiv@divisor+2,f
  1131     0144  0DA3               	rlf	___aldiv@divisor+3,f
  1132     0145  0BF4               	decfsz	??___aldiv,f
  1133     0146  2940               	goto	u355
  1134     0147                     l1006:
  1135     0147  3001               	movlw	1
  1136     0148  00FF               	movwf	btemp+1
  1137     0149  087F               	movf	btemp+1,w
  1138     014A  07A8               	addwf	___aldiv@counter,f
  1139     014B                     l1008:
  1140     014B  1FA3               	btfss	___aldiv@divisor+3,7
  1141     014C  294E               	goto	u361
  1142     014D  294F               	goto	u360
  1143     014E                     u361:
  1144     014E  293E               	goto	l1004
  1145     014F                     u360:
  1146     014F                     l1010:
  1147     014F  3001               	movlw	1
  1148     0150  00F4               	movwf	??___aldiv
  1149     0151                     u375:
  1150     0151  1003               	clrc
  1151     0152  0DAA               	rlf	___aldiv@quotient,f
  1152     0153  0DAB               	rlf	___aldiv@quotient+1,f
  1153     0154  0DAC               	rlf	___aldiv@quotient+2,f
  1154     0155  0DAD               	rlf	___aldiv@quotient+3,f
  1155     0156  0BF4               	decfsz	??___aldiv,f
  1156     0157  2951               	goto	u375
  1157     0158                     l1012:
  1158     0158  0823               	movf	___aldiv@divisor+3,w
  1159     0159  0227               	subwf	___aldiv@dividend+3,w
  1160     015A  1D03               	skipz
  1161     015B  2966               	goto	u385
  1162     015C  0822               	movf	___aldiv@divisor+2,w
  1163     015D  0226               	subwf	___aldiv@dividend+2,w
  1164     015E  1D03               	skipz
  1165     015F  2966               	goto	u385
  1166     0160  0821               	movf	___aldiv@divisor+1,w
  1167     0161  0225               	subwf	___aldiv@dividend+1,w
  1168     0162  1D03               	skipz
  1169     0163  2966               	goto	u385
  1170     0164  0820               	movf	___aldiv@divisor,w
  1171     0165  0224               	subwf	___aldiv@dividend,w
  1172     0166                     u385:
  1173     0166  1C03               	skipc
  1174     0167  2969               	goto	u381
  1175     0168  296A               	goto	u380
  1176     0169                     u381:
  1177     0169  2979               	goto	l1018
  1178     016A                     u380:
  1179     016A                     l1014:
  1180     016A  0820               	movf	___aldiv@divisor,w
  1181     016B  02A4               	subwf	___aldiv@dividend,f
  1182     016C  0821               	movf	___aldiv@divisor+1,w
  1183     016D  1C03               	skipc
  1184     016E  0F21               	incfsz	___aldiv@divisor+1,w
  1185     016F  02A5               	subwf	___aldiv@dividend+1,f
  1186     0170  0822               	movf	___aldiv@divisor+2,w
  1187     0171  1C03               	skipc
  1188     0172  0F22               	incfsz	___aldiv@divisor+2,w
  1189     0173  02A6               	subwf	___aldiv@dividend+2,f
  1190     0174  0823               	movf	___aldiv@divisor+3,w
  1191     0175  1C03               	skipc
  1192     0176  0F23               	incfsz	___aldiv@divisor+3,w
  1193     0177  02A7               	subwf	___aldiv@dividend+3,f
  1194     0178                     l1016:
  1195     0178  142A               	bsf	___aldiv@quotient,0
  1196     0179                     l1018:
  1197     0179  3001               	movlw	1
  1198     017A                     u395:
  1199     017A  1003               	clrc
  1200     017B  0CA3               	rrf	___aldiv@divisor+3,f
  1201     017C  0CA2               	rrf	___aldiv@divisor+2,f
  1202     017D  0CA1               	rrf	___aldiv@divisor+1,f
  1203     017E  0CA0               	rrf	___aldiv@divisor,f
  1204     017F  3EFF               	addlw	-1
  1205     0180  1D03               	skipz
  1206     0181  297A               	goto	u395
  1207     0182                     l1020:
  1208     0182  3001               	movlw	1
  1209     0183  02A8               	subwf	___aldiv@counter,f
  1210     0184  1D03               	btfss	3,2
  1211     0185  2987               	goto	u401
  1212     0186  2988               	goto	u400
  1213     0187                     u401:
  1214     0187  294F               	goto	l1010
  1215     0188                     u400:
  1216     0188                     l1022:
  1217     0188  0829               	movf	___aldiv@sign,w
  1218     0189  1903               	btfsc	3,2
  1219     018A  298C               	goto	u411
  1220     018B  298D               	goto	u410
  1221     018C                     u411:
  1222     018C  2998               	goto	l1026
  1223     018D                     u410:
  1224     018D                     l1024:
  1225     018D  09AA               	comf	___aldiv@quotient,f
  1226     018E  09AB               	comf	___aldiv@quotient+1,f
  1227     018F  09AC               	comf	___aldiv@quotient+2,f
  1228     0190  09AD               	comf	___aldiv@quotient+3,f
  1229     0191  0AAA               	incf	___aldiv@quotient,f
  1230     0192  1903               	skipnz
  1231     0193  0AAB               	incf	___aldiv@quotient+1,f
  1232     0194  1903               	skipnz
  1233     0195  0AAC               	incf	___aldiv@quotient+2,f
  1234     0196  1903               	skipnz
  1235     0197  0AAD               	incf	___aldiv@quotient+3,f
  1236     0198                     l1026:
  1237     0198  082D               	movf	___aldiv@quotient+3,w
  1238     0199  00A3               	movwf	?___aldiv+3
  1239     019A  082C               	movf	___aldiv@quotient+2,w
  1240     019B  00A2               	movwf	?___aldiv+2
  1241     019C  082B               	movf	___aldiv@quotient+1,w
  1242     019D  00A1               	movwf	?___aldiv+1
  1243     019E  082A               	movf	___aldiv@quotient,w
  1244     019F  00A0               	movwf	?___aldiv
  1245     01A0                     l293:
  1246     01A0  0008               	return
  1247     01A1                     __end_of___aldiv:
  1248                           
  1249                           	psect	text4
  1250     0234                     __ptext4:	
  1251 ;; *************** function _initLCD *****************
  1252 ;; Defined at:
  1253 ;;		line 123 in file "main.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0
  1269 ;;      Temps:          0       2       0       0       0
  1270 ;;      Totals:         0       2       0       0       0
  1271 ;;Total ram usage:        2 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 2
  1274 ;; This function calls:
  1275 ;;		_sendLCD
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281     0234                     _initLCD:	
  1282                           ;psect for function _initLCD
  1283                           
  1284     0234                     l1262:	
  1285                           ;incstack = 0
  1286                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1287                           
  1288                           
  1289                           ;main.c: 124:     TRISD = 0x00;
  1290     0234  1683               	bsf	3,5	;RP0=1, select bank1
  1291     0235  1303               	bcf	3,6	;RP1=0, select bank1
  1292     0236  0188               	clrf	8	;volatile
  1293     0237                     l1264:
  1294                           
  1295                           ;main.c: 125:     TRISE &= ~0x06;
  1296     0237  30F9               	movlw	249
  1297     0238  00FF               	movwf	btemp+1
  1298     0239  087F               	movf	btemp+1,w
  1299     023A  0589               	andwf	9,f	;volatile
  1300     023B                     l1266:
  1301                           
  1302                           ;main.c: 127:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1303     023B  3034               	movlw	52
  1304     023C  1283               	bcf	3,5	;RP0=0, select bank0
  1305     023D  1303               	bcf	3,6	;RP1=0, select bank0
  1306     023E  00A3               	movwf	??_initLCD+1
  1307     023F  30F1               	movlw	241
  1308     0240  00A2               	movwf	??_initLCD
  1309     0241                     u737:
  1310     0241  0BA2               	decfsz	??_initLCD,f
  1311     0242  2A41               	goto	u737
  1312     0243  0BA3               	decfsz	??_initLCD+1,f
  1313     0244  2A41               	goto	u737
  1314     0245                     l1268:
  1315                           
  1316                           ;main.c: 128:     PORTEbits.RE1 = 1;
  1317     0245  1283               	bcf	3,5	;RP0=0, select bank0
  1318     0246  1303               	bcf	3,6	;RP1=0, select bank0
  1319     0247  1489               	bsf	9,1	;volatile
  1320     0248                     l1270:
  1321                           
  1322                           ;main.c: 129:     sendLCD(0x38, 0);
  1323     0248  01F4               	clrf	sendLCD@rs
  1324     0249  3038               	movlw	56
  1325     024A  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1326     024F                     l1272:
  1327                           
  1328                           ;main.c: 131:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1329     024F  300D               	movlw	13
  1330     0250  1283               	bcf	3,5	;RP0=0, select bank0
  1331     0251  1303               	bcf	3,6	;RP1=0, select bank0
  1332     0252  00A3               	movwf	??_initLCD+1
  1333     0253  30FB               	movlw	251
  1334     0254  00A2               	movwf	??_initLCD
  1335     0255                     u747:
  1336     0255  0BA2               	decfsz	??_initLCD,f
  1337     0256  2A55               	goto	u747
  1338     0257  0BA3               	decfsz	??_initLCD+1,f
  1339     0258  2A55               	goto	u747
  1340     0259                     l1274:
  1341                           
  1342                           ;main.c: 132:     sendLCD(0x38, 0);
  1343     0259  01F4               	clrf	sendLCD@rs
  1344     025A  3038               	movlw	56
  1345     025B  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1346     0260                     l1276:
  1347                           
  1348                           ;main.c: 134:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1349     0260  3003               	movlw	3
  1350     0261  1283               	bcf	3,5	;RP0=0, select bank0
  1351     0262  1303               	bcf	3,6	;RP1=0, select bank0
  1352     0263  00A3               	movwf	??_initLCD+1
  1353     0264  3097               	movlw	151
  1354     0265  00A2               	movwf	??_initLCD
  1355     0266                     u757:
  1356     0266  0BA2               	decfsz	??_initLCD,f
  1357     0267  2A66               	goto	u757
  1358     0268  0BA3               	decfsz	??_initLCD+1,f
  1359     0269  2A66               	goto	u757
  1360     026A                     l1278:
  1361                           
  1362                           ;main.c: 135:     sendLCD(0x38, 0);
  1363     026A  01F4               	clrf	sendLCD@rs
  1364     026B  3038               	movlw	56
  1365     026C  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1366     0271                     l1280:
  1367                           
  1368                           ;main.c: 137:     sendLCD(0x08, 0);
  1369     0271  01F4               	clrf	sendLCD@rs
  1370     0272  3008               	movlw	8
  1371     0273  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1372     0278                     l1282:
  1373                           
  1374                           ;main.c: 138:     sendLCD(0x0F, 0);
  1375     0278  01F4               	clrf	sendLCD@rs
  1376     0279  300F               	movlw	15
  1377     027A  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1378     027F                     l1284:
  1379                           
  1380                           ;main.c: 139:     sendLCD(0x01, 0);
  1381     027F  01F4               	clrf	sendLCD@rs
  1382     0280  3001               	movlw	1
  1383     0281  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1384     0286                     l1286:
  1385                           
  1386                           ;main.c: 140:     sendLCD(0x0E, 0);
  1387     0286  01F4               	clrf	sendLCD@rs
  1388     0287  300E               	movlw	14
  1389     0288  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1390     028D                     l1288:
  1391                           
  1392                           ;main.c: 141:     sendLCD(0x80, 0);
  1393     028D  01F4               	clrf	sendLCD@rs
  1394     028E  3080               	movlw	128
  1395     028F  120A  118A  239C  120A  118A  	fcall	_sendLCD
  1396     0294                     l92:
  1397     0294  0008               	return
  1398     0295                     __end_of_initLCD:
  1399                           
  1400                           	psect	text5
  1401     039C                     __ptext5:	
  1402 ;; *************** function _sendLCD *****************
  1403 ;; Defined at:
  1404 ;;		line 144 in file "main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  dato            1    wreg     unsigned char 
  1407 ;;  rs              1    4[COMMON] unsigned char 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  dato            1    5[COMMON] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1419 ;;      Params:         1       0       0       0       0
  1420 ;;      Locals:         1       0       0       0       0
  1421 ;;      Temps:          0       2       0       0       0
  1422 ;;      Totals:         2       2       0       0       0
  1423 ;;Total ram usage:        4 bytes
  1424 ;; Hardware stack levels used: 1
  1425 ;; Hardware stack levels required when called: 1
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;;		_initLCD
  1431 ;;		_printStringLCD
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435     039C                     _sendLCD:	
  1436                           ;psect for function _sendLCD
  1437                           
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _sendLCD: [wreg+status,0]
  1441                           ;sendLCD@dato stored from wreg
  1442     039C  00F5               	movwf	sendLCD@dato
  1443     039D                     l1236:
  1444                           
  1445                           ;main.c: 145:     PORTEbits.RE1 = 1;
  1446     039D  1283               	bcf	3,5	;RP0=0, select bank0
  1447     039E  1303               	bcf	3,6	;RP1=0, select bank0
  1448     039F  1489               	bsf	9,1	;volatile
  1449     03A0                     l1238:
  1450                           
  1451                           ;main.c: 146:     PORTD = dato;
  1452     03A0  0875               	movf	sendLCD@dato,w
  1453     03A1  0088               	movwf	8	;volatile
  1454     03A2                     l1240:
  1455                           
  1456                           ;main.c: 147:     PORTEbits.RE2 = rs;
  1457     03A2  0C74               	rrf	sendLCD@rs,w
  1458     03A3  1C03               	skipc
  1459     03A4  1109               	bcf	9,2	;volatile
  1460     03A5  1803               	skipnc
  1461     03A6  1509               	bsf	9,2	;volatile
  1462     03A7                     l1242:
  1463                           
  1464                           ;main.c: 148:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1465     03A7  3008               	movlw	8
  1466     03A8  1283               	bcf	3,5	;RP0=0, select bank0
  1467     03A9  1303               	bcf	3,6	;RP1=0, select bank0
  1468     03AA  00A1               	movwf	??_sendLCD+1
  1469     03AB  30C9               	movlw	201
  1470     03AC  00A0               	movwf	??_sendLCD
  1471     03AD                     u767:
  1472     03AD  0BA0               	decfsz	??_sendLCD,f
  1473     03AE  2BAD               	goto	u767
  1474     03AF  0BA1               	decfsz	??_sendLCD+1,f
  1475     03B0  2BAD               	goto	u767
  1476     03B1                     l1244:
  1477                           
  1478                           ;main.c: 150:     PORTEbits.RE1 = 0;
  1479     03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1480     03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1481     03B3  1089               	bcf	9,1	;volatile
  1482     03B4                     l1246:
  1483                           
  1484                           ;main.c: 151:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1485     03B4  3008               	movlw	8
  1486     03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1487     03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1488     03B7  00A1               	movwf	??_sendLCD+1
  1489     03B8  30C9               	movlw	201
  1490     03B9  00A0               	movwf	??_sendLCD
  1491     03BA                     u777:
  1492     03BA  0BA0               	decfsz	??_sendLCD,f
  1493     03BB  2BBA               	goto	u777
  1494     03BC  0BA1               	decfsz	??_sendLCD+1,f
  1495     03BD  2BBA               	goto	u777
  1496     03BE                     l1248:
  1497                           
  1498                           ;main.c: 153:     PORTEbits.RE1 = 1;
  1499     03BE  1283               	bcf	3,5	;RP0=0, select bank0
  1500     03BF  1303               	bcf	3,6	;RP1=0, select bank0
  1501     03C0  1489               	bsf	9,1	;volatile
  1502     03C1                     l95:
  1503     03C1  0008               	return
  1504     03C2                     __end_of_sendLCD:
  1505                           
  1506                           	psect	text6
  1507     01A1                     __ptext6:	
  1508 ;; *************** function _buttonMatrix *****************
  1509 ;; Defined at:
  1510 ;;		line 166 in file "main.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;		None
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  row             1    6[BANK0 ] unsigned char 
  1515 ;;  read            1    3[BANK0 ] unsigned char 
  1516 ;;  col             1    5[BANK0 ] unsigned char 
  1517 ;;  k               1    4[BANK0 ] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      unsigned char 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         0       0       0       0       0
  1528 ;;      Locals:         0       4       0       0       0
  1529 ;;      Temps:          2       0       0       0       0
  1530 ;;      Totals:         2       4       0       0       0
  1531 ;;Total ram usage:        6 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 3
  1534 ;; This function calls:
  1535 ;;		_SendUARTString
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541     01A1                     _buttonMatrix:	
  1542                           ;psect for function _buttonMatrix
  1543                           
  1544     01A1                     l1312:	
  1545                           ;incstack = 0
  1546                           ; Regs used in _buttonMatrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1547                           
  1548                           
  1549                           ;main.c: 167:     char k = 99;
  1550     01A1  3063               	movlw	99
  1551     01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1552     01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1553     01A4  00A4               	movwf	buttonMatrix@k
  1554                           
  1555                           ;main.c: 168:     TRISB = 0x3F;
  1556     01A5  303F               	movlw	63
  1557     01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1558     01A7  1303               	bcf	3,6	;RP1=0, select bank1
  1559     01A8  0086               	movwf	6	;volatile
  1560     01A9                     l1314:
  1561                           
  1562                           ;main.c: 170:     if (~PORTB & TRISB) {
  1563     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1564     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1565     01AB  0906               	comf	6,w	;volatile
  1566     01AC  1683               	bsf	3,5	;RP0=1, select bank1
  1567     01AD  1303               	bcf	3,6	;RP1=0, select bank1
  1568     01AE  0506               	andwf	6,w	;volatile
  1569     01AF  1903               	btfsc	3,2
  1570     01B0  29B2               	goto	u631
  1571     01B1  29B3               	goto	u630
  1572     01B2                     u631:
  1573     01B2  29C7               	goto	l1326
  1574     01B3                     u630:
  1575     01B3                     l1316:
  1576                           
  1577                           ;main.c: 171:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1578     01B3  3006               	movlw	6
  1579     01B4  00F5               	movwf	??_buttonMatrix+1
  1580     01B5  3030               	movlw	48
  1581     01B6  00F4               	movwf	??_buttonMatrix
  1582     01B7                     u787:
  1583     01B7  0BF4               	decfsz	??_buttonMatrix,f
  1584     01B8  29B7               	goto	u787
  1585     01B9  0BF5               	decfsz	??_buttonMatrix+1,f
  1586     01BA  29B7               	goto	u787
  1587     01BB  0000               	nop
  1588     01BC                     l1318:
  1589                           
  1590                           ;main.c: 173:         TRISD = 0x00;
  1591     01BC  1683               	bsf	3,5	;RP0=1, select bank1
  1592     01BD  1303               	bcf	3,6	;RP1=0, select bank1
  1593     01BE  0188               	clrf	8	;volatile
  1594     01BF                     l1320:
  1595                           
  1596                           ;main.c: 174:         SendUARTString("TRISB");
  1597     01BF  300A               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1598     01C0  120A  118A  2342  120A  118A  	fcall	_SendUARTString
  1599     01C5                     l1322:
  1600                           
  1601                           ;main.c: 175:         return 55;
  1602     01C5  3037               	movlw	55
  1603     01C6  2A33               	goto	l106
  1604     01C7                     l1326:
  1605                           
  1606                           ;main.c: 177:     if (~PORTA & TRISA) {
  1607     01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1608     01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1609     01C9  0905               	comf	5,w	;volatile
  1610     01CA  1683               	bsf	3,5	;RP0=1, select bank1
  1611     01CB  1303               	bcf	3,6	;RP1=0, select bank1
  1612     01CC  0505               	andwf	5,w	;volatile
  1613     01CD  1903               	btfsc	3,2
  1614     01CE  29D0               	goto	u641
  1615     01CF  29D1               	goto	u640
  1616     01D0                     u641:
  1617     01D0  29E4               	goto	l1338
  1618     01D1                     u640:
  1619     01D1                     l1328:
  1620                           
  1621                           ;main.c: 178:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1622     01D1  3006               	movlw	6
  1623     01D2  00F5               	movwf	??_buttonMatrix+1
  1624     01D3  3030               	movlw	48
  1625     01D4  00F4               	movwf	??_buttonMatrix
  1626     01D5                     u797:
  1627     01D5  0BF4               	decfsz	??_buttonMatrix,f
  1628     01D6  29D5               	goto	u797
  1629     01D7  0BF5               	decfsz	??_buttonMatrix+1,f
  1630     01D8  29D5               	goto	u797
  1631     01D9  0000               	nop
  1632     01DA                     l1330:
  1633                           
  1634                           ;main.c: 180:         TRISD = 0x00;
  1635     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1636     01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1637     01DC  0188               	clrf	8	;volatile
  1638     01DD                     l1332:
  1639                           
  1640                           ;main.c: 181:         SendUARTString("TRISA");
  1641     01DD  3004               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1642     01DE  120A  118A  2342  120A  118A  	fcall	_SendUARTString
  1643     01E3  29C5               	goto	l1322
  1644     01E4                     l1338:
  1645                           
  1646                           ;main.c: 184:     TRISD = 0x0F;
  1647     01E4  300F               	movlw	15
  1648     01E5  0088               	movwf	8	;volatile
  1649     01E6                     l1340:
  1650                           
  1651                           ;main.c: 185:     TRISB &= ~0x07;
  1652     01E6  30F8               	movlw	248
  1653     01E7  00FF               	movwf	btemp+1
  1654     01E8  087F               	movf	btemp+1,w
  1655     01E9  0586               	andwf	6,f	;volatile
  1656     01EA                     l1342:
  1657                           
  1658                           ;main.c: 187:     for (char col = 0; col < 3; col++) {
  1659     01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1660     01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1661     01EC  01A5               	clrf	buttonMatrix@col
  1662     01ED                     l1348:
  1663                           
  1664                           ;main.c: 189:         PORTB = columnConfig[col];
  1665     01ED  0825               	movf	buttonMatrix@col,w
  1666     01EE  3E01               	addlw	low ((_columnConfig-__stringbase)| (0+32768))
  1667     01EF  0084               	movwf	4
  1668     01F0  120A  118A  229F  120A  118A  	fcall	stringdir
  1669     01F5  0086               	movwf	6	;volatile
  1670     01F6                     l1350:
  1671                           
  1672                           ;main.c: 190:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  1673     01F6  3021               	movlw	33
  1674     01F7  00F4               	movwf	??_buttonMatrix
  1675     01F8                     u807:
  1676     01F8  0BF4               	decfsz	??_buttonMatrix,f
  1677     01F9  29F8               	goto	u807
  1678     01FA                     l1352:
  1679                           
  1680                           ;main.c: 192:         char read = ~PORTD & TRISD;
  1681     01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1682     01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1683     01FC  0908               	comf	8,w	;volatile
  1684     01FD  1683               	bsf	3,5	;RP0=1, select bank1
  1685     01FE  1303               	bcf	3,6	;RP1=0, select bank1
  1686     01FF  0508               	andwf	8,w	;volatile
  1687     0200  1283               	bcf	3,5	;RP0=0, select bank0
  1688     0201  1303               	bcf	3,6	;RP1=0, select bank0
  1689     0202  00A3               	movwf	buttonMatrix@read
  1690     0203                     l1354:
  1691                           
  1692                           ;main.c: 194:         for (char row = 0; row < 4; row++) {
  1693     0203  01A6               	clrf	buttonMatrix@row
  1694     0204                     l1360:
  1695                           
  1696                           ;main.c: 195:             if (read & (1 << row)) {
  1697     0204  3001               	movlw	1
  1698     0205  00F4               	movwf	??_buttonMatrix
  1699     0206  0A26               	incf	buttonMatrix@row,w
  1700     0207  2A0A               	goto	u654
  1701     0208                     u655:
  1702     0208  1003               	clrc
  1703     0209  0DF4               	rlf	??_buttonMatrix,f
  1704     020A                     u654:
  1705     020A  3EFF               	addlw	-1
  1706     020B  1D03               	skipz
  1707     020C  2A08               	goto	u655
  1708     020D  0874               	movf	??_buttonMatrix,w
  1709     020E  0523               	andwf	buttonMatrix@read,w
  1710     020F  1903               	btfsc	3,2
  1711     0210  2A12               	goto	u661
  1712     0211  2A13               	goto	u660
  1713     0212                     u661:
  1714     0212  2A1E               	goto	l1364
  1715     0213                     u660:
  1716     0213                     l1362:
  1717                           
  1718                           ;main.c: 196:                 k = row + col * 4;
  1719     0213  0825               	movf	buttonMatrix@col,w
  1720     0214  00F4               	movwf	??_buttonMatrix
  1721     0215  3002               	movlw	2
  1722     0216                     u675:
  1723     0216  1003               	clrc
  1724     0217  0DF4               	rlf	??_buttonMatrix,f
  1725     0218  3EFF               	addlw	-1
  1726     0219  1D03               	skipz
  1727     021A  2A16               	goto	u675
  1728     021B  0826               	movf	buttonMatrix@row,w
  1729     021C  0774               	addwf	??_buttonMatrix,w
  1730     021D  00A4               	movwf	buttonMatrix@k
  1731     021E                     l1364:
  1732                           
  1733                           ;main.c: 198:         }
  1734     021E  3001               	movlw	1
  1735     021F  00FF               	movwf	btemp+1
  1736     0220  087F               	movf	btemp+1,w
  1737     0221  07A6               	addwf	buttonMatrix@row,f
  1738     0222                     l1366:
  1739     0222  3004               	movlw	4
  1740     0223  0226               	subwf	buttonMatrix@row,w
  1741     0224  1C03               	skipc
  1742     0225  2A27               	goto	u681
  1743     0226  2A28               	goto	u680
  1744     0227                     u681:
  1745     0227  2A04               	goto	l1360
  1746     0228                     u680:
  1747     0228                     l1368:
  1748                           
  1749                           ;main.c: 199:     }
  1750     0228  3001               	movlw	1
  1751     0229  00FF               	movwf	btemp+1
  1752     022A  087F               	movf	btemp+1,w
  1753     022B  07A5               	addwf	buttonMatrix@col,f
  1754     022C                     l1370:
  1755     022C  3003               	movlw	3
  1756     022D  0225               	subwf	buttonMatrix@col,w
  1757     022E  1C03               	skipc
  1758     022F  2A31               	goto	u691
  1759     0230  2A32               	goto	u690
  1760     0231                     u691:
  1761     0231  29ED               	goto	l1348
  1762     0232                     u690:
  1763     0232                     l1372:
  1764                           
  1765                           ;main.c: 200:     return k;
  1766     0232  0824               	movf	buttonMatrix@k,w
  1767     0233                     l106:
  1768     0233  0008               	return
  1769     0234                     __end_of_buttonMatrix:
  1770                           
  1771                           	psect	text7
  1772     0342                     __ptext7:	
  1773 ;; *************** function _SendUARTString *****************
  1774 ;; Defined at:
  1775 ;;		line 217 in file "main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  str             1    wreg     PTR unsigned char 
  1778 ;;		 -> STR_15(6), STR_14(6), STR_13(2), STR_12(2), 
  1779 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1780 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  1781 ;;		 -> STR_3(2), STR_2(2), 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  str             1    2[BANK0 ] PTR unsigned char 
  1784 ;;		 -> STR_15(6), STR_14(6), STR_13(2), STR_12(2), 
  1785 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1786 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  1787 ;;		 -> STR_3(2), STR_2(2), 
  1788 ;;  i               2    0[BANK0 ] int 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1798 ;;      Params:         0       0       0       0       0
  1799 ;;      Locals:         0       3       0       0       0
  1800 ;;      Temps:          0       0       0       0       0
  1801 ;;      Totals:         0       3       0       0       0
  1802 ;;Total ram usage:        3 bytes
  1803 ;; Hardware stack levels used: 2
  1804 ;; Hardware stack levels required when called: 1
  1805 ;; This function calls:
  1806 ;;		Nothing
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;;		_buttonMatrix
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813     0342                     _SendUARTString:	
  1814                           ;psect for function _SendUARTString
  1815                           
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _SendUARTString: [wreg-fsr0h+status,2+status,0+pclath]
  1819                           ;SendUARTString@str stored from wreg
  1820     0342  1283               	bcf	3,5	;RP0=0, select bank0
  1821     0343  1303               	bcf	3,6	;RP1=0, select bank0
  1822     0344  00A2               	movwf	SendUARTString@str
  1823     0345                     l1250:
  1824                           
  1825                           ;main.c: 218:     if (bottone_premuto)
  1826     0345  0878               	movf	_bottone_premuto,w
  1827     0346  1903               	btfsc	3,2
  1828     0347  2B49               	goto	u571
  1829     0348  2B4A               	goto	u570
  1830     0349                     u571:
  1831     0349  2B4B               	goto	l1254
  1832     034A                     u570:
  1833     034A  2B70               	goto	l119
  1834     034B                     l1254:
  1835                           
  1836                           ;main.c: 220:     int i = 0;
  1837     034B  01A0               	clrf	SendUARTString@i
  1838     034C  01A1               	clrf	SendUARTString@i+1
  1839                           
  1840                           ;main.c: 222:     while (str[i] != '\0') {
  1841     034D  2B61               	goto	l1260
  1842     034E                     l122:
  1843     034E  1E0C               	btfss	12,4	;volatile
  1844     034F  2B51               	goto	u581
  1845     0350  2B52               	goto	u580
  1846     0351                     u581:
  1847     0351  2B4E               	goto	l122
  1848     0352                     u580:
  1849     0352                     l1256:
  1850                           
  1851                           ;main.c: 225:         TXREG = str[i];
  1852     0352  0820               	movf	SendUARTString@i,w
  1853     0353  0722               	addwf	SendUARTString@str,w
  1854     0354  0084               	movwf	4
  1855     0355  120A  118A  229F  120A  118A  	fcall	stringdir
  1856     035A  0099               	movwf	25	;volatile
  1857     035B                     l1258:
  1858                           
  1859                           ;main.c: 226:         i++;
  1860     035B  3001               	movlw	1
  1861     035C  07A0               	addwf	SendUARTString@i,f
  1862     035D  1803               	skipnc
  1863     035E  0AA1               	incf	SendUARTString@i+1,f
  1864     035F  3000               	movlw	0
  1865     0360  07A1               	addwf	SendUARTString@i+1,f
  1866     0361                     l1260:
  1867                           
  1868                           ;main.c: 222:     while (str[i] != '\0') {
  1869     0361  0820               	movf	SendUARTString@i,w
  1870     0362  0722               	addwf	SendUARTString@str,w
  1871     0363  0084               	movwf	4
  1872     0364  120A  118A  229F  120A  118A  	fcall	stringdir
  1873     0369  3A00               	xorlw	0
  1874     036A  1D03               	skipz
  1875     036B  2B6D               	goto	u591
  1876     036C  2B6E               	goto	u590
  1877     036D                     u591:
  1878     036D  2B4E               	goto	l122
  1879     036E                     u590:
  1880     036E                     l125:
  1881                           
  1882                           ;main.c: 228:     bottone_premuto = 1;
  1883     036E  01F8               	clrf	_bottone_premuto
  1884     036F  0AF8               	incf	_bottone_premuto,f
  1885     0370                     l119:
  1886     0370  0008               	return
  1887     0371                     __end_of_SendUARTString:
  1888                           
  1889                           	psect	text8
  1890     0371                     __ptext8:	
  1891 ;; *************** function _ISR *****************
  1892 ;; Defined at:
  1893 ;;		line 232 in file "main.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1907 ;;      Params:         0       0       0       0       0
  1908 ;;      Locals:         0       0       0       0       0
  1909 ;;      Temps:          4       0       0       0       0
  1910 ;;      Totals:         4       0       0       0       0
  1911 ;;Total ram usage:        4 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		Interrupt level 1
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920     0371                     _ISR:	
  1921                           ;psect for function _ISR
  1922                           
  1923     0371                     i1l1204:
  1924                           
  1925                           ;main.c: 233:     if (RCIF) {
  1926     0371  1283               	bcf	3,5	;RP0=0, select bank0
  1927     0372  1303               	bcf	3,6	;RP1=0, select bank0
  1928     0373  1E8C               	btfss	12,5	;volatile
  1929     0374  2B76               	goto	u55_21
  1930     0375  2B77               	goto	u55_20
  1931     0376                     u55_21:
  1932     0376  2B91               	goto	i1l132
  1933     0377                     u55_20:
  1934     0377                     i1l1206:
  1935                           
  1936                           ;main.c: 234:         string[index] = RCREG;
  1937     0377  0877               	movf	_index,w
  1938     0378  3E38               	addlw	(low (_string| 0))& (0+255)
  1939     0379  0084               	movwf	4
  1940     037A  081A               	movf	26,w	;volatile
  1941     037B  1383               	bcf	3,7	;select IRP bank0
  1942     037C  0080               	movwf	0
  1943     037D                     i1l1208:
  1944                           
  1945                           ;main.c: 235:         RCIF = 0;
  1946     037D  128C               	bcf	12,5	;volatile
  1947                           
  1948                           ;main.c: 237:         if (string[index] == 13) {
  1949     037E  0877               	movf	_index,w
  1950     037F  3E38               	addlw	(low (_string| 0))& (0+255)
  1951     0380  0084               	movwf	4
  1952     0381  300D               	movlw	13
  1953     0382  0600               	xorwf	0,w
  1954     0383  1D03               	btfss	3,2
  1955     0384  2B86               	goto	u56_21
  1956     0385  2B87               	goto	u56_20
  1957     0386                     u56_21:
  1958     0386  2B8D               	goto	i1l1214
  1959     0387                     u56_20:
  1960     0387                     i1l1210:
  1961                           
  1962                           ;main.c: 238:             string[index] = '\0';
  1963     0387  0877               	movf	_index,w
  1964     0388  3E38               	addlw	(low (_string| 0))& (0+255)
  1965     0389  0084               	movwf	4
  1966     038A  0180               	clrf	0
  1967     038B                     i1l1212:
  1968                           
  1969                           ;main.c: 239:             endsend = 1;
  1970     038B  01F6               	clrf	_endsend
  1971     038C  0AF6               	incf	_endsend,f
  1972     038D                     i1l1214:
  1973                           
  1974                           ;main.c: 241:         index++;
  1975     038D  3001               	movlw	1
  1976     038E  00FF               	movwf	btemp+1
  1977     038F  087F               	movf	btemp+1,w
  1978     0390  07F7               	addwf	_index,f
  1979     0391                     i1l132:
  1980     0391  0873               	movf	??_ISR+3,w
  1981     0392  00FF               	movwf	btemp+1
  1982     0393  0872               	movf	??_ISR+2,w
  1983     0394  008A               	movwf	10
  1984     0395  0871               	movf	??_ISR+1,w
  1985     0396  0084               	movwf	4
  1986     0397  0E70               	swapf	??_ISR,w
  1987     0398  0083               	movwf	3
  1988     0399  0EFE               	swapf	btemp,f
  1989     039A  0E7E               	swapf	btemp,w
  1990     039B  0009               	retfie
  1991     039C                     __end_of_ISR:
  1992     007E                     btemp	set	126	;btemp
  1993     007E                     wtemp0	set	126
  1994                           
  1995                           	psect	intentry
  1996     0004                     __pintentry:	
  1997                           ;incstack = 0
  1998                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1999                           
  2000     0004                     interrupt_function:
  2001     007E                     saved_w	set	btemp
  2002     0004  00FE               	movwf	btemp
  2003     0005  0E03               	swapf	3,w
  2004     0006  00F0               	movwf	??_ISR
  2005     0007  0804               	movf	4,w
  2006     0008  00F1               	movwf	??_ISR+1
  2007     0009  080A               	movf	10,w
  2008     000A  00F2               	movwf	??_ISR+2
  2009     000B  087F               	movf	btemp+1,w
  2010     000C  00F3               	movwf	??_ISR+3
  2011     000D  120A  118A  2B71   	ljmp	_ISR
  2012                           
  2013                           	psect	config
  2014                           
  2015                           ;Config register CONFIG @ 0x2007
  2016                           ;	Oscillator Selection bits
  2017                           ;	FOSC = HS, HS oscillator
  2018                           ;	Watchdog Timer Enable bit
  2019                           ;	WDTE = OFF, WDT disabled
  2020                           ;	Power-up Timer Enable bit
  2021                           ;	PWRTE = ON, PWRT enabled
  2022                           ;	Brown-out Reset Enable bit
  2023                           ;	BOREN = ON, BOR enabled
  2024                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2025                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2026                           ;	Data EEPROM Memory Code Protection bit
  2027                           ;	CPD = OFF, Data EEPROM code protection off
  2028                           ;	Flash Program Memory Write Enable bits
  2029                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2030                           ;	In-Circuit Debugger Mode bit
  2031                           ;	DEBUG = 0x1, unprogrammed default
  2032                           ;	Flash Program Memory Code Protection bit
  2033                           ;	CP = OFF, Code protection off
  2034     2007                     	org	8199
  2035     2007  3FF2               	dw	16370

Data Sizes:
    Strings     41
    Constant    3
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     24      34
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printStringLCD@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[5]), string(BANK0[10]), 

    SendUARTString@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_10(CODE[2]), STR_11(CODE[2]), STR_12(CODE[2]), STR_13(CODE[2]), 
		 -> STR_14(CODE[6]), STR_15(CODE[6]), STR_2(CODE[2]), STR_3(CODE[2]), 
		 -> STR_4(CODE[2]), STR_5(CODE[2]), STR_6(CODE[2]), STR_7(CODE[2]), 
		 -> STR_8(CODE[2]), STR_9(CODE[2]), 


Critical Paths under _main in COMMON

    _main->_buttonMatrix
    _main->_sendLCD
    _printStringLCD->_sendLCD
    _initUART->___aldiv
    _initLCD->_sendLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUART
    _printStringLCD->_sendLCD
    _initUART->___aldiv
    _initLCD->_sendLCD
    _buttonMatrix->_SendUARTString

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5368
                                             22 BANK0      2     2      0
                     _SendUARTString
                       _buttonMatrix
                            _initLCD
                           _initUART
                     _printStringLCD
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _printStringLCD                                       3     1      2    1272
                                              2 BANK0      3     1      2
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUART                                             8     4      4     573
                                             14 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     962
                                              2 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _sendLCD                                              4     3      1     962
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _buttonMatrix                                         6     6      0     965
                                              4 COMMON     2     2      0
                                              3 BANK0      4     4      0
                     _SendUARTString
 ---------------------------------------------------------------------------------
 (3) _SendUARTString                                       3     3      0     634
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendUARTString
   _buttonMatrix
     _SendUARTString
   _initLCD
     _sendLCD
   _initUART
     ___aldiv
   _printStringLCD
     _sendLCD
   _sendLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2C      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 02 14:44:20 2024

                      _x 0079                        pc 0002                       l92 0294  
                     l95 03C1                       l99 0341                       fsr 0004  
                    l102 033F                      l122 034E                      l106 0233  
                    l115 030A                      l125 036E                      l119 0370  
                    l283 0118                      l293 01A0                      l990 0107  
                    l992 010B                      l994 011C                      l996 0127  
                    l988 0104                      l998 012B                      u400 0188  
                    u320 010B                      u401 0187                      u321 010A  
                    u410 018D                      u330 011C                      u411 018C  
                    u331 011B                      u340 013B                      u341 013A  
                    u360 014F                      u600 02E8                      u361 014E  
                    u610 0310                      u355 0140                      u611 030F  
                    u380 016A                      u620 033F                      u700 005B  
                    _ISR 0371                      u381 0169                      u605 02E3  
                    u621 033E                      u701 005A                      u630 01B3  
                    u710 0074                      u631 01B2                      u375 0151  
                    u711 0073                      u640 01D1                      u720 007C  
                    u641 01D0                      u385 0166                      u721 007B  
                    u570 034A                      u571 0349                      u395 017A  
                    u580 0352                      u660 0213                      u581 0351  
                    u661 0212                      u590 036E                      u654 020A  
                    u591 036D                      u655 0208                      u807 01F8  
                    u680 0228                      u681 0227                      u737 0241  
                    u690 0232                      u691 0231                      u675 0216  
                    u747 0255                      u757 0266                      u767 03AD  
                    u777 03BA                      u787 01B7                      u797 01D5  
                    fsr0 0004                      indf 0000                     ?_ISR 0070  
                   l1000 0133                     l1010 014F                     l1002 013B  
                   l1020 0182                     l1012 0158                     l1004 013E  
                   l1014 016A                     l1006 0147                     l1022 0188  
                   l1024 018D                     l1016 0178                     l1008 014B  
                   l1026 0198                     l1018 0179                     l1300 030B  
                   l1310 032E                     l1320 01BF                     l1312 01A1  
                   l1240 03A2                     l1304 0311                     l1400 0076  
                   l1250 0345                     l1330 01DA                     l1322 01C5  
                   l1314 01A9                     l1242 03A7                     l1306 0315  
                   l1410 0092                     l1260 0361                     l1340 01E6  
                   l1332 01DD                     l1316 01B3                     l1244 03B1  
                   l1236 039D                     l1308 0328                     l1420 00B5  
                   l1412 0099                     l1404 007D                     l1254 034B  
                   l1350 01F6                     l1342 01EA                     l1318 01BC  
                   l1326 01C7                     l1246 03B4                     l1238 03A0  
                   l1270 0248                     l1262 0234                     l1422 00BC  
                   l1414 00A0                     l1406 0084                     l1430 00D1  
                   l1256 0352                     l1360 0204                     l1352 01FA  
                   l1328 01D1                     l1248 03BE                     l1280 0271  
                   l1272 024F                     l1264 0237                     l1424 00C3  
                   l1416 00A7                     l1408 008B                     l1258 035B  
                   l1370 022C                     l1362 0213                     l1354 0203  
                   l1338 01E4                     l1282 0278                     l1274 0259  
                   l1266 023B                     l1290 02D1                     l1426 00CA  
                   l1418 00AE                     l1372 0232                     l1364 021E  
                   l1348 01ED                     l1284 027F                     l1276 0260  
                   l1268 0245                     l1292 02DA                     l1380 0046  
                   l1366 0222                     l1286 0286                     l1278 026A  
                   l1294 0307                     l1390 005B                     l1382 004D  
                   l1368 0228                     l1288 028D                     l1296 0308  
                   l1456 00DB                     l1392 005D                     l1384 0051  
                   l1376 0027                     l1298 0309                     l1394 0068  
                   l1386 0053                     l1378 003B                     l1396 006E  
                   l1388 0056                     l1398 0074                     STR_1 02B4  
                   STR_2 02BF                     STR_3 02C1                     STR_4 02C3  
                   STR_5 02C5                     STR_6 02C7                     STR_7 02C9  
                   STR_8 02CB                     STR_9 02CD                     _RCIF 0065  
                   _main 0027                     btemp 007E                     start 0010  
                  ??_ISR 0070          __end_of___aldiv 01A1                    ?_main 0070  
                  STR_10 02CF                    STR_11 02BB                    STR_12 02BD  
                  STR_13 02B9                    STR_14 02AE                    STR_15 02A8  
                  i1l132 0391                    _RCREG 001A                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  u55_20 0377                    u55_21 0376                    u56_20 0387  
                  u56_21 0386                    _TRISA 0085                    _TRISB 0086  
                  _TRISD 0088                    _TRISE 0089                    _TXREG 0019  
        __end_of_initLCD 0295                    _index 0077          __end_of_sendLCD 03C2  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0013             __end_of_main 0104                   ??_main 0036  
                 _ADCON1 009F                   i1l1210 0387                   i1l1212 038B  
                 i1l1204 0371                   i1l1214 038D                   i1l1206 0377  
                 i1l1208 037D            ?_buttonMatrix 0070                ??___aldiv 0074  
       __end_of_initUART 030B         ??_printStringLCD 0076                   _string 0038  
              ??_initLCD 0022                ??_sendLCD 0020                   saved_w 007E  
       initUART@baudRate 002E           ??_buttonMatrix 0074  __end_of__initialization 0023  
            sendLCD@dato 0075           __pcstackCOMMON 0070     __end_of_columnConfig 02A8  
             __pbssBANK0 0038               __pmaintext 0027               __pintentry 0004  
             __stringtab 0295                ?_initUART 002E                  ___aldiv 0104  
   __end_of_buttonMatrix 0234                  __ptext1 030B                  __ptext2 02D1  
                __ptext3 0104                  __ptext4 0234                  __ptext5 039C  
                __ptext6 01A1                  __ptext7 0342                  __ptext8 0371  
                _endsend 0076          SendUARTString@i 0020                  _initLCD 0234  
                _sendLCD 039C         ___aldiv@dividend 0024          printStringLCD@i 0024  
        printStringLCD@s 0022     end_of_initialization 0023               ??_initUART 0032  
              _RCSTAbits 0018         ___aldiv@quotient 002A                _PORTEbits 0009  
        _bottone_premuto 0078          buttonMatrix@col 0025          buttonMatrix@row 0026  
              _TRISCbits 0087             _columnConfig 02A5                _TXSTAbits 0098  
    start_initialization 0013              __end_of_ISR 039C           _SendUARTString 0342  
            __pbssCOMMON 0076                ___latbits 0002            __pcstackBANK0 0020  
 __end_of_SendUARTString 0371             _buttonMatrix 01A1                 ?___aldiv 0020  
              __pstrings 0295                 ?_initLCD 0070        SendUARTString@str 0022  
               ?_sendLCD 0074          ?_SendUARTString 0070          ___aldiv@divisor 0020  
      interrupt_function 0004          ___aldiv@counter 0028                 _PIE1bits 008C  
               _PIR1bits 000C              __stringbase 02A4                sendLCD@rs 0074  
     __end_of__stringtab 02A5           _printStringLCD 030B                 _initUART 02D1  
          buttonMatrix@k 0024               _INTCONbits 000B   __end_of_printStringLCD 0342  
               intlevel1 0000                stringcode 029F         ??_SendUARTString 0074  
               stringdir 029F                 stringtab 0295             ___aldiv@sign 0029  
        ?_printStringLCD 0022         buttonMatrix@read 0023  
