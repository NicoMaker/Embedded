

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 02 15:03:34 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 22/03/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     0091                     	;# 
   102     0092                     	;# 
   103     0093                     	;# 
   104     0094                     	;# 
   105     0098                     	;# 
   106     0099                     	;# 
   107     009C                     	;# 
   108     009D                     	;# 
   109     009E                     	;# 
   110     009F                     	;# 
   111     010C                     	;# 
   112     010D                     	;# 
   113     010E                     	;# 
   114     010F                     	;# 
   115     018C                     	;# 
   116     018D                     	;# 
   117     0000                     	;# 
   118     0001                     	;# 
   119     0002                     	;# 
   120     0003                     	;# 
   121     0004                     	;# 
   122     0005                     	;# 
   123     0006                     	;# 
   124     0007                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     000C                     	;# 
   130     000D                     	;# 
   131     000E                     	;# 
   132     000E                     	;# 
   133     000F                     	;# 
   134     0010                     	;# 
   135     0011                     	;# 
   136     0012                     	;# 
   137     0013                     	;# 
   138     0014                     	;# 
   139     0015                     	;# 
   140     0015                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001B                     	;# 
   147     001B                     	;# 
   148     001C                     	;# 
   149     001D                     	;# 
   150     001E                     	;# 
   151     001F                     	;# 
   152     0081                     	;# 
   153     0085                     	;# 
   154     0086                     	;# 
   155     0087                     	;# 
   156     0088                     	;# 
   157     0089                     	;# 
   158     008C                     	;# 
   159     008D                     	;# 
   160     008E                     	;# 
   161     0091                     	;# 
   162     0092                     	;# 
   163     0093                     	;# 
   164     0094                     	;# 
   165     0098                     	;# 
   166     0099                     	;# 
   167     009C                     	;# 
   168     009D                     	;# 
   169     009E                     	;# 
   170     009F                     	;# 
   171     010C                     	;# 
   172     010D                     	;# 
   173     010E                     	;# 
   174     010F                     	;# 
   175     018C                     	;# 
   176     018D                     	;# 
   177                           
   178                           	psect	strings
   179     02AC                     __pstrings:
   180     02AC                     stringtab:
   181     02AC                     __stringtab:
   182                           
   183                           ;	String table - string pointers are 1 byte each
   184     02AC  1BFF               	btfsc	btemp+1,7
   185     02AD  2AB6               	ljmp	stringcode
   186     02AE  1383               	bcf	3,7
   187     02AF  187F               	btfsc	btemp+1,0
   188     02B0  1783               	bsf	3,7
   189     02B1  0800               	movf	0,w
   190     02B2  0A84               	incf	4,f
   191     02B3  1903               	skipnz
   192     02B4  0AFF               	incf	btemp+1,f
   193     02B5  0008               	return
   194     02B6                     stringcode:
   195     02B6                     stringdir:
   196     02B6  3002               	movlw	high stringdir
   197     02B7  008A               	movwf	10
   198     02B8  0804               	movf	4,w
   199     02B9  0A84               	incf	4,f
   200     02BA  0782               	addwf	2,f
   201     02BB                     __stringbase:
   202     02BB  3400               	retlw	0
   203     02BC                     __end_of__stringtab:
   204     02BC                     _columnConfig:
   205     02BC  34FE               	retlw	254
   206     02BD  34FD               	retlw	253
   207     02BE  34FB               	retlw	251
   208     02BF                     __end_of_columnConfig:
   209     001A                     _RCREG	set	26
   210     0019                     _TXREG	set	25
   211     000C                     _PIR1bits	set	12
   212     000B                     _INTCONbits	set	11
   213     0018                     _RCSTAbits	set	24
   214     0005                     _PORTA	set	5
   215     0006                     _PORTB	set	6
   216     0008                     _PORTD	set	8
   217     0009                     _PORTEbits	set	9
   218     0065                     _RCIF	set	101
   219     008C                     _PIE1bits	set	140
   220     0099                     _SPBRG	set	153
   221     0098                     _TXSTAbits	set	152
   222     0087                     _TRISCbits	set	135
   223     0086                     _TRISB	set	134
   224     0089                     _TRISE	set	137
   225     0088                     _TRISD	set	136
   226     0085                     _TRISA	set	133
   227     009F                     _ADCON1	set	159
   228     02BF                     STR_15:
   229     02BF  3454               	retlw	84	;'T'
   230     02C0  3452               	retlw	82	;'R'
   231     02C1  3449               	retlw	73	;'I'
   232     02C2  3453               	retlw	83	;'S'
   233     02C3  3441               	retlw	65	;'A'
   234     02C4  3400               	retlw	0
   235     02C5                     STR_14:
   236     02C5  3454               	retlw	84	;'T'
   237     02C6  3452               	retlw	82	;'R'
   238     02C7  3449               	retlw	73	;'I'
   239     02C8  3453               	retlw	83	;'S'
   240     02C9  3442               	retlw	66	;'B'
   241     02CA  3400               	retlw	0
   242     02CB                     STR_1:
   243     02CB  347E               	retlw	126	;'~'
   244     02CC  3463               	retlw	99	;'c'
   245     02CD  3469               	retlw	105	;'i'
   246     02CE  3461               	retlw	97	;'a'
   247     02CF  346F               	retlw	111	;'o'
   248     02D0  3400               	retlw	0
   249     02D1                     STR_13:
   250     02D1  3423               	retlw	35	;'#'
   251     02D2  3400               	retlw	0
   252     02D3                     STR_11:
   253     02D3  342A               	retlw	42	;'*'
   254     02D4  3400               	retlw	0
   255     02D5                     STR_12:
   256     02D5  3430               	retlw	48	;'0'
   257     02D6  3400               	retlw	0
   258     02D7                     STR_2:
   259     02D7  3431               	retlw	49	;'1'
   260     02D8  3400               	retlw	0
   261     02D9                     STR_3:
   262     02D9  3432               	retlw	50	;'2'
   263     02DA  3400               	retlw	0
   264     02DB                     STR_4:
   265     02DB  3433               	retlw	51	;'3'
   266     02DC  3400               	retlw	0
   267     02DD                     STR_5:
   268     02DD  3434               	retlw	52	;'4'
   269     02DE  3400               	retlw	0
   270     02DF                     STR_6:
   271     02DF  3435               	retlw	53	;'5'
   272     02E0  3400               	retlw	0
   273     02E1                     STR_7:
   274     02E1  3436               	retlw	54	;'6'
   275     02E2  3400               	retlw	0
   276     02E3                     STR_8:
   277     02E3  3437               	retlw	55	;'7'
   278     02E4  3400               	retlw	0
   279     02E5                     STR_9:
   280     02E5  3438               	retlw	56	;'8'
   281     02E6  3400               	retlw	0
   282     02E7                     STR_10:
   283     02E7  3439               	retlw	57	;'9'
   284     02E8  3400               	retlw	0
   285                           
   286                           	psect	cinit
   287     0013                     start_initialization:	
   288                           ; #config settings
   289                           
   290     0013                     __initialization:
   291                           
   292                           ; Clear objects allocated to BANK0
   293     0013  1283               	bcf	3,5	;RP0=0, select bank0
   294     0014  1303               	bcf	3,6	;RP1=0, select bank0
   295     0015  01B9               	clrf	__pbssBANK0& (0+127)
   296     0016  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   297     0017  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   298     0018  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   299     0019  01BD               	clrf	(__pbssBANK0+4)& (0+127)
   300     001A  01BE               	clrf	(__pbssBANK0+5)& (0+127)
   301     001B  01BF               	clrf	(__pbssBANK0+6)& (0+127)
   302     001C  01C0               	clrf	(__pbssBANK0+7)& (0+127)
   303     001D  01C1               	clrf	(__pbssBANK0+8)& (0+127)
   304     001E  01C2               	clrf	(__pbssBANK0+9)& (0+127)
   305     001F  01C3               	clrf	(__pbssBANK0+10)& (0+127)
   306     0020  01C4               	clrf	(__pbssBANK0+11)& (0+127)
   307     0021  01C5               	clrf	(__pbssBANK0+12)& (0+127)
   308     0022  01C6               	clrf	(__pbssBANK0+13)& (0+127)
   309     0023                     end_of_initialization:	
   310                           ;End of C runtime variable initialization code
   311                           
   312     0023                     __end_of__initialization:
   313     0023  0183               	clrf	3
   314     0024  120A  118A  2827   	ljmp	_main	;jump to C main() function
   315                           
   316                           	psect	bssBANK0
   317     0039                     __pbssBANK0:
   318     0039                     _endsend:
   319     0039                     	ds	1
   320     003A                     _index:
   321     003A                     	ds	1
   322     003B                     _bottone_premuto:
   323     003B                     	ds	1
   324     003C                     _x:
   325     003C                     	ds	1
   326     003D                     _string:
   327     003D                     	ds	10
   328                           
   329                           	psect	cstackCOMMON
   330     0070                     __pcstackCOMMON:
   331     0070                     ?_initLCD:
   332     0070                     ?_buttonMatrix:	
   333                           ; 1 bytes @ 0x0
   334                           
   335     0070                     ?_SendUARTString:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ?_main:	
   339                           ; 1 bytes @ 0x0
   340                           
   341     0070                     ?_CheckId:	
   342                           ; 1 bytes @ 0x0
   343                           
   344     0070                     ??_CheckId:	
   345                           ; 1 bytes @ 0x0
   346                           
   347     0070                     ?_ISR:	
   348                           ; 1 bytes @ 0x0
   349                           
   350                           
   351                           ; 1 bytes @ 0x0
   352     0070                     	ds	2
   353     0072                     CheckId@id:
   354                           
   355                           ; 1 bytes @ 0x2
   356     0072                     	ds	1
   357     0073                     ??_ISR:
   358                           
   359                           ; 1 bytes @ 0x3
   360     0073                     	ds	4
   361     0077                     ??_printStringLCD:
   362     0077                     ??_SendUARTString:	
   363                           ; 1 bytes @ 0x7
   364                           
   365                           
   366                           	psect	cstackBANK0
   367     0020                     __pcstackBANK0:	
   368                           ; 1 bytes @ 0x7
   369                           
   370     0020                     ?_sendLCD:
   371     0020                     ?___aldiv:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0020                     sendLCD@rs:	
   375                           ; 4 bytes @ 0x0
   376                           
   377     0020                     SendUARTString@i:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0020                     ___aldiv@divisor:	
   381                           ; 2 bytes @ 0x0
   382                           
   383                           
   384                           ; 4 bytes @ 0x0
   385     0020                     	ds	1
   386     0021                     ??_sendLCD:
   387                           
   388                           ; 1 bytes @ 0x1
   389     0021                     	ds	1
   390     0022                     SendUARTString@str:
   391                           
   392                           ; 1 bytes @ 0x2
   393     0022                     	ds	1
   394     0023                     ??_buttonMatrix:
   395     0023                     sendLCD@dato:	
   396                           ; 1 bytes @ 0x3
   397                           
   398                           
   399                           ; 1 bytes @ 0x3
   400     0023                     	ds	1
   401     0024                     ??_initLCD:
   402     0024                     ?_printStringLCD:	
   403                           ; 1 bytes @ 0x4
   404                           
   405     0024                     printStringLCD@s:	
   406                           ; 1 bytes @ 0x4
   407                           
   408     0024                     ___aldiv@dividend:	
   409                           ; 2 bytes @ 0x4
   410                           
   411                           
   412                           ; 4 bytes @ 0x4
   413     0024                     	ds	1
   414     0025                     buttonMatrix@read:
   415                           
   416                           ; 1 bytes @ 0x5
   417     0025                     	ds	1
   418     0026                     printStringLCD@i:
   419     0026                     buttonMatrix@k:	
   420                           ; 1 bytes @ 0x6
   421                           
   422                           
   423                           ; 1 bytes @ 0x6
   424     0026                     	ds	1
   425     0027                     buttonMatrix@col:
   426                           
   427                           ; 1 bytes @ 0x7
   428     0027                     	ds	1
   429     0028                     ??___aldiv:
   430     0028                     buttonMatrix@row:	
   431                           ; 1 bytes @ 0x8
   432                           
   433                           
   434                           ; 1 bytes @ 0x8
   435     0028                     	ds	1
   436     0029                     ___aldiv@counter:
   437                           
   438                           ; 1 bytes @ 0x9
   439     0029                     	ds	1
   440     002A                     ___aldiv@sign:
   441                           
   442                           ; 1 bytes @ 0xA
   443     002A                     	ds	1
   444     002B                     ___aldiv@quotient:
   445                           
   446                           ; 4 bytes @ 0xB
   447     002B                     	ds	4
   448     002F                     ?_initUART:
   449     002F                     initUART@baudRate:	
   450                           ; 1 bytes @ 0xF
   451                           
   452                           
   453                           ; 4 bytes @ 0xF
   454     002F                     	ds	4
   455     0033                     ??_initUART:
   456                           
   457                           ; 1 bytes @ 0x13
   458     0033                     	ds	4
   459     0037                     ??_main:
   460                           
   461                           ; 1 bytes @ 0x17
   462     0037                     	ds	2
   463                           
   464                           	psect	maintext
   465     0027                     __pmaintext:	
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 58 in file "main.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : B00/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0
   487 ;;      Temps:          0       2       0       0       0
   488 ;;      Totals:         0       2       0       0       0
   489 ;;Total ram usage:        2 bytes
   490 ;; Hardware stack levels required when called: 4
   491 ;; This function calls:
   492 ;;		_SendUARTString
   493 ;;		_buttonMatrix
   494 ;;		_initLCD
   495 ;;		_initUART
   496 ;;		_printStringLCD
   497 ;;		_sendLCD
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503     0027                     _main:	
   504                           ;psect for function _main
   505                           
   506     0027                     l1156:	
   507                           ;incstack = 0
   508                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   509                           
   510                           
   511                           ;main.c: 59:     initLCD();
   512     0027  120A  118A  223D  120A  118A  	fcall	_initLCD
   513                           
   514                           ;main.c: 60:     initUART(9600);
   515     002C  3000               	movlw	0
   516     002D  1283               	bcf	3,5	;RP0=0, select bank0
   517     002E  1303               	bcf	3,6	;RP1=0, select bank0
   518     002F  00B2               	movwf	initUART@baudRate+3
   519     0030  3000               	movlw	0
   520     0031  00B1               	movwf	initUART@baudRate+2
   521     0032  3025               	movlw	37
   522     0033  00B0               	movwf	initUART@baudRate+1
   523     0034  3080               	movlw	128
   524     0035  00AF               	movwf	initUART@baudRate
   525     0036  120A  118A  22E9  120A  118A  	fcall	_initUART
   526     003B                     l1158:
   527                           
   528                           ;main.c: 62:     printStringLCD("~ciao");
   529     003B  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   530     003C  1283               	bcf	3,5	;RP0=0, select bank0
   531     003D  1303               	bcf	3,6	;RP1=0, select bank0
   532     003E  00A4               	movwf	printStringLCD@s
   533     003F  3080               	movlw	128
   534     0040  00A5               	movwf	printStringLCD@s+1
   535     0041  120A  118A  235D  120A  118A  	fcall	_printStringLCD
   536     0046                     l1160:
   537                           
   538                           ;main.c: 63:     sendLCD(0xC0, 0);
   539     0046  1283               	bcf	3,5	;RP0=0, select bank0
   540     0047  1303               	bcf	3,6	;RP1=0, select bank0
   541     0048  01A0               	clrf	sendLCD@rs
   542     0049  30C0               	movlw	192
   543     004A  120A  118A  23C4  120A  118A  	fcall	_sendLCD
   544     004F                     l1162:
   545                           
   546                           ;main.c: 65:     ADCON1 = 0x06;
   547     004F  3006               	movlw	6
   548     0050  1683               	bsf	3,5	;RP0=1, select bank1
   549     0051  1303               	bcf	3,6	;RP1=0, select bank1
   550     0052  009F               	movwf	31	;volatile
   551     0053                     l1164:
   552                           
   553                           ;main.c: 66:     TRISA = 0x20;
   554     0053  3020               	movlw	32
   555     0054  0085               	movwf	5	;volatile
   556     0055                     l1166:
   557                           
   558                           ;main.c: 69:         TRISD = 0x00;
   559     0055  1683               	bsf	3,5	;RP0=1, select bank1
   560     0056  1303               	bcf	3,6	;RP1=0, select bank1
   561     0057  0188               	clrf	8	;volatile
   562     0058                     l1168:
   563                           
   564                           ;main.c: 70:         if (endsend) {
   565     0058  1283               	bcf	3,5	;RP0=0, select bank0
   566     0059  1303               	bcf	3,6	;RP1=0, select bank0
   567     005A  0839               	movf	_endsend,w
   568     005B  1903               	btfsc	3,2
   569     005C  285E               	goto	u571
   570     005D  285F               	goto	u570
   571     005E                     u571:
   572     005E  286A               	goto	l1174
   573     005F                     u570:
   574     005F                     l1170:
   575                           
   576                           ;main.c: 71:             endsend = 0;
   577     005F  01B9               	clrf	_endsend
   578                           
   579                           ;main.c: 72:             index = 0;
   580     0060  01BA               	clrf	_index
   581     0061                     l1172:
   582                           
   583                           ;main.c: 73:             printStringLCD(string);
   584     0061  303D               	movlw	(low (_string| 0))& (0+255)
   585     0062  00A4               	movwf	printStringLCD@s
   586     0063  3000               	movlw	0
   587     0064  00A5               	movwf	printStringLCD@s+1
   588     0065  120A  118A  235D  120A  118A  	fcall	_printStringLCD
   589     006A                     l1174:
   590                           
   591                           ;main.c: 75:         x = buttonMatrix();
   592     006A  120A  118A  21A3  120A  118A  	fcall	_buttonMatrix
   593     006F  1283               	bcf	3,5	;RP0=0, select bank0
   594     0070  1303               	bcf	3,6	;RP1=0, select bank0
   595     0071  00BC               	movwf	_x
   596     0072                     l1176:
   597                           
   598                           ;main.c: 76:         if (x == 99) {
   599     0072  3063               	movlw	99
   600     0073  063C               	xorwf	_x,w
   601     0074  1D03               	btfss	3,2
   602     0075  2877               	goto	u581
   603     0076  2878               	goto	u580
   604     0077                     u581:
   605     0077  287A               	goto	l1180
   606     0078                     u580:
   607     0078                     l1178:
   608                           
   609                           ;main.c: 77:             bottone_premuto = 0;
   610     0078  01BB               	clrf	_bottone_premuto
   611                           
   612                           ;main.c: 78:             continue;
   613     0079  2855               	goto	l1166
   614     007A                     l1180:
   615                           
   616                           ;main.c: 80:         if (x == 55)
   617     007A  3037               	movlw	55
   618     007B  063C               	xorwf	_x,w
   619     007C  1D03               	btfss	3,2
   620     007D  287F               	goto	u591
   621     007E  2880               	goto	u590
   622     007F                     u591:
   623     007F  28D5               	goto	l1210
   624     0080                     u590:
   625     0080  2855               	goto	l1166
   626     0081                     l1184:
   627                           
   628                           ;main.c: 85:                 SendUARTString("1");
   629     0081  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   630     0082  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   631                           
   632                           ;main.c: 86:                 break;
   633     0087  2855               	goto	l1166
   634     0088                     l1186:
   635                           
   636                           ;main.c: 88:                 SendUARTString("2");
   637     0088  301E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   638     0089  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   639                           
   640                           ;main.c: 89:                 break;
   641     008E  2855               	goto	l1166
   642     008F                     l1188:
   643                           
   644                           ;main.c: 91:                 SendUARTString("3");
   645     008F  3020               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   646     0090  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   647                           
   648                           ;main.c: 92:                 break;
   649     0095  2855               	goto	l1166
   650     0096                     l1190:
   651                           
   652                           ;main.c: 94:                 SendUARTString("4");
   653     0096  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   654     0097  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   655                           
   656                           ;main.c: 95:                 break;
   657     009C  2855               	goto	l1166
   658     009D                     l1192:
   659                           
   660                           ;main.c: 97:                 SendUARTString("5");
   661     009D  3024               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   662     009E  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   663                           
   664                           ;main.c: 98:                 break;
   665     00A3  2855               	goto	l1166
   666     00A4                     l1194:
   667                           
   668                           ;main.c: 100:                 SendUARTString("6");
   669     00A4  3026               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   670     00A5  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   671                           
   672                           ;main.c: 101:                 break;
   673     00AA  2855               	goto	l1166
   674     00AB                     l1196:
   675                           
   676                           ;main.c: 103:                 SendUARTString("7");
   677     00AB  3028               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   678     00AC  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   679                           
   680                           ;main.c: 104:                 break;
   681     00B1  2855               	goto	l1166
   682     00B2                     l1198:
   683                           
   684                           ;main.c: 106:                 SendUARTString("8");
   685     00B2  302A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   686     00B3  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   687                           
   688                           ;main.c: 107:                 break;
   689     00B8  2855               	goto	l1166
   690     00B9                     l1200:
   691                           
   692                           ;main.c: 109:                 SendUARTString("9");
   693     00B9  302C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
   694     00BA  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   695                           
   696                           ;main.c: 110:                 break;
   697     00BF  2855               	goto	l1166
   698     00C0                     l1202:
   699                           
   700                           ;main.c: 112:                 SendUARTString("*");
   701     00C0  3018               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
   702     00C1  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   703                           
   704                           ;main.c: 113:                 break;
   705     00C6  2855               	goto	l1166
   706     00C7                     l1204:
   707                           
   708                           ;main.c: 115:                 SendUARTString("0");
   709     00C7  301A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
   710     00C8  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   711                           
   712                           ;main.c: 116:                 break;
   713     00CD  2855               	goto	l1166
   714     00CE                     l1206:
   715                           
   716                           ;main.c: 118:                 SendUARTString("#");
   717     00CE  3016               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
   718     00CF  120A  118A  2395  120A  118A  	fcall	_SendUARTString
   719                           
   720                           ;main.c: 119:                 break;
   721     00D4  2855               	goto	l1166
   722     00D5                     l1210:
   723     00D5  083C               	movf	_x,w
   724     00D6  00B7               	movwf	??_main
   725     00D7  01B8               	clrf	??_main+1
   726                           
   727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   728                           ; Switch size 1, requested type "simple"
   729                           ; Number of cases is 1, Range of values is 0 to 0
   730                           ; switch strategies available:
   731                           ; Name         Instructions Cycles
   732                           ; simple_byte            4     3 (average)
   733                           ; direct_byte           11     8 (fixed)
   734                           ; jumptable            260     6 (fixed)
   735                           ;	Chosen strategy is simple_byte
   736     00D8  0838               	movf	??_main+1,w
   737     00D9  3A00               	xorlw	0	; case 0
   738     00DA  1903               	skipnz
   739     00DB  28DD               	goto	l1252
   740     00DC  2855               	goto	l1166
   741     00DD                     l1252:
   742                           
   743                           ; Switch size 1, requested type "simple"
   744                           ; Number of cases is 12, Range of values is 0 to 11
   745                           ; switch strategies available:
   746                           ; Name         Instructions Cycles
   747                           ; simple_byte           37    19 (average)
   748                           ; direct_byte           44     8 (fixed)
   749                           ; jumptable            260     6 (fixed)
   750                           ;	Chosen strategy is simple_byte
   751     00DD  0837               	movf	??_main,w
   752     00DE  3A00               	xorlw	0	; case 0
   753     00DF  1903               	skipnz
   754     00E0  28C0               	goto	l1202
   755     00E1  3A01               	xorlw	1	; case 1
   756     00E2  1903               	skipnz
   757     00E3  28AB               	goto	l1196
   758     00E4  3A03               	xorlw	3	; case 2
   759     00E5  1903               	skipnz
   760     00E6  2896               	goto	l1190
   761     00E7  3A01               	xorlw	1	; case 3
   762     00E8  1903               	skipnz
   763     00E9  2881               	goto	l1184
   764     00EA  3A07               	xorlw	7	; case 4
   765     00EB  1903               	skipnz
   766     00EC  28C7               	goto	l1204
   767     00ED  3A01               	xorlw	1	; case 5
   768     00EE  1903               	skipnz
   769     00EF  28B2               	goto	l1198
   770     00F0  3A03               	xorlw	3	; case 6
   771     00F1  1903               	skipnz
   772     00F2  289D               	goto	l1192
   773     00F3  3A01               	xorlw	1	; case 7
   774     00F4  1903               	skipnz
   775     00F5  2888               	goto	l1186
   776     00F6  3A0F               	xorlw	15	; case 8
   777     00F7  1903               	skipnz
   778     00F8  28CE               	goto	l1206
   779     00F9  3A01               	xorlw	1	; case 9
   780     00FA  1903               	skipnz
   781     00FB  28B9               	goto	l1200
   782     00FC  3A03               	xorlw	3	; case 10
   783     00FD  1903               	skipnz
   784     00FE  28A4               	goto	l1194
   785     00FF  3A01               	xorlw	1	; case 11
   786     0100  1903               	skipnz
   787     0101  288F               	goto	l1188
   788     0102  2855               	goto	l1166
   789     0103  120A  118A  2810   	ljmp	start
   790     0106                     __end_of_main:
   791                           
   792                           	psect	text1
   793     035D                     __ptext1:	
   794 ;; *************** function _printStringLCD *****************
   795 ;; Defined at:
   796 ;;		line 157 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  s               2    4[BANK0 ] PTR unsigned char 
   799 ;;		 -> string(10), STR_1(6), 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  i               1    6[BANK0 ] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   811 ;;      Params:         0       2       0       0       0
   812 ;;      Locals:         0       1       0       0       0
   813 ;;      Temps:          0       0       0       0       0
   814 ;;      Totals:         0       3       0       0       0
   815 ;;Total ram usage:        3 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 3
   818 ;; This function calls:
   819 ;;		_sendLCD
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825     035D                     _printStringLCD:	
   826                           ;psect for function _printStringLCD
   827                           
   828     035D                     l1078:	
   829                           ;incstack = 0
   830                           ; Regs used in _printStringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   831                           
   832                           
   833                           ;main.c: 158:     if (bottone_premuto)
   834     035D  1283               	bcf	3,5	;RP0=0, select bank0
   835     035E  1303               	bcf	3,6	;RP1=0, select bank0
   836     035F  083B               	movf	_bottone_premuto,w
   837     0360  1903               	btfsc	3,2
   838     0361  2B63               	goto	u461
   839     0362  2B64               	goto	u460
   840     0363                     u461:
   841     0363  2B65               	goto	l98
   842     0364                     u460:
   843     0364  2B94               	goto	l99
   844     0365                     l98:
   845                           
   846                           ;main.c: 160:     char i = 1;
   847     0365  01A6               	clrf	printStringLCD@i
   848     0366  0AA6               	incf	printStringLCD@i,f
   849                           
   850                           ;main.c: 161:     while (s[i] != '\0') {
   851     0367  2B81               	goto	l1086
   852     0368                     l1082:
   853                           
   854                           ;main.c: 162:         sendLCD(s[i++], 1);
   855     0368  01A0               	clrf	sendLCD@rs
   856     0369  0AA0               	incf	sendLCD@rs,f
   857     036A  0826               	movf	printStringLCD@i,w
   858     036B  0724               	addwf	printStringLCD@s,w
   859     036C  0084               	movwf	4
   860     036D  0825               	movf	printStringLCD@s+1,w
   861     036E  1803               	skipnc
   862     036F  0A25               	incf	printStringLCD@s+1,w
   863     0370  00FF               	movwf	btemp+1
   864     0371  120A  118A  22AC  120A  118A  	fcall	stringtab
   865     0376  120A  118A  23C4  120A  118A  	fcall	_sendLCD
   866     037B                     l1084:
   867     037B  3001               	movlw	1
   868     037C  00FF               	movwf	btemp+1
   869     037D  087F               	movf	btemp+1,w
   870     037E  1283               	bcf	3,5	;RP0=0, select bank0
   871     037F  1303               	bcf	3,6	;RP1=0, select bank0
   872     0380  07A6               	addwf	printStringLCD@i,f
   873     0381                     l1086:
   874                           
   875                           ;main.c: 161:     while (s[i] != '\0') {
   876     0381  0826               	movf	printStringLCD@i,w
   877     0382  0724               	addwf	printStringLCD@s,w
   878     0383  0084               	movwf	4
   879     0384  0825               	movf	printStringLCD@s+1,w
   880     0385  1803               	skipnc
   881     0386  0A25               	incf	printStringLCD@s+1,w
   882     0387  00FF               	movwf	btemp+1
   883     0388  120A  118A  22AC  120A  118A  	fcall	stringtab
   884     038D  3A00               	xorlw	0
   885     038E  1D03               	skipz
   886     038F  2B91               	goto	u471
   887     0390  2B92               	goto	u470
   888     0391                     u471:
   889     0391  2B68               	goto	l1082
   890     0392                     u470:
   891     0392                     l102:
   892                           
   893                           ;main.c: 164:     bottone_premuto = 1;
   894     0392  01BB               	clrf	_bottone_premuto
   895     0393  0ABB               	incf	_bottone_premuto,f
   896     0394                     l99:
   897     0394  0008               	return
   898     0395                     __end_of_printStringLCD:
   899                           
   900                           	psect	text2
   901     02E9                     __ptext2:	
   902 ;; *************** function _initUART *****************
   903 ;; Defined at:
   904 ;;		line 208 in file "main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  baudRate        4   15[BANK0 ] long 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   918 ;;      Params:         0       4       0       0       0
   919 ;;      Locals:         0       0       0       0       0
   920 ;;      Temps:          0       4       0       0       0
   921 ;;      Totals:         0       8       0       0       0
   922 ;;Total ram usage:        8 bytes
   923 ;; Hardware stack levels used: 1
   924 ;; Hardware stack levels required when called: 3
   925 ;; This function calls:
   926 ;;		___aldiv
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932     02E9                     _initUART:	
   933                           ;psect for function _initUART
   934                           
   935     02E9                     l1068:	
   936                           ;incstack = 0
   937                           ; Regs used in _initUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   938                           
   939                           
   940                           ;main.c: 209:     TRISCbits.TRISC7 = 1;
   941     02E9  1683               	bsf	3,5	;RP0=1, select bank1
   942     02EA  1303               	bcf	3,6	;RP1=0, select bank1
   943     02EB  1787               	bsf	7,7	;volatile
   944                           
   945                           ;main.c: 210:     TRISCbits.TRISC6 = 0;
   946     02EC  1307               	bcf	7,6	;volatile
   947                           
   948                           ;main.c: 212:     TXSTAbits.TXEN = 1;
   949     02ED  1698               	bsf	24,5	;volatile
   950                           
   951                           ;main.c: 213:     RCSTAbits.SPEN = 1;
   952     02EE  1283               	bcf	3,5	;RP0=0, select bank0
   953     02EF  1303               	bcf	3,6	;RP1=0, select bank0
   954     02F0  1798               	bsf	24,7	;volatile
   955                           
   956                           ;main.c: 214:     RCSTAbits.CREN = 1;
   957     02F1  1618               	bsf	24,4	;volatile
   958     02F2                     l1070:
   959                           
   960                           ;main.c: 215:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   961     02F2  082F               	movf	initUART@baudRate,w
   962     02F3  00B3               	movwf	??_initUART
   963     02F4  0830               	movf	initUART@baudRate+1,w
   964     02F5  00B4               	movwf	??_initUART+1
   965     02F6  0831               	movf	initUART@baudRate+2,w
   966     02F7  00B5               	movwf	??_initUART+2
   967     02F8  0832               	movf	initUART@baudRate+3,w
   968     02F9  00B6               	movwf	??_initUART+3
   969     02FA  3006               	movlw	6
   970     02FB                     u455:
   971     02FB  1003               	clrc
   972     02FC  0DB3               	rlf	??_initUART,f
   973     02FD  0DB4               	rlf	??_initUART+1,f
   974     02FE  0DB5               	rlf	??_initUART+2,f
   975     02FF  0DB6               	rlf	??_initUART+3,f
   976     0300                     u450:
   977     0300  3EFF               	addlw	-1
   978     0301  1D03               	skipz
   979     0302  2AFB               	goto	u455
   980     0303  0836               	movf	??_initUART+3,w
   981     0304  00A3               	movwf	___aldiv@divisor+3
   982     0305  0835               	movf	??_initUART+2,w
   983     0306  00A2               	movwf	___aldiv@divisor+2
   984     0307  0834               	movf	??_initUART+1,w
   985     0308  00A1               	movwf	___aldiv@divisor+1
   986     0309  0833               	movf	??_initUART,w
   987     030A  00A0               	movwf	___aldiv@divisor
   988     030B  3000               	movlw	0
   989     030C  00A7               	movwf	___aldiv@dividend+3
   990     030D  307A               	movlw	122
   991     030E  00A6               	movwf	___aldiv@dividend+2
   992     030F  3012               	movlw	18
   993     0310  00A5               	movwf	___aldiv@dividend+1
   994     0311  3000               	movlw	0
   995     0312  00A4               	movwf	___aldiv@dividend
   996     0313  120A  118A  2106  120A  118A  	fcall	___aldiv
   997     0318  1283               	bcf	3,5	;RP0=0, select bank0
   998     0319  1303               	bcf	3,6	;RP1=0, select bank0
   999     031A  0820               	movf	?___aldiv,w
  1000     031B  3EFF               	addlw	255
  1001     031C  1683               	bsf	3,5	;RP0=1, select bank1
  1002     031D  1303               	bcf	3,6	;RP1=0, select bank1
  1003     031E  0099               	movwf	25	;volatile
  1004     031F                     l1072:
  1005                           
  1006                           ;main.c: 217:     INTCONbits.GIE = 1;
  1007     031F  178B               	bsf	11,7	;volatile
  1008     0320                     l1074:
  1009                           
  1010                           ;main.c: 218:     INTCONbits.PEIE = 1;
  1011     0320  170B               	bsf	11,6	;volatile
  1012     0321                     l1076:
  1013                           
  1014                           ;main.c: 219:     PIE1bits.RCIE = 1;
  1015     0321  168C               	bsf	12,5	;volatile
  1016     0322                     l118:
  1017     0322  0008               	return
  1018     0323                     __end_of_initUART:
  1019                           
  1020                           	psect	text3
  1021     0106                     __ptext3:	
  1022 ;; *************** function ___aldiv *****************
  1023 ;; Defined at:
  1024 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  divisor         4    0[BANK0 ] long 
  1027 ;;  dividend        4    4[BANK0 ] long 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  quotient        4   11[BANK0 ] long 
  1030 ;;  sign            1   10[BANK0 ] unsigned char 
  1031 ;;  counter         1    9[BANK0 ] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  4    0[BANK0 ] long 
  1034 ;; Registers used:
  1035 ;;		wreg, status,2, status,0, btemp+1
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1041 ;;      Params:         0       8       0       0       0
  1042 ;;      Locals:         0       6       0       0       0
  1043 ;;      Temps:          0       1       0       0       0
  1044 ;;      Totals:         0      15       0       0       0
  1045 ;;Total ram usage:       15 bytes
  1046 ;; Hardware stack levels used: 1
  1047 ;; Hardware stack levels required when called: 2
  1048 ;; This function calls:
  1049 ;;		Nothing
  1050 ;; This function is called by:
  1051 ;;		_initUART
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055     0106                     ___aldiv:	
  1056                           ;psect for function ___aldiv
  1057                           
  1058     0106                     l998:	
  1059                           ;incstack = 0
  1060                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1061                           
  1062     0106  1283               	bcf	3,5	;RP0=0, select bank0
  1063     0107  1303               	bcf	3,6	;RP1=0, select bank0
  1064     0108  01AA               	clrf	___aldiv@sign
  1065     0109                     l1000:
  1066     0109  1FA3               	btfss	___aldiv@divisor+3,7
  1067     010A  290C               	goto	u351
  1068     010B  290D               	goto	u350
  1069     010C                     u351:
  1070     010C  291A               	goto	l287
  1071     010D                     u350:
  1072     010D                     l1002:
  1073     010D  09A0               	comf	___aldiv@divisor,f
  1074     010E  09A1               	comf	___aldiv@divisor+1,f
  1075     010F  09A2               	comf	___aldiv@divisor+2,f
  1076     0110  09A3               	comf	___aldiv@divisor+3,f
  1077     0111  0AA0               	incf	___aldiv@divisor,f
  1078     0112  1903               	skipnz
  1079     0113  0AA1               	incf	___aldiv@divisor+1,f
  1080     0114  1903               	skipnz
  1081     0115  0AA2               	incf	___aldiv@divisor+2,f
  1082     0116  1903               	skipnz
  1083     0117  0AA3               	incf	___aldiv@divisor+3,f
  1084     0118  01AA               	clrf	___aldiv@sign
  1085     0119  0AAA               	incf	___aldiv@sign,f
  1086     011A                     l287:
  1087     011A  1FA7               	btfss	___aldiv@dividend+3,7
  1088     011B  291D               	goto	u361
  1089     011C  291E               	goto	u360
  1090     011D                     u361:
  1091     011D  292D               	goto	l1008
  1092     011E                     u360:
  1093     011E                     l1004:
  1094     011E  09A4               	comf	___aldiv@dividend,f
  1095     011F  09A5               	comf	___aldiv@dividend+1,f
  1096     0120  09A6               	comf	___aldiv@dividend+2,f
  1097     0121  09A7               	comf	___aldiv@dividend+3,f
  1098     0122  0AA4               	incf	___aldiv@dividend,f
  1099     0123  1903               	skipnz
  1100     0124  0AA5               	incf	___aldiv@dividend+1,f
  1101     0125  1903               	skipnz
  1102     0126  0AA6               	incf	___aldiv@dividend+2,f
  1103     0127  1903               	skipnz
  1104     0128  0AA7               	incf	___aldiv@dividend+3,f
  1105     0129                     l1006:
  1106     0129  3001               	movlw	1
  1107     012A  00FF               	movwf	btemp+1
  1108     012B  087F               	movf	btemp+1,w
  1109     012C  06AA               	xorwf	___aldiv@sign,f
  1110     012D                     l1008:
  1111     012D  3000               	movlw	0
  1112     012E  00AE               	movwf	___aldiv@quotient+3
  1113     012F  3000               	movlw	0
  1114     0130  00AD               	movwf	___aldiv@quotient+2
  1115     0131  3000               	movlw	0
  1116     0132  00AC               	movwf	___aldiv@quotient+1
  1117     0133  3000               	movlw	0
  1118     0134  00AB               	movwf	___aldiv@quotient
  1119     0135                     l1010:
  1120     0135  0823               	movf	___aldiv@divisor+3,w
  1121     0136  0422               	iorwf	___aldiv@divisor+2,w
  1122     0137  0421               	iorwf	___aldiv@divisor+1,w
  1123     0138  0420               	iorwf	___aldiv@divisor,w
  1124     0139  1903               	skipnz
  1125     013A  293C               	goto	u371
  1126     013B  293D               	goto	u370
  1127     013C                     u371:
  1128     013C  298A               	goto	l1032
  1129     013D                     u370:
  1130     013D                     l1012:
  1131     013D  01A9               	clrf	___aldiv@counter
  1132     013E  0AA9               	incf	___aldiv@counter,f
  1133     013F  294D               	goto	l1018
  1134     0140                     l1014:
  1135     0140  3001               	movlw	1
  1136     0141  00A8               	movwf	??___aldiv
  1137     0142                     u385:
  1138     0142  1003               	clrc
  1139     0143  0DA0               	rlf	___aldiv@divisor,f
  1140     0144  0DA1               	rlf	___aldiv@divisor+1,f
  1141     0145  0DA2               	rlf	___aldiv@divisor+2,f
  1142     0146  0DA3               	rlf	___aldiv@divisor+3,f
  1143     0147  0BA8               	decfsz	??___aldiv,f
  1144     0148  2942               	goto	u385
  1145     0149                     l1016:
  1146     0149  3001               	movlw	1
  1147     014A  00FF               	movwf	btemp+1
  1148     014B  087F               	movf	btemp+1,w
  1149     014C  07A9               	addwf	___aldiv@counter,f
  1150     014D                     l1018:
  1151     014D  1FA3               	btfss	___aldiv@divisor+3,7
  1152     014E  2950               	goto	u391
  1153     014F  2951               	goto	u390
  1154     0150                     u391:
  1155     0150  2940               	goto	l1014
  1156     0151                     u390:
  1157     0151                     l1020:
  1158     0151  3001               	movlw	1
  1159     0152  00A8               	movwf	??___aldiv
  1160     0153                     u405:
  1161     0153  1003               	clrc
  1162     0154  0DAB               	rlf	___aldiv@quotient,f
  1163     0155  0DAC               	rlf	___aldiv@quotient+1,f
  1164     0156  0DAD               	rlf	___aldiv@quotient+2,f
  1165     0157  0DAE               	rlf	___aldiv@quotient+3,f
  1166     0158  0BA8               	decfsz	??___aldiv,f
  1167     0159  2953               	goto	u405
  1168     015A                     l1022:
  1169     015A  0823               	movf	___aldiv@divisor+3,w
  1170     015B  0227               	subwf	___aldiv@dividend+3,w
  1171     015C  1D03               	skipz
  1172     015D  2968               	goto	u415
  1173     015E  0822               	movf	___aldiv@divisor+2,w
  1174     015F  0226               	subwf	___aldiv@dividend+2,w
  1175     0160  1D03               	skipz
  1176     0161  2968               	goto	u415
  1177     0162  0821               	movf	___aldiv@divisor+1,w
  1178     0163  0225               	subwf	___aldiv@dividend+1,w
  1179     0164  1D03               	skipz
  1180     0165  2968               	goto	u415
  1181     0166  0820               	movf	___aldiv@divisor,w
  1182     0167  0224               	subwf	___aldiv@dividend,w
  1183     0168                     u415:
  1184     0168  1C03               	skipc
  1185     0169  296B               	goto	u411
  1186     016A  296C               	goto	u410
  1187     016B                     u411:
  1188     016B  297B               	goto	l1028
  1189     016C                     u410:
  1190     016C                     l1024:
  1191     016C  0820               	movf	___aldiv@divisor,w
  1192     016D  02A4               	subwf	___aldiv@dividend,f
  1193     016E  0821               	movf	___aldiv@divisor+1,w
  1194     016F  1C03               	skipc
  1195     0170  0F21               	incfsz	___aldiv@divisor+1,w
  1196     0171  02A5               	subwf	___aldiv@dividend+1,f
  1197     0172  0822               	movf	___aldiv@divisor+2,w
  1198     0173  1C03               	skipc
  1199     0174  0F22               	incfsz	___aldiv@divisor+2,w
  1200     0175  02A6               	subwf	___aldiv@dividend+2,f
  1201     0176  0823               	movf	___aldiv@divisor+3,w
  1202     0177  1C03               	skipc
  1203     0178  0F23               	incfsz	___aldiv@divisor+3,w
  1204     0179  02A7               	subwf	___aldiv@dividend+3,f
  1205     017A                     l1026:
  1206     017A  142B               	bsf	___aldiv@quotient,0
  1207     017B                     l1028:
  1208     017B  3001               	movlw	1
  1209     017C                     u425:
  1210     017C  1003               	clrc
  1211     017D  0CA3               	rrf	___aldiv@divisor+3,f
  1212     017E  0CA2               	rrf	___aldiv@divisor+2,f
  1213     017F  0CA1               	rrf	___aldiv@divisor+1,f
  1214     0180  0CA0               	rrf	___aldiv@divisor,f
  1215     0181  3EFF               	addlw	-1
  1216     0182  1D03               	skipz
  1217     0183  297C               	goto	u425
  1218     0184                     l1030:
  1219     0184  3001               	movlw	1
  1220     0185  02A9               	subwf	___aldiv@counter,f
  1221     0186  1D03               	btfss	3,2
  1222     0187  2989               	goto	u431
  1223     0188  298A               	goto	u430
  1224     0189                     u431:
  1225     0189  2951               	goto	l1020
  1226     018A                     u430:
  1227     018A                     l1032:
  1228     018A  082A               	movf	___aldiv@sign,w
  1229     018B  1903               	btfsc	3,2
  1230     018C  298E               	goto	u441
  1231     018D  298F               	goto	u440
  1232     018E                     u441:
  1233     018E  299A               	goto	l1036
  1234     018F                     u440:
  1235     018F                     l1034:
  1236     018F  09AB               	comf	___aldiv@quotient,f
  1237     0190  09AC               	comf	___aldiv@quotient+1,f
  1238     0191  09AD               	comf	___aldiv@quotient+2,f
  1239     0192  09AE               	comf	___aldiv@quotient+3,f
  1240     0193  0AAB               	incf	___aldiv@quotient,f
  1241     0194  1903               	skipnz
  1242     0195  0AAC               	incf	___aldiv@quotient+1,f
  1243     0196  1903               	skipnz
  1244     0197  0AAD               	incf	___aldiv@quotient+2,f
  1245     0198  1903               	skipnz
  1246     0199  0AAE               	incf	___aldiv@quotient+3,f
  1247     019A                     l1036:
  1248     019A  082E               	movf	___aldiv@quotient+3,w
  1249     019B  00A3               	movwf	?___aldiv+3
  1250     019C  082D               	movf	___aldiv@quotient+2,w
  1251     019D  00A2               	movwf	?___aldiv+2
  1252     019E  082C               	movf	___aldiv@quotient+1,w
  1253     019F  00A1               	movwf	?___aldiv+1
  1254     01A0  082B               	movf	___aldiv@quotient,w
  1255     01A1  00A0               	movwf	?___aldiv
  1256     01A2                     l297:
  1257     01A2  0008               	return
  1258     01A3                     __end_of___aldiv:
  1259                           
  1260                           	psect	text4
  1261     023D                     __ptext4:	
  1262 ;; *************** function _initLCD *****************
  1263 ;; Defined at:
  1264 ;;		line 124 in file "main.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1278 ;;      Params:         0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0
  1280 ;;      Temps:          0       2       0       0       0
  1281 ;;      Totals:         0       2       0       0       0
  1282 ;;Total ram usage:        2 bytes
  1283 ;; Hardware stack levels used: 1
  1284 ;; Hardware stack levels required when called: 3
  1285 ;; This function calls:
  1286 ;;		_sendLCD
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292     023D                     _initLCD:	
  1293                           ;psect for function _initLCD
  1294                           
  1295     023D                     l1040:	
  1296                           ;incstack = 0
  1297                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1298                           
  1299                           
  1300                           ;main.c: 125:     TRISD = 0x00;
  1301     023D  1683               	bsf	3,5	;RP0=1, select bank1
  1302     023E  1303               	bcf	3,6	;RP1=0, select bank1
  1303     023F  0188               	clrf	8	;volatile
  1304     0240                     l1042:
  1305                           
  1306                           ;main.c: 126:     TRISE &= ~0x06;
  1307     0240  30F9               	movlw	249
  1308     0241  00FF               	movwf	btemp+1
  1309     0242  087F               	movf	btemp+1,w
  1310     0243  0589               	andwf	9,f	;volatile
  1311     0244                     l1044:
  1312                           
  1313                           ;main.c: 128:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1314     0244  3034               	movlw	52
  1315     0245  1283               	bcf	3,5	;RP0=0, select bank0
  1316     0246  1303               	bcf	3,6	;RP1=0, select bank0
  1317     0247  00A5               	movwf	??_initLCD+1
  1318     0248  30F1               	movlw	241
  1319     0249  00A4               	movwf	??_initLCD
  1320     024A                     u637:
  1321     024A  0BA4               	decfsz	??_initLCD,f
  1322     024B  2A4A               	goto	u637
  1323     024C  0BA5               	decfsz	??_initLCD+1,f
  1324     024D  2A4A               	goto	u637
  1325     024E                     l1046:
  1326                           
  1327                           ;main.c: 129:     PORTEbits.RE1 = 1;
  1328     024E  1283               	bcf	3,5	;RP0=0, select bank0
  1329     024F  1303               	bcf	3,6	;RP1=0, select bank0
  1330     0250  1489               	bsf	9,1	;volatile
  1331     0251                     l1048:
  1332                           
  1333                           ;main.c: 130:     sendLCD(0x38, 0);
  1334     0251  01A0               	clrf	sendLCD@rs
  1335     0252  3038               	movlw	56
  1336     0253  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1337     0258                     l1050:
  1338                           
  1339                           ;main.c: 132:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1340     0258  300D               	movlw	13
  1341     0259  1283               	bcf	3,5	;RP0=0, select bank0
  1342     025A  1303               	bcf	3,6	;RP1=0, select bank0
  1343     025B  00A5               	movwf	??_initLCD+1
  1344     025C  30FB               	movlw	251
  1345     025D  00A4               	movwf	??_initLCD
  1346     025E                     u647:
  1347     025E  0BA4               	decfsz	??_initLCD,f
  1348     025F  2A5E               	goto	u647
  1349     0260  0BA5               	decfsz	??_initLCD+1,f
  1350     0261  2A5E               	goto	u647
  1351     0262                     l1052:
  1352                           
  1353                           ;main.c: 133:     sendLCD(0x38, 0);
  1354     0262  1283               	bcf	3,5	;RP0=0, select bank0
  1355     0263  1303               	bcf	3,6	;RP1=0, select bank0
  1356     0264  01A0               	clrf	sendLCD@rs
  1357     0265  3038               	movlw	56
  1358     0266  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1359     026B                     l1054:
  1360                           
  1361                           ;main.c: 135:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1362     026B  3003               	movlw	3
  1363     026C  1283               	bcf	3,5	;RP0=0, select bank0
  1364     026D  1303               	bcf	3,6	;RP1=0, select bank0
  1365     026E  00A5               	movwf	??_initLCD+1
  1366     026F  3097               	movlw	151
  1367     0270  00A4               	movwf	??_initLCD
  1368     0271                     u657:
  1369     0271  0BA4               	decfsz	??_initLCD,f
  1370     0272  2A71               	goto	u657
  1371     0273  0BA5               	decfsz	??_initLCD+1,f
  1372     0274  2A71               	goto	u657
  1373     0275                     l1056:
  1374                           
  1375                           ;main.c: 136:     sendLCD(0x38, 0);
  1376     0275  1283               	bcf	3,5	;RP0=0, select bank0
  1377     0276  1303               	bcf	3,6	;RP1=0, select bank0
  1378     0277  01A0               	clrf	sendLCD@rs
  1379     0278  3038               	movlw	56
  1380     0279  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1381     027E                     l1058:
  1382                           
  1383                           ;main.c: 138:     sendLCD(0x08, 0);
  1384     027E  1283               	bcf	3,5	;RP0=0, select bank0
  1385     027F  1303               	bcf	3,6	;RP1=0, select bank0
  1386     0280  01A0               	clrf	sendLCD@rs
  1387     0281  3008               	movlw	8
  1388     0282  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1389     0287                     l1060:
  1390                           
  1391                           ;main.c: 139:     sendLCD(0x0F, 0);
  1392     0287  1283               	bcf	3,5	;RP0=0, select bank0
  1393     0288  1303               	bcf	3,6	;RP1=0, select bank0
  1394     0289  01A0               	clrf	sendLCD@rs
  1395     028A  300F               	movlw	15
  1396     028B  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1397     0290                     l1062:
  1398                           
  1399                           ;main.c: 140:     sendLCD(0x01, 0);
  1400     0290  1283               	bcf	3,5	;RP0=0, select bank0
  1401     0291  1303               	bcf	3,6	;RP1=0, select bank0
  1402     0292  01A0               	clrf	sendLCD@rs
  1403     0293  3001               	movlw	1
  1404     0294  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1405     0299                     l1064:
  1406                           
  1407                           ;main.c: 141:     sendLCD(0x0E, 0);
  1408     0299  1283               	bcf	3,5	;RP0=0, select bank0
  1409     029A  1303               	bcf	3,6	;RP1=0, select bank0
  1410     029B  01A0               	clrf	sendLCD@rs
  1411     029C  300E               	movlw	14
  1412     029D  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1413     02A2                     l1066:
  1414                           
  1415                           ;main.c: 142:     sendLCD(0x80, 0);
  1416     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1417     02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1418     02A4  01A0               	clrf	sendLCD@rs
  1419     02A5  3080               	movlw	128
  1420     02A6  120A  118A  23C4  120A  118A  	fcall	_sendLCD
  1421     02AB                     l92:
  1422     02AB  0008               	return
  1423     02AC                     __end_of_initLCD:
  1424                           
  1425                           	psect	text5
  1426     03C4                     __ptext5:	
  1427 ;; *************** function _sendLCD *****************
  1428 ;; Defined at:
  1429 ;;		line 145 in file "main.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  dato            1    wreg     unsigned char 
  1432 ;;  rs              1    0[BANK0 ] unsigned char 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  dato            1    3[BANK0 ] unsigned char 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,0
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1444 ;;      Params:         0       1       0       0       0
  1445 ;;      Locals:         0       1       0       0       0
  1446 ;;      Temps:          0       2       0       0       0
  1447 ;;      Totals:         0       4       0       0       0
  1448 ;;Total ram usage:        4 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 2
  1451 ;; This function calls:
  1452 ;;		Nothing
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;;		_initLCD
  1456 ;;		_printStringLCD
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460     03C4                     _sendLCD:	
  1461                           ;psect for function _sendLCD
  1462                           
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in _sendLCD: [wreg+status,0]
  1466                           ;sendLCD@dato stored from wreg
  1467     03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1468     03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1469     03C6  00A3               	movwf	sendLCD@dato
  1470     03C7                     l972:
  1471                           
  1472                           ;main.c: 146:     PORTEbits.RE1 = 1;
  1473     03C7  1489               	bsf	9,1	;volatile
  1474     03C8                     l974:
  1475                           
  1476                           ;main.c: 147:     PORTD = dato;
  1477     03C8  0823               	movf	sendLCD@dato,w
  1478     03C9  0088               	movwf	8	;volatile
  1479     03CA                     l976:
  1480                           
  1481                           ;main.c: 148:     PORTEbits.RE2 = rs;
  1482     03CA  0C20               	rrf	sendLCD@rs,w
  1483     03CB  1C03               	skipc
  1484     03CC  1109               	bcf	9,2	;volatile
  1485     03CD  1803               	skipnc
  1486     03CE  1509               	bsf	9,2	;volatile
  1487     03CF                     l978:
  1488                           
  1489                           ;main.c: 149:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1490     03CF  3008               	movlw	8
  1491     03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1492     03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1493     03D2  00A2               	movwf	??_sendLCD+1
  1494     03D3  30C9               	movlw	201
  1495     03D4  00A1               	movwf	??_sendLCD
  1496     03D5                     u667:
  1497     03D5  0BA1               	decfsz	??_sendLCD,f
  1498     03D6  2BD5               	goto	u667
  1499     03D7  0BA2               	decfsz	??_sendLCD+1,f
  1500     03D8  2BD5               	goto	u667
  1501     03D9                     l980:
  1502                           
  1503                           ;main.c: 151:     PORTEbits.RE1 = 0;
  1504     03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1505     03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1506     03DB  1089               	bcf	9,1	;volatile
  1507     03DC                     l982:
  1508                           
  1509                           ;main.c: 152:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1510     03DC  3008               	movlw	8
  1511     03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1512     03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1513     03DF  00A2               	movwf	??_sendLCD+1
  1514     03E0  30C9               	movlw	201
  1515     03E1  00A1               	movwf	??_sendLCD
  1516     03E2                     u677:
  1517     03E2  0BA1               	decfsz	??_sendLCD,f
  1518     03E3  2BE2               	goto	u677
  1519     03E4  0BA2               	decfsz	??_sendLCD+1,f
  1520     03E5  2BE2               	goto	u677
  1521     03E6                     l984:
  1522                           
  1523                           ;main.c: 154:     PORTEbits.RE1 = 1;
  1524     03E6  1283               	bcf	3,5	;RP0=0, select bank0
  1525     03E7  1303               	bcf	3,6	;RP1=0, select bank0
  1526     03E8  1489               	bsf	9,1	;volatile
  1527     03E9                     l95:
  1528     03E9  0008               	return
  1529     03EA                     __end_of_sendLCD:
  1530                           
  1531                           	psect	text6
  1532     01A3                     __ptext6:	
  1533 ;; *************** function _buttonMatrix *****************
  1534 ;; Defined at:
  1535 ;;		line 167 in file "main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  row             1    8[BANK0 ] unsigned char 
  1540 ;;  read            1    5[BANK0 ] unsigned char 
  1541 ;;  col             1    7[BANK0 ] unsigned char 
  1542 ;;  k               1    6[BANK0 ] unsigned char 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1552 ;;      Params:         0       0       0       0       0
  1553 ;;      Locals:         0       4       0       0       0
  1554 ;;      Temps:          0       2       0       0       0
  1555 ;;      Totals:         0       6       0       0       0
  1556 ;;Total ram usage:        6 bytes
  1557 ;; Hardware stack levels used: 1
  1558 ;; Hardware stack levels required when called: 3
  1559 ;; This function calls:
  1560 ;;		_SendUARTString
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566     01A3                     _buttonMatrix:	
  1567                           ;psect for function _buttonMatrix
  1568                           
  1569     01A3                     l1088:	
  1570                           ;incstack = 0
  1571                           ; Regs used in _buttonMatrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1572                           
  1573                           
  1574                           ;main.c: 168:     char k = 99;
  1575     01A3  3063               	movlw	99
  1576     01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1577     01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1578     01A6  00A6               	movwf	buttonMatrix@k
  1579                           
  1580                           ;main.c: 169:     TRISB = 0x3F;
  1581     01A7  303F               	movlw	63
  1582     01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1583     01A9  1303               	bcf	3,6	;RP1=0, select bank1
  1584     01AA  0086               	movwf	6	;volatile
  1585     01AB                     l1090:
  1586                           
  1587                           ;main.c: 171:     if (~PORTB & TRISB) {
  1588     01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1589     01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1590     01AD  0906               	comf	6,w	;volatile
  1591     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  1592     01AF  1303               	bcf	3,6	;RP1=0, select bank1
  1593     01B0  0506               	andwf	6,w	;volatile
  1594     01B1  1903               	btfsc	3,2
  1595     01B2  29B4               	goto	u481
  1596     01B3  29B5               	goto	u480
  1597     01B4                     u481:
  1598     01B4  29CB               	goto	l1102
  1599     01B5                     u480:
  1600     01B5                     l1092:
  1601                           
  1602                           ;main.c: 172:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1603     01B5  3006               	movlw	6
  1604     01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1605     01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1606     01B8  00A4               	movwf	??_buttonMatrix+1
  1607     01B9  302F               	movlw	47
  1608     01BA  00A3               	movwf	??_buttonMatrix
  1609     01BB                     u687:
  1610     01BB  0BA3               	decfsz	??_buttonMatrix,f
  1611     01BC  29BB               	goto	u687
  1612     01BD  0BA4               	decfsz	??_buttonMatrix+1,f
  1613     01BE  29BB               	goto	u687
  1614     01BF  29C0               	nop2
  1615     01C0                     l1094:
  1616                           
  1617                           ;main.c: 174:         TRISD = 0x00;
  1618     01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1619     01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1620     01C2  0188               	clrf	8	;volatile
  1621     01C3                     l1096:
  1622                           
  1623                           ;main.c: 175:         SendUARTString("TRISB");
  1624     01C3  300A               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1625     01C4  120A  118A  2395  120A  118A  	fcall	_SendUARTString
  1626     01C9                     l1098:
  1627                           
  1628                           ;main.c: 176:         return 55;
  1629     01C9  3037               	movlw	55
  1630     01CA  2A3C               	goto	l106
  1631     01CB                     l1102:
  1632                           
  1633                           ;main.c: 178:     if (~PORTA & TRISA) {
  1634     01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1635     01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1636     01CD  0905               	comf	5,w	;volatile
  1637     01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1638     01CF  1303               	bcf	3,6	;RP1=0, select bank1
  1639     01D0  0505               	andwf	5,w	;volatile
  1640     01D1  1903               	btfsc	3,2
  1641     01D2  29D4               	goto	u491
  1642     01D3  29D5               	goto	u490
  1643     01D4                     u491:
  1644     01D4  29EA               	goto	l1114
  1645     01D5                     u490:
  1646     01D5                     l1104:
  1647                           
  1648                           ;main.c: 179:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1649     01D5  3006               	movlw	6
  1650     01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1651     01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1652     01D8  00A4               	movwf	??_buttonMatrix+1
  1653     01D9  302F               	movlw	47
  1654     01DA  00A3               	movwf	??_buttonMatrix
  1655     01DB                     u697:
  1656     01DB  0BA3               	decfsz	??_buttonMatrix,f
  1657     01DC  29DB               	goto	u697
  1658     01DD  0BA4               	decfsz	??_buttonMatrix+1,f
  1659     01DE  29DB               	goto	u697
  1660     01DF  29E0               	nop2
  1661     01E0                     l1106:
  1662                           
  1663                           ;main.c: 181:         TRISD = 0x00;
  1664     01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1665     01E1  1303               	bcf	3,6	;RP1=0, select bank1
  1666     01E2  0188               	clrf	8	;volatile
  1667     01E3                     l1108:
  1668                           
  1669                           ;main.c: 182:         SendUARTString("TRISA");
  1670     01E3  3004               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1671     01E4  120A  118A  2395  120A  118A  	fcall	_SendUARTString
  1672     01E9  29C9               	goto	l1098
  1673     01EA                     l1114:
  1674                           
  1675                           ;main.c: 185:     TRISD = 0x0F;
  1676     01EA  300F               	movlw	15
  1677     01EB  0088               	movwf	8	;volatile
  1678     01EC                     l1116:
  1679                           
  1680                           ;main.c: 186:     TRISB &= ~0x07;
  1681     01EC  30F8               	movlw	248
  1682     01ED  00FF               	movwf	btemp+1
  1683     01EE  087F               	movf	btemp+1,w
  1684     01EF  0586               	andwf	6,f	;volatile
  1685     01F0                     l1118:
  1686                           
  1687                           ;main.c: 188:     for (char col = 0; col < 3; col++) {
  1688     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1689     01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1690     01F2  01A7               	clrf	buttonMatrix@col
  1691     01F3                     l1124:
  1692                           
  1693                           ;main.c: 190:         PORTB = columnConfig[col];
  1694     01F3  0827               	movf	buttonMatrix@col,w
  1695     01F4  3E01               	addlw	low ((_columnConfig-__stringbase)| (0+32768))
  1696     01F5  0084               	movwf	4
  1697     01F6  120A  118A  22B6  120A  118A  	fcall	stringdir
  1698     01FB  0086               	movwf	6	;volatile
  1699     01FC                     l1126:
  1700                           
  1701                           ;main.c: 191:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  1702     01FC  3020               	movlw	32
  1703     01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1704     01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1705     01FF  00A3               	movwf	??_buttonMatrix
  1706     0200                     u707:
  1707     0200  0BA3               	decfsz	??_buttonMatrix,f
  1708     0201  2A00               	goto	u707
  1709     0202  0000               	nop
  1710     0203                     l1128:
  1711                           
  1712                           ;main.c: 193:         char read = ~PORTD & TRISD;
  1713     0203  1283               	bcf	3,5	;RP0=0, select bank0
  1714     0204  1303               	bcf	3,6	;RP1=0, select bank0
  1715     0205  0908               	comf	8,w	;volatile
  1716     0206  1683               	bsf	3,5	;RP0=1, select bank1
  1717     0207  1303               	bcf	3,6	;RP1=0, select bank1
  1718     0208  0508               	andwf	8,w	;volatile
  1719     0209  1283               	bcf	3,5	;RP0=0, select bank0
  1720     020A  1303               	bcf	3,6	;RP1=0, select bank0
  1721     020B  00A5               	movwf	buttonMatrix@read
  1722     020C                     l1130:
  1723                           
  1724                           ;main.c: 195:         for (char row = 0; row < 4; row++) {
  1725     020C  01A8               	clrf	buttonMatrix@row
  1726     020D                     l1136:
  1727                           
  1728                           ;main.c: 196:             if (read & (1 << row)) {
  1729     020D  3001               	movlw	1
  1730     020E  00A3               	movwf	??_buttonMatrix
  1731     020F  0A28               	incf	buttonMatrix@row,w
  1732     0210  2A13               	goto	u504
  1733     0211                     u505:
  1734     0211  1003               	clrc
  1735     0212  0DA3               	rlf	??_buttonMatrix,f
  1736     0213                     u504:
  1737     0213  3EFF               	addlw	-1
  1738     0214  1D03               	skipz
  1739     0215  2A11               	goto	u505
  1740     0216  0823               	movf	??_buttonMatrix,w
  1741     0217  0525               	andwf	buttonMatrix@read,w
  1742     0218  1903               	btfsc	3,2
  1743     0219  2A1B               	goto	u511
  1744     021A  2A1C               	goto	u510
  1745     021B                     u511:
  1746     021B  2A27               	goto	l1140
  1747     021C                     u510:
  1748     021C                     l1138:
  1749                           
  1750                           ;main.c: 197:                 k = row + col * 4;
  1751     021C  0827               	movf	buttonMatrix@col,w
  1752     021D  00A3               	movwf	??_buttonMatrix
  1753     021E  3002               	movlw	2
  1754     021F                     u525:
  1755     021F  1003               	clrc
  1756     0220  0DA3               	rlf	??_buttonMatrix,f
  1757     0221  3EFF               	addlw	-1
  1758     0222  1D03               	skipz
  1759     0223  2A1F               	goto	u525
  1760     0224  0828               	movf	buttonMatrix@row,w
  1761     0225  0723               	addwf	??_buttonMatrix,w
  1762     0226  00A6               	movwf	buttonMatrix@k
  1763     0227                     l1140:
  1764                           
  1765                           ;main.c: 199:         }
  1766     0227  3001               	movlw	1
  1767     0228  00FF               	movwf	btemp+1
  1768     0229  087F               	movf	btemp+1,w
  1769     022A  07A8               	addwf	buttonMatrix@row,f
  1770     022B                     l1142:
  1771     022B  3004               	movlw	4
  1772     022C  0228               	subwf	buttonMatrix@row,w
  1773     022D  1C03               	skipc
  1774     022E  2A30               	goto	u531
  1775     022F  2A31               	goto	u530
  1776     0230                     u531:
  1777     0230  2A0D               	goto	l1136
  1778     0231                     u530:
  1779     0231                     l1144:
  1780                           
  1781                           ;main.c: 200:     }
  1782     0231  3001               	movlw	1
  1783     0232  00FF               	movwf	btemp+1
  1784     0233  087F               	movf	btemp+1,w
  1785     0234  07A7               	addwf	buttonMatrix@col,f
  1786     0235                     l1146:
  1787     0235  3003               	movlw	3
  1788     0236  0227               	subwf	buttonMatrix@col,w
  1789     0237  1C03               	skipc
  1790     0238  2A3A               	goto	u541
  1791     0239  2A3B               	goto	u540
  1792     023A                     u541:
  1793     023A  29F3               	goto	l1124
  1794     023B                     u540:
  1795     023B                     l1148:
  1796                           
  1797                           ;main.c: 201:     return k;
  1798     023B  0826               	movf	buttonMatrix@k,w
  1799     023C                     l106:
  1800     023C  0008               	return
  1801     023D                     __end_of_buttonMatrix:
  1802                           
  1803                           	psect	text7
  1804     0395                     __ptext7:	
  1805 ;; *************** function _SendUARTString *****************
  1806 ;; Defined at:
  1807 ;;		line 222 in file "main.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  str             1    wreg     PTR unsigned char 
  1810 ;;		 -> STR_15(6), STR_14(6), STR_13(2), STR_12(2), 
  1811 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1812 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  1813 ;;		 -> STR_3(2), STR_2(2), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  str             1    2[BANK0 ] PTR unsigned char 
  1816 ;;		 -> STR_15(6), STR_14(6), STR_13(2), STR_12(2), 
  1817 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1818 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  1819 ;;		 -> STR_3(2), STR_2(2), 
  1820 ;;  i               2    0[BANK0 ] int 
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       3       0       0       0
  1832 ;;      Temps:          0       0       0       0       0
  1833 ;;      Totals:         0       3       0       0       0
  1834 ;;Total ram usage:        3 bytes
  1835 ;; Hardware stack levels used: 1
  1836 ;; Hardware stack levels required when called: 2
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;;		_buttonMatrix
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845     0395                     _SendUARTString:	
  1846                           ;psect for function _SendUARTString
  1847                           
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _SendUARTString: [wreg-fsr0h+status,2+status,0+pclath]
  1851                           ;SendUARTString@str stored from wreg
  1852     0395  1283               	bcf	3,5	;RP0=0, select bank0
  1853     0396  1303               	bcf	3,6	;RP1=0, select bank0
  1854     0397  00A2               	movwf	SendUARTString@str
  1855     0398                     l986:
  1856                           
  1857                           ;main.c: 223:     if (bottone_premuto)
  1858     0398  083B               	movf	_bottone_premuto,w
  1859     0399  1903               	btfsc	3,2
  1860     039A  2B9C               	goto	u321
  1861     039B  2B9D               	goto	u320
  1862     039C                     u321:
  1863     039C  2B9E               	goto	l990
  1864     039D                     u320:
  1865     039D  2BC3               	goto	l122
  1866     039E                     l990:
  1867                           
  1868                           ;main.c: 225:     int i = 0;
  1869     039E  01A0               	clrf	SendUARTString@i
  1870     039F  01A1               	clrf	SendUARTString@i+1
  1871                           
  1872                           ;main.c: 227:     while (str[i] != '\0') {
  1873     03A0  2BB4               	goto	l996
  1874     03A1                     l125:
  1875     03A1  1E0C               	btfss	12,4	;volatile
  1876     03A2  2BA4               	goto	u331
  1877     03A3  2BA5               	goto	u330
  1878     03A4                     u331:
  1879     03A4  2BA1               	goto	l125
  1880     03A5                     u330:
  1881     03A5                     l992:
  1882                           
  1883                           ;main.c: 230:         TXREG = str[i];
  1884     03A5  0820               	movf	SendUARTString@i,w
  1885     03A6  0722               	addwf	SendUARTString@str,w
  1886     03A7  0084               	movwf	4
  1887     03A8  120A  118A  22B6  120A  118A  	fcall	stringdir
  1888     03AD  0099               	movwf	25	;volatile
  1889     03AE                     l994:
  1890                           
  1891                           ;main.c: 231:         i++;
  1892     03AE  3001               	movlw	1
  1893     03AF  07A0               	addwf	SendUARTString@i,f
  1894     03B0  1803               	skipnc
  1895     03B1  0AA1               	incf	SendUARTString@i+1,f
  1896     03B2  3000               	movlw	0
  1897     03B3  07A1               	addwf	SendUARTString@i+1,f
  1898     03B4                     l996:
  1899                           
  1900                           ;main.c: 227:     while (str[i] != '\0') {
  1901     03B4  0820               	movf	SendUARTString@i,w
  1902     03B5  0722               	addwf	SendUARTString@str,w
  1903     03B6  0084               	movwf	4
  1904     03B7  120A  118A  22B6  120A  118A  	fcall	stringdir
  1905     03BC  3A00               	xorlw	0
  1906     03BD  1D03               	skipz
  1907     03BE  2BC0               	goto	u341
  1908     03BF  2BC1               	goto	u340
  1909     03C0                     u341:
  1910     03C0  2BA1               	goto	l125
  1911     03C1                     u340:
  1912     03C1                     l128:
  1913                           
  1914                           ;main.c: 233:     bottone_premuto = 1;
  1915     03C1  01BB               	clrf	_bottone_premuto
  1916     03C2  0ABB               	incf	_bottone_premuto,f
  1917     03C3                     l122:
  1918     03C3  0008               	return
  1919     03C4                     __end_of_SendUARTString:
  1920                           
  1921                           	psect	text8
  1922     0323                     __ptext8:	
  1923 ;; *************** function _ISR *****************
  1924 ;; Defined at:
  1925 ;;		line 237 in file "main.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;		None
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1939 ;;      Params:         0       0       0       0       0
  1940 ;;      Locals:         0       0       0       0       0
  1941 ;;      Temps:          4       0       0       0       0
  1942 ;;      Totals:         4       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; Hardware stack levels required when called: 1
  1946 ;; This function calls:
  1947 ;;		_CheckId
  1948 ;; This function is called by:
  1949 ;;		Interrupt level 1
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953     0323                     _ISR:	
  1954                           ;psect for function _ISR
  1955                           
  1956     0323                     i1l1216:
  1957                           
  1958                           ;main.c: 238:     if (RCIF) {
  1959     0323  1283               	bcf	3,5	;RP0=0, select bank0
  1960     0324  1303               	bcf	3,6	;RP1=0, select bank0
  1961     0325  1E8C               	btfss	12,5	;volatile
  1962     0326  2B28               	goto	u60_21
  1963     0327  2B29               	goto	u60_20
  1964     0328                     u60_21:
  1965     0328  2B52               	goto	i1l135
  1966     0329                     u60_20:
  1967     0329                     i1l1218:
  1968                           
  1969                           ;main.c: 239:         string[index] = RCREG;
  1970     0329  083A               	movf	_index,w
  1971     032A  3E3D               	addlw	(low (_string| 0))& (0+255)
  1972     032B  0084               	movwf	4
  1973     032C  081A               	movf	26,w	;volatile
  1974     032D  1383               	bcf	3,7	;select IRP bank0
  1975     032E  0080               	movwf	0
  1976     032F                     i1l1220:
  1977                           
  1978                           ;main.c: 241:         if (!CheckId(string[0]))
  1979     032F  083D               	movf	_string,w
  1980     0330  120A  118A  23EA  120A  118A  	fcall	_CheckId
  1981     0335  3A00               	xorlw	0
  1982     0336  1D03               	skipz
  1983     0337  2B39               	goto	u61_21
  1984     0338  2B3A               	goto	u61_20
  1985     0339                     u61_21:
  1986     0339  2B3B               	goto	i1l134
  1987     033A                     u61_20:
  1988     033A  2B52               	goto	i1l135
  1989     033B                     i1l134:
  1990                           
  1991                           ;main.c: 243:         RCIF = 0;
  1992     033B  1283               	bcf	3,5	;RP0=0, select bank0
  1993     033C  1303               	bcf	3,6	;RP1=0, select bank0
  1994     033D  128C               	bcf	12,5	;volatile
  1995     033E                     i1l1224:
  1996                           
  1997                           ;main.c: 245:         if (string[index] == 13) {
  1998     033E  083A               	movf	_index,w
  1999     033F  3E3D               	addlw	(low (_string| 0))& (0+255)
  2000     0340  0084               	movwf	4
  2001     0341  300D               	movlw	13
  2002     0342  1383               	bcf	3,7	;select IRP bank0
  2003     0343  0600               	xorwf	0,w
  2004     0344  1D03               	btfss	3,2
  2005     0345  2B47               	goto	u62_21
  2006     0346  2B48               	goto	u62_20
  2007     0347                     u62_21:
  2008     0347  2B4E               	goto	i1l1230
  2009     0348                     u62_20:
  2010     0348                     i1l1226:
  2011                           
  2012                           ;main.c: 246:             string[index] = '\0';
  2013     0348  083A               	movf	_index,w
  2014     0349  3E3D               	addlw	(low (_string| 0))& (0+255)
  2015     034A  0084               	movwf	4
  2016     034B  0180               	clrf	0
  2017     034C                     i1l1228:
  2018                           
  2019                           ;main.c: 247:             endsend = 1;
  2020     034C  01B9               	clrf	_endsend
  2021     034D  0AB9               	incf	_endsend,f
  2022     034E                     i1l1230:
  2023                           
  2024                           ;main.c: 249:         index++;
  2025     034E  3001               	movlw	1
  2026     034F  00FF               	movwf	btemp+1
  2027     0350  087F               	movf	btemp+1,w
  2028     0351  07BA               	addwf	_index,f
  2029     0352                     i1l135:
  2030     0352  0876               	movf	??_ISR+3,w
  2031     0353  00FF               	movwf	btemp+1
  2032     0354  0875               	movf	??_ISR+2,w
  2033     0355  008A               	movwf	10
  2034     0356  0874               	movf	??_ISR+1,w
  2035     0357  0084               	movwf	4
  2036     0358  0E73               	swapf	??_ISR,w
  2037     0359  0083               	movwf	3
  2038     035A  0EFE               	swapf	btemp,f
  2039     035B  0E7E               	swapf	btemp,w
  2040     035C  0009               	retfie
  2041     035D                     __end_of_ISR:
  2042                           
  2043                           	psect	intentry
  2044     0004                     __pintentry:	
  2045                           ;incstack = 0
  2046                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2047                           
  2048     0004                     interrupt_function:
  2049     007E                     saved_w	set	btemp
  2050     0004  00FE               	movwf	btemp
  2051     0005  0E03               	swapf	3,w
  2052     0006  00F3               	movwf	??_ISR
  2053     0007  0804               	movf	4,w
  2054     0008  00F4               	movwf	??_ISR+1
  2055     0009  080A               	movf	10,w
  2056     000A  00F5               	movwf	??_ISR+2
  2057     000B  087F               	movf	btemp+1,w
  2058     000C  00F6               	movwf	??_ISR+3
  2059     000D  120A  118A  2B23   	ljmp	_ISR
  2060                           
  2061                           	psect	text9
  2062     03EA                     __ptext9:	
  2063 ;; *************** function _CheckId *****************
  2064 ;; Defined at:
  2065 ;;		line 204 in file "main.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  id              1    wreg     unsigned char 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;  id              1    2[COMMON] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      unsigned char 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         0       0       0       0       0
  2080 ;;      Locals:         1       0       0       0       0
  2081 ;;      Temps:          2       0       0       0       0
  2082 ;;      Totals:         3       0       0       0       0
  2083 ;;Total ram usage:        3 bytes
  2084 ;; Hardware stack levels used: 1
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_ISR
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092     03EA                     _CheckId:	
  2093                           ;psect for function _CheckId
  2094                           
  2095                           
  2096                           ;incstack = 0
  2097                           ; Regs used in _CheckId: [wreg+status,2+status,0]
  2098                           ;CheckId@id stored from wreg
  2099     03EA  00F2               	movwf	CheckId@id
  2100     03EB                     i1l1152:
  2101                           
  2102                           ;main.c: 205:     return !(0x7e - id);
  2103     03EB  3000               	movlw	0
  2104     03EC  00F1               	movwf	??_CheckId+1
  2105     03ED  0872               	movf	CheckId@id,w
  2106     03EE  3C7E               	sublw	126
  2107     03EF  00F0               	movwf	??_CheckId
  2108     03F0  1C03               	skipc
  2109     03F1  03F1               	decf	??_CheckId+1,f
  2110     03F2  0870               	movf	??_CheckId,w
  2111     03F3  0471               	iorwf	??_CheckId+1,w
  2112     03F4  1903               	btfsc	3,2
  2113     03F5  2BF7               	goto	u55_21
  2114     03F6  2BF9               	goto	u55_20
  2115     03F7                     u55_21:
  2116     03F7  3001               	movlw	1
  2117     03F8  2BFA               	goto	u56_20
  2118     03F9                     u55_20:
  2119     03F9  3000               	movlw	0
  2120     03FA                     u56_20:
  2121     03FA                     i1l115:
  2122     03FA  0008               	return
  2123     03FB                     __end_of_CheckId:
  2124     007E                     btemp	set	126	;btemp
  2125     007E                     wtemp0	set	126
  2126                           
  2127                           	psect	config
  2128                           
  2129                           ;Config register CONFIG @ 0x2007
  2130                           ;	Oscillator Selection bits
  2131                           ;	FOSC = HS, HS oscillator
  2132                           ;	Watchdog Timer Enable bit
  2133                           ;	WDTE = OFF, WDT disabled
  2134                           ;	Power-up Timer Enable bit
  2135                           ;	PWRTE = ON, PWRT enabled
  2136                           ;	Brown-out Reset Enable bit
  2137                           ;	BOREN = ON, BOR enabled
  2138                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2139                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2140                           ;	Data EEPROM Memory Code Protection bit
  2141                           ;	CPD = OFF, Data EEPROM code protection off
  2142                           ;	Flash Program Memory Write Enable bits
  2143                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2144                           ;	In-Circuit Debugger Mode bit
  2145                           ;	DEBUG = 0x1, unprogrammed default
  2146                           ;	Flash Program Memory Code Protection bit
  2147                           ;	CP = OFF, Code protection off
  2148     2007                     	org	8199
  2149     2007  3FF2               	dw	16370

Data Sizes:
    Strings     42
    Constant    3
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     25      39
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printStringLCD@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[6]), string(BANK0[10]), 

    SendUARTString@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_10(CODE[2]), STR_11(CODE[2]), STR_12(CODE[2]), STR_13(CODE[2]), 
		 -> STR_14(CODE[6]), STR_15(CODE[6]), STR_2(CODE[2]), STR_3(CODE[2]), 
		 -> STR_4(CODE[2]), STR_5(CODE[2]), STR_6(CODE[2]), STR_7(CODE[2]), 
		 -> STR_8(CODE[2]), STR_9(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_CheckId

Critical Paths under _main in BANK0

    _main->_initUART
    _printStringLCD->_sendLCD
    _initUART->___aldiv
    _initLCD->_sendLCD
    _buttonMatrix->_SendUARTString

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4535
                                             23 BANK0      2     2      0
                     _SendUARTString
                       _buttonMatrix
                            _initLCD
                           _initUART
                     _printStringLCD
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _printStringLCD                                       3     1      2    1046
                                              4 BANK0      3     1      2
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUART                                             8     4      4     550
                                             15 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     804
                                              4 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _sendLCD                                              4     3      1     804
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _buttonMatrix                                         6     6      0     779
                                              3 BANK0      6     6      0
                     _SendUARTString
 ---------------------------------------------------------------------------------
 (2) _SendUARTString                                       3     3      0     552
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0      22
                                              3 COMMON     4     4      0
                            _CheckId
 ---------------------------------------------------------------------------------
 (4) _CheckId                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendUARTString
   _buttonMatrix
     _SendUARTString
   _initLCD
     _sendLCD
   _initUART
     ___aldiv
   _printStringLCD
     _sendLCD
   _sendLCD

 _ISR (ROOT)
   _CheckId

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      27       5       48.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2E      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 02 15:03:34 2024

                      _x 003C                        pc 0002                       l92 02AB  
                     l95 03E9                       l98 0365                       l99 0394  
                     fsr 0004                      l102 0392                      l122 03C3  
                    l106 023C                      l125 03A1                      l118 0322  
                    l128 03C1                      l287 011A                      l297 01A2  
                    l980 03D9                      l972 03C7                      l990 039E  
                    l982 03DC                      l974 03C8                      l992 03A5  
                    l984 03E6                      l976 03CA                      l994 03AE  
                    l986 0398                      l978 03CF                      l996 03B4  
                    l998 0106                      u320 039D                      u321 039C  
                    u330 03A5                      u410 016C                      u331 03A4  
                    u411 016B                      u340 03C1                      u341 03C0  
                    u405 0153                      u510 021C                      u430 018A  
                    u350 010D                      u511 021B                      u431 0189  
                    u415 0168                      u351 010C                      u504 0213  
                    u440 018F                      u360 011E                      u505 0211  
                    u441 018E                      u425 017C                      u361 011D  
                    u530 0231                      u370 013D                      u450 0300  
                    u531 0230                      u371 013C                      u540 023B  
                    u460 0364                      _ISR 0323                      u541 023A  
                    u525 021F                      u461 0363                      u390 0151  
                    u470 0392                      u391 0150                      u455 02FB  
                    u471 0391                      u480 01B5                      u481 01B4  
                    u385 0142                      u490 01D5                      u570 005F  
                    u707 0200                      u491 01D4                      u571 005E  
                    u580 0078                      u637 024A                      u581 0077  
                    u590 0080                      u647 025E                      u591 007F  
                    u657 0271                      u667 03D5                      u677 03E2  
                    u687 01BB                      u697 01DB                      fsr0 0004  
                    indf 0000                     ?_ISR 0070                     l1000 0109  
                   l1010 0135                     l1002 010D                     l1020 0151  
                   l1012 013D                     l1004 011E                     l1102 01CB  
                   l1030 0184                     l1022 015A                     l1014 0140  
                   l1006 0129                     l1104 01D5                     l1040 023D  
                   l1024 016C                     l1016 0149                     l1032 018A  
                   l1008 012D                     l1200 00B9                     l1130 020C  
                   l1106 01E0                     l1114 01EA                     l1050 0258  
                   l1042 0240                     l1034 018F                     l1026 017A  
                   l1018 014D                     l1202 00C0                     l1210 00D5  
                   l1140 0227                     l1124 01F3                     l1116 01EC  
                   l1108 01E3                     l1060 0287                     l1052 0262  
                   l1044 0244                     l1036 019A                     l1028 017B  
                   l1204 00C7                     l1142 022B                     l1126 01FC  
                   l1118 01F0                     l1062 0290                     l1054 026B  
                   l1046 024E                     l1070 02F2                     l1206 00CE  
                   l1144 0231                     l1136 020D                     l1128 0203  
                   l1064 0299                     l1056 0275                     l1048 0251  
                   l1072 031F                     l1160 0046                     l1146 0235  
                   l1138 021C                     l1090 01AB                     l1066 02A2  
                   l1058 027E                     l1074 0320                     l1082 0368  
                   l1170 005F                     l1162 004F                     l1148 023B  
                   l1092 01B5                     l1076 0321                     l1068 02E9  
                   l1084 037B                     l1252 00DD                     l1180 007A  
                   l1172 0061                     l1164 0053                     l1156 0027  
                   l1094 01C0                     l1086 0381                     l1078 035D  
                   l1190 0096                     l1174 006A                     l1166 0055  
                   l1158 003B                     l1096 01C3                     l1088 01A3  
                   l1192 009D                     l1184 0081                     l1176 0072  
                   l1168 0058                     l1098 01C9                     l1194 00A4  
                   l1186 0088                     l1178 0078                     l1196 00AB  
                   l1188 008F                     l1198 00B2                     STR_1 02CB  
                   STR_2 02D7                     STR_3 02D9                     STR_4 02DB  
                   STR_5 02DD                     STR_6 02DF                     STR_7 02E1  
                   STR_8 02E3                     STR_9 02E5                     _RCIF 0065  
                   _main 0027                     btemp 007E                     start 0010  
        __end_of_CheckId 03FB                    ??_ISR 0073          __end_of___aldiv 01A3  
                  ?_main 0070                    STR_10 02E7                    STR_11 02D3  
                  STR_12 02D5                    STR_13 02D1                    STR_14 02C5  
                  STR_15 02BF                    i1l115 03FA                    i1l134 033B  
                  i1l135 0352                    _RCREG 001A                    _SPBRG 0099  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  u60_20 0329                    u60_21 0328                    u61_20 033A  
                  u61_21 0339                    u62_20 0348                    u62_21 0347  
                  u55_20 03F9                    u55_21 03F7                    u56_20 03FA  
                  _TRISA 0085                    _TRISB 0086                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019          __end_of_initLCD 02AC  
                  _index 003A          __end_of_sendLCD 03EA                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0013  
           __end_of_main 0106                   ??_main 0037                   _ADCON1 009F  
              ??_CheckId 0070                   i1l1220 032F                   i1l1230 034E  
                 i1l1152 03EB                   i1l1224 033E                   i1l1216 0323  
                 i1l1226 0348                   i1l1218 0329                   i1l1228 034C  
          ?_buttonMatrix 0070                ??___aldiv 0028         __end_of_initUART 0323  
       ??_printStringLCD 0077                   _string 003D                ??_initLCD 0024  
              ??_sendLCD 0021                   saved_w 007E         initUART@baudRate 002F  
         ??_buttonMatrix 0023  __end_of__initialization 0023              sendLCD@dato 0023  
         __pcstackCOMMON 0070     __end_of_columnConfig 02BF               __pbssBANK0 0039  
             __pmaintext 0027               __pintentry 0004               __stringtab 02AC  
                _CheckId 03EA                ?_initUART 002F                  ___aldiv 0106  
   __end_of_buttonMatrix 023D                  __ptext1 035D                  __ptext2 02E9  
                __ptext3 0106                  __ptext4 023D                  __ptext5 03C4  
                __ptext6 01A3                  __ptext7 0395                  __ptext8 0323  
                __ptext9 03EA                  _endsend 0039          SendUARTString@i 0020  
                _initLCD 023D                CheckId@id 0072                  _sendLCD 03C4  
       ___aldiv@dividend 0024          printStringLCD@i 0026          printStringLCD@s 0024  
   end_of_initialization 0023               ??_initUART 0033                _RCSTAbits 0018  
       ___aldiv@quotient 002B                _PORTEbits 0009          _bottone_premuto 003B  
        buttonMatrix@col 0027          buttonMatrix@row 0028                _TRISCbits 0087  
           _columnConfig 02BC                _TXSTAbits 0098      start_initialization 0013  
            __end_of_ISR 035D           _SendUARTString 0395                ___latbits 0002  
          __pcstackBANK0 0020   __end_of_SendUARTString 03C4                 ?_CheckId 0070  
           _buttonMatrix 01A3                 ?___aldiv 0020                __pstrings 02AC  
               ?_initLCD 0070        SendUARTString@str 0022                 ?_sendLCD 0020  
        ?_SendUARTString 0070          ___aldiv@divisor 0020        interrupt_function 0004  
        ___aldiv@counter 0029                 _PIE1bits 008C                 _PIR1bits 000C  
            __stringbase 02BB                sendLCD@rs 0020       __end_of__stringtab 02BC  
         _printStringLCD 035D                 _initUART 02E9            buttonMatrix@k 0026  
             _INTCONbits 000B   __end_of_printStringLCD 0395                 intlevel1 0000  
              stringcode 02B6         ??_SendUARTString 0077                 stringdir 02B6  
               stringtab 02AC             ___aldiv@sign 002A          ?_printStringLCD 0024  
       buttonMatrix@read 0025  
