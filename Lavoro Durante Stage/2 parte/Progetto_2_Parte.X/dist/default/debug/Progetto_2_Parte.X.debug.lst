

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Feb 17 14:59:40 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Generated 22/03/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010D                     	;# 
   112     010E                     	;# 
   113     010F                     	;# 
   114     018C                     	;# 
   115     018D                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0007                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     000C                     	;# 
   129     000D                     	;# 
   130     000E                     	;# 
   131     000E                     	;# 
   132     000F                     	;# 
   133     0010                     	;# 
   134     0011                     	;# 
   135     0012                     	;# 
   136     0013                     	;# 
   137     0014                     	;# 
   138     0015                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0017                     	;# 
   142     0018                     	;# 
   143     0019                     	;# 
   144     001A                     	;# 
   145     001B                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001D                     	;# 
   149     001E                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     0087                     	;# 
   155     0088                     	;# 
   156     0089                     	;# 
   157     008C                     	;# 
   158     008D                     	;# 
   159     008E                     	;# 
   160     0091                     	;# 
   161     0092                     	;# 
   162     0093                     	;# 
   163     0094                     	;# 
   164     0098                     	;# 
   165     0099                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     009F                     	;# 
   170     010C                     	;# 
   171     010D                     	;# 
   172     010E                     	;# 
   173     010F                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176                           
   177                           	psect	strings
   178     0300                     __pstrings:
   179     0300                     stringtab:
   180     0300                     __stringtab:
   181                           
   182                           ;	String table - string pointers are 1 byte each
   183     0300  1BFF               	btfsc	btemp+1,7
   184     0301  2B0A               	ljmp	stringcode
   185     0302  1383               	bcf	3,7
   186     0303  187F               	btfsc	btemp+1,0
   187     0304  1783               	bsf	3,7
   188     0305  0800               	movf	0,w
   189     0306  0A84               	incf	4,f
   190     0307  1903               	skipnz
   191     0308  0AFF               	incf	btemp+1,f
   192     0309  0008               	return
   193     030A                     stringcode:
   194     030A                     stringdir:
   195     030A  3003               	movlw	high stringdir
   196     030B  008A               	movwf	10
   197     030C  0804               	movf	4,w
   198     030D  0A84               	incf	4,f
   199     030E  0782               	addwf	2,f
   200     030F                     __stringbase:
   201     030F  3400               	retlw	0
   202     0310                     __end_of__stringtab:
   203     0310                     _columnConfig:
   204     0310  34FE               	retlw	254
   205     0311  34FD               	retlw	253
   206     0312  34FB               	retlw	251
   207     0313                     __end_of_columnConfig:
   208     001A                     _RCREG	set	26
   209     0019                     _TXREG	set	25
   210     000C                     _PIR1bits	set	12
   211     000B                     _INTCONbits	set	11
   212     0018                     _RCSTAbits	set	24
   213     0005                     _PORTA	set	5
   214     0006                     _PORTB	set	6
   215     0008                     _PORTD	set	8
   216     0009                     _PORTEbits	set	9
   217     0065                     _RCIF	set	101
   218     008C                     _PIE1bits	set	140
   219     0099                     _SPBRG	set	153
   220     0098                     _TXSTAbits	set	152
   221     0087                     _TRISCbits	set	135
   222     0086                     _TRISB	set	134
   223     0089                     _TRISE	set	137
   224     0088                     _TRISD	set	136
   225     0085                     _TRISA	set	133
   226     009F                     _ADCON1	set	159
   227     0313                     STR_15:
   228     0313  3454               	retlw	84	;'T'
   229     0314  3452               	retlw	82	;'R'
   230     0315  3449               	retlw	73	;'I'
   231     0316  3453               	retlw	83	;'S'
   232     0317  3441               	retlw	65	;'A'
   233     0318  3400               	retlw	0
   234     0319                     STR_14:
   235     0319  3454               	retlw	84	;'T'
   236     031A  3452               	retlw	82	;'R'
   237     031B  3449               	retlw	73	;'I'
   238     031C  3453               	retlw	83	;'S'
   239     031D  3442               	retlw	66	;'B'
   240     031E  3400               	retlw	0
   241     031F                     STR_1:
   242     031F  3463               	retlw	99	;'c'
   243     0320  3469               	retlw	105	;'i'
   244     0321  3461               	retlw	97	;'a'
   245     0322  346F               	retlw	111	;'o'
   246     0323  3400               	retlw	0
   247     0324                     STR_13:
   248     0324  3423               	retlw	35	;'#'
   249     0325  3400               	retlw	0
   250     0326                     STR_11:
   251     0326  342A               	retlw	42	;'*'
   252     0327  3400               	retlw	0
   253     0328                     STR_12:
   254     0328  3430               	retlw	48	;'0'
   255     0329  3400               	retlw	0
   256     032A                     STR_2:
   257     032A  3431               	retlw	49	;'1'
   258     032B  3400               	retlw	0
   259     032C                     STR_3:
   260     032C  3432               	retlw	50	;'2'
   261     032D  3400               	retlw	0
   262     032E                     STR_4:
   263     032E  3433               	retlw	51	;'3'
   264     032F  3400               	retlw	0
   265     0330                     STR_5:
   266     0330  3434               	retlw	52	;'4'
   267     0331  3400               	retlw	0
   268     0332                     STR_6:
   269     0332  3435               	retlw	53	;'5'
   270     0333  3400               	retlw	0
   271     0334                     STR_7:
   272     0334  3436               	retlw	54	;'6'
   273     0335  3400               	retlw	0
   274     0336                     STR_8:
   275     0336  3437               	retlw	55	;'7'
   276     0337  3400               	retlw	0
   277     0338                     STR_9:
   278     0338  3438               	retlw	56	;'8'
   279     0339  3400               	retlw	0
   280     033A                     STR_10:
   281     033A  3439               	retlw	57	;'9'
   282     033B  3400               	retlw	0
   283                           
   284                           	psect	cinit
   285     0013                     start_initialization:	
   286                           ; #config settings
   287                           
   288     0013                     __initialization:
   289                           
   290                           ; Clear objects allocated to COMMON
   291     0013  01F9               	clrf	__pbssCOMMON& (0+127)
   292                           
   293                           ; Clear objects allocated to BANK0
   294     0014  1283               	bcf	3,5	;RP0=0, select bank0
   295     0015  1303               	bcf	3,6	;RP1=0, select bank0
   296     0016  01B4               	clrf	__pbssBANK0& (0+127)
   297     0017  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   298     0018  01B6               	clrf	(__pbssBANK0+2)& (0+127)
   299     0019  01B7               	clrf	(__pbssBANK0+3)& (0+127)
   300     001A  01B8               	clrf	(__pbssBANK0+4)& (0+127)
   301     001B  01B9               	clrf	(__pbssBANK0+5)& (0+127)
   302     001C  01BA               	clrf	(__pbssBANK0+6)& (0+127)
   303     001D  01BB               	clrf	(__pbssBANK0+7)& (0+127)
   304     001E  01BC               	clrf	(__pbssBANK0+8)& (0+127)
   305     001F  01BD               	clrf	(__pbssBANK0+9)& (0+127)
   306     0020  01BE               	clrf	(__pbssBANK0+10)& (0+127)
   307     0021  01BF               	clrf	(__pbssBANK0+11)& (0+127)
   308     0022  01C0               	clrf	(__pbssBANK0+12)& (0+127)
   309     0023                     end_of_initialization:	
   310                           ;End of C runtime variable initialization code
   311                           
   312     0023                     __end_of__initialization:
   313     0023  0183               	clrf	3
   314     0024  120A  118A  2827   	ljmp	_main	;jump to C main() function
   315                           
   316                           	psect	bssCOMMON
   317     0079                     __pbssCOMMON:
   318     0079                     _bottone_premuto:
   319     0079                     	ds	1
   320                           
   321                           	psect	bssBANK0
   322     0034                     __pbssBANK0:
   323     0034                     _endsend:
   324     0034                     	ds	1
   325     0035                     _index:
   326     0035                     	ds	1
   327     0036                     _x:
   328     0036                     	ds	1
   329     0037                     _string:
   330     0037                     	ds	10
   331                           
   332                           	psect	cstackCOMMON
   333     0070                     __pcstackCOMMON:
   334     0070                     ?_initLCD:
   335     0070                     ?_buttonMatrix:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ?_main:	
   339                           ; 1 bytes @ 0x0
   340                           
   341     0070                     ?_ISR:	
   342                           ; 1 bytes @ 0x0
   343                           
   344     0070                     ??_ISR:	
   345                           ; 1 bytes @ 0x0
   346                           
   347                           
   348                           ; 1 bytes @ 0x0
   349     0070                     	ds	4
   350     0074                     ?_sendLCD:
   351     0074                     ??___aldiv:	
   352                           ; 1 bytes @ 0x4
   353                           
   354     0074                     sendLCD@rs:	
   355                           ; 1 bytes @ 0x4
   356                           
   357                           
   358                           ; 1 bytes @ 0x4
   359     0074                     	ds	1
   360     0075                     ??_initUART:
   361     0075                     ??_sendLCD:	
   362                           ; 1 bytes @ 0x5
   363                           
   364                           
   365                           ; 1 bytes @ 0x5
   366     0075                     	ds	2
   367     0077                     sendLCD@dato:
   368                           
   369                           ; 1 bytes @ 0x7
   370     0077                     	ds	1
   371     0078                     ??_printStringLCD:
   372     0078                     printStringLCD@i:	
   373                           ; 1 bytes @ 0x8
   374                           
   375                           
   376                           ; 1 bytes @ 0x8
   377     0078                     	ds	1
   378                           
   379                           	psect	cstackBANK0
   380     0020                     __pcstackBANK0:
   381     0020                     ??_initLCD:
   382     0020                     ?_printStringLCD:	
   383                           ; 1 bytes @ 0x0
   384                           
   385     0020                     ?___aldiv:	
   386                           ; 1 bytes @ 0x0
   387                           
   388     0020                     printStringLCD@s:	
   389                           ; 4 bytes @ 0x0
   390                           
   391     0020                     ___aldiv@divisor:	
   392                           ; 2 bytes @ 0x0
   393                           
   394                           
   395                           ; 4 bytes @ 0x0
   396     0020                     	ds	2
   397     0022                     ??_buttonMatrix:
   398                           
   399                           ; 1 bytes @ 0x2
   400     0022                     	ds	2
   401     0024                     buttonMatrix@read:
   402     0024                     ___aldiv@dividend:	
   403                           ; 1 bytes @ 0x4
   404                           
   405                           
   406                           ; 4 bytes @ 0x4
   407     0024                     	ds	1
   408     0025                     buttonMatrix@k:
   409                           
   410                           ; 1 bytes @ 0x5
   411     0025                     	ds	1
   412     0026                     buttonMatrix@col:
   413                           
   414                           ; 1 bytes @ 0x6
   415     0026                     	ds	1
   416     0027                     buttonMatrix@row:
   417                           
   418                           ; 1 bytes @ 0x7
   419     0027                     	ds	1
   420     0028                     ___aldiv@counter:
   421                           
   422                           ; 1 bytes @ 0x8
   423     0028                     	ds	1
   424     0029                     ___aldiv@sign:
   425                           
   426                           ; 1 bytes @ 0x9
   427     0029                     	ds	1
   428     002A                     ___aldiv@quotient:
   429                           
   430                           ; 4 bytes @ 0xA
   431     002A                     	ds	4
   432     002E                     ?_initUART:
   433     002E                     initUART@baudRate:	
   434                           ; 1 bytes @ 0xE
   435                           
   436                           
   437                           ; 4 bytes @ 0xE
   438     002E                     	ds	4
   439     0032                     ??_main:
   440                           
   441                           ; 1 bytes @ 0x12
   442     0032                     	ds	2
   443                           
   444                           	psect	maintext
   445     0027                     __pmaintext:	
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 57 in file "main.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;		None
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   460 ;; Tracked objects:
   461 ;;		On entry : B00/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   465 ;;      Params:         0       0       0       0       0
   466 ;;      Locals:         0       0       0       0       0
   467 ;;      Temps:          0       2       0       0       0
   468 ;;      Totals:         0       2       0       0       0
   469 ;;Total ram usage:        2 bytes
   470 ;; Hardware stack levels required when called: 4
   471 ;; This function calls:
   472 ;;		_buttonMatrix
   473 ;;		_initLCD
   474 ;;		_initUART
   475 ;;		_printStringLCD
   476 ;;		_sendLCD
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482     0027                     _main:	
   483                           ;psect for function _main
   484                           
   485     0027                     l1335:	
   486                           ;incstack = 0
   487                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   488                           
   489                           
   490                           ;main.c: 58:     initLCD();
   491     0027  120A  118A  226B  120A  118A  	fcall	_initLCD
   492                           
   493                           ;main.c: 59:     initUART(9600);
   494     002C  3000               	movlw	0
   495     002D  1283               	bcf	3,5	;RP0=0, select bank0
   496     002E  1303               	bcf	3,6	;RP1=0, select bank0
   497     002F  00B1               	movwf	initUART@baudRate+3
   498     0030  3000               	movlw	0
   499     0031  00B0               	movwf	initUART@baudRate+2
   500     0032  3025               	movlw	37
   501     0033  00AF               	movwf	initUART@baudRate+1
   502     0034  3080               	movlw	128
   503     0035  00AE               	movwf	initUART@baudRate
   504     0036  120A  118A  233C  120A  118A  	fcall	_initUART
   505     003B                     l1337:
   506                           
   507                           ;main.c: 61:     printStringLCD("ciao");
   508     003B  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   509     003C  1283               	bcf	3,5	;RP0=0, select bank0
   510     003D  1303               	bcf	3,6	;RP1=0, select bank0
   511     003E  00A0               	movwf	printStringLCD@s
   512     003F  3080               	movlw	128
   513     0040  00A1               	movwf	printStringLCD@s+1
   514     0041  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   515     0046                     l1339:
   516                           
   517                           ;main.c: 62:     sendLCD(0xC0, 0);
   518     0046  01F4               	clrf	sendLCD@rs
   519     0047  30C0               	movlw	192
   520     0048  120A  118A  23D6  120A  118A  	fcall	_sendLCD
   521     004D                     l1341:
   522                           
   523                           ;main.c: 64:     ADCON1 = 0x06;
   524     004D  3006               	movlw	6
   525     004E  1683               	bsf	3,5	;RP0=1, select bank1
   526     004F  1303               	bcf	3,6	;RP1=0, select bank1
   527     0050  009F               	movwf	31	;volatile
   528     0051                     l1343:
   529                           
   530                           ;main.c: 65:     TRISA = 0x20;
   531     0051  3020               	movlw	32
   532     0052  0085               	movwf	5	;volatile
   533     0053                     l1345:
   534                           
   535                           ;main.c: 68:         if(endsend){
   536     0053  1283               	bcf	3,5	;RP0=0, select bank0
   537     0054  1303               	bcf	3,6	;RP1=0, select bank0
   538     0055  0834               	movf	_endsend,w
   539     0056  1903               	btfsc	3,2
   540     0057  2859               	goto	u621
   541     0058  285A               	goto	u620
   542     0059                     u621:
   543     0059  2865               	goto	l1351
   544     005A                     u620:
   545     005A                     l1347:
   546                           
   547                           ;main.c: 69:             endsend = 0;
   548     005A  01B4               	clrf	_endsend
   549                           
   550                           ;main.c: 70:             index = 0;
   551     005B  01B5               	clrf	_index
   552     005C                     l1349:
   553                           
   554                           ;main.c: 71:             printStringLCD(string);
   555     005C  3037               	movlw	(low (_string| 0))& (0+255)
   556     005D  00A0               	movwf	printStringLCD@s
   557     005E  3000               	movlw	0
   558     005F  00A1               	movwf	printStringLCD@s+1
   559     0060  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   560     0065                     l1351:
   561                           
   562                           ;main.c: 73:         x = buttonMatrix();
   563     0065  120A  118A  212A  120A  118A  	fcall	_buttonMatrix
   564     006A  1283               	bcf	3,5	;RP0=0, select bank0
   565     006B  1303               	bcf	3,6	;RP1=0, select bank0
   566     006C  00B6               	movwf	_x
   567     006D                     l1353:
   568                           
   569                           ;main.c: 74:         if (x == 99) {
   570     006D  3063               	movlw	99
   571     006E  0636               	xorwf	_x,w
   572     006F  1D03               	btfss	3,2
   573     0070  2872               	goto	u631
   574     0071  2873               	goto	u630
   575     0072                     u631:
   576     0072  2875               	goto	l1357
   577     0073                     u630:
   578     0073                     l1355:
   579                           
   580                           ;main.c: 75:             bottone_premuto = 0;
   581     0073  01F9               	clrf	_bottone_premuto
   582                           
   583                           ;main.c: 76:             continue;
   584     0074  2853               	goto	l1345
   585     0075                     l1357:
   586                           
   587                           ;main.c: 78:         TRISD = 0x00;
   588     0075  1683               	bsf	3,5	;RP0=1, select bank1
   589     0076  1303               	bcf	3,6	;RP1=0, select bank1
   590     0077  0188               	clrf	8	;volatile
   591     0078                     l1359:
   592                           
   593                           ;main.c: 79:         if (x == 55)
   594     0078  3037               	movlw	55
   595     0079  1283               	bcf	3,5	;RP0=0, select bank0
   596     007A  1303               	bcf	3,6	;RP1=0, select bank0
   597     007B  0636               	xorwf	_x,w
   598     007C  1D03               	btfss	3,2
   599     007D  287F               	goto	u641
   600     007E  2880               	goto	u640
   601     007F                     u641:
   602     007F  28F9               	goto	l1389
   603     0080                     u640:
   604     0080  2853               	goto	l1345
   605     0081                     l1363:
   606                           
   607                           ;main.c: 84:                 printStringLCD("1");
   608     0081  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   609     0082  00A0               	movwf	printStringLCD@s
   610     0083  3080               	movlw	128
   611     0084  00A1               	movwf	printStringLCD@s+1
   612     0085  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   613                           
   614                           ;main.c: 85:                 break;
   615     008A  2853               	goto	l1345
   616     008B                     l1365:
   617                           
   618                           ;main.c: 87:                 printStringLCD("2");
   619     008B  301D               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   620     008C  00A0               	movwf	printStringLCD@s
   621     008D  3080               	movlw	128
   622     008E  00A1               	movwf	printStringLCD@s+1
   623     008F  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   624                           
   625                           ;main.c: 88:                 break;
   626     0094  2853               	goto	l1345
   627     0095                     l1367:
   628                           
   629                           ;main.c: 90:                 printStringLCD("3");
   630     0095  301F               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   631     0096  00A0               	movwf	printStringLCD@s
   632     0097  3080               	movlw	128
   633     0098  00A1               	movwf	printStringLCD@s+1
   634     0099  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   635                           
   636                           ;main.c: 91:                 break;
   637     009E  2853               	goto	l1345
   638     009F                     l1369:
   639                           
   640                           ;main.c: 93:                 printStringLCD("4");
   641     009F  3021               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   642     00A0  00A0               	movwf	printStringLCD@s
   643     00A1  3080               	movlw	128
   644     00A2  00A1               	movwf	printStringLCD@s+1
   645     00A3  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   646                           
   647                           ;main.c: 94:                 break;
   648     00A8  2853               	goto	l1345
   649     00A9                     l1371:
   650                           
   651                           ;main.c: 96:                 printStringLCD("5");
   652     00A9  3023               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   653     00AA  00A0               	movwf	printStringLCD@s
   654     00AB  3080               	movlw	128
   655     00AC  00A1               	movwf	printStringLCD@s+1
   656     00AD  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   657                           
   658                           ;main.c: 97:                 break;
   659     00B2  2853               	goto	l1345
   660     00B3                     l1373:
   661                           
   662                           ;main.c: 99:                 printStringLCD("6");
   663     00B3  3025               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   664     00B4  00A0               	movwf	printStringLCD@s
   665     00B5  3080               	movlw	128
   666     00B6  00A1               	movwf	printStringLCD@s+1
   667     00B7  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   668                           
   669                           ;main.c: 100:                 break;
   670     00BC  2853               	goto	l1345
   671     00BD                     l1375:
   672                           
   673                           ;main.c: 102:                 printStringLCD("7");
   674     00BD  3027               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   675     00BE  00A0               	movwf	printStringLCD@s
   676     00BF  3080               	movlw	128
   677     00C0  00A1               	movwf	printStringLCD@s+1
   678     00C1  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   679                           
   680                           ;main.c: 103:                 break;
   681     00C6  2853               	goto	l1345
   682     00C7                     l1377:
   683                           
   684                           ;main.c: 105:                 printStringLCD("8");
   685     00C7  3029               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   686     00C8  00A0               	movwf	printStringLCD@s
   687     00C9  3080               	movlw	128
   688     00CA  00A1               	movwf	printStringLCD@s+1
   689     00CB  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   690                           
   691                           ;main.c: 106:                 break;
   692     00D0  2853               	goto	l1345
   693     00D1                     l1379:
   694                           
   695                           ;main.c: 108:                 printStringLCD("9");
   696     00D1  302B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
   697     00D2  00A0               	movwf	printStringLCD@s
   698     00D3  3080               	movlw	128
   699     00D4  00A1               	movwf	printStringLCD@s+1
   700     00D5  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   701                           
   702                           ;main.c: 109:                 break;
   703     00DA  2853               	goto	l1345
   704     00DB                     l1381:
   705                           
   706                           ;main.c: 111:                 printStringLCD("*");
   707     00DB  3017               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
   708     00DC  00A0               	movwf	printStringLCD@s
   709     00DD  3080               	movlw	128
   710     00DE  00A1               	movwf	printStringLCD@s+1
   711     00DF  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   712                           
   713                           ;main.c: 112:                 break;
   714     00E4  2853               	goto	l1345
   715     00E5                     l1383:
   716                           
   717                           ;main.c: 114:                 printStringLCD("0");
   718     00E5  3019               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
   719     00E6  00A0               	movwf	printStringLCD@s
   720     00E7  3080               	movlw	128
   721     00E8  00A1               	movwf	printStringLCD@s+1
   722     00E9  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   723                           
   724                           ;main.c: 115:                 break;
   725     00EE  2853               	goto	l1345
   726     00EF                     l1385:
   727                           
   728                           ;main.c: 117:                 printStringLCD("#");
   729     00EF  3015               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
   730     00F0  00A0               	movwf	printStringLCD@s
   731     00F1  3080               	movlw	128
   732     00F2  00A1               	movwf	printStringLCD@s+1
   733     00F3  120A  118A  2376  120A  118A  	fcall	_printStringLCD
   734                           
   735                           ;main.c: 118:                 break;
   736     00F8  2853               	goto	l1345
   737     00F9                     l1389:
   738     00F9  0836               	movf	_x,w
   739     00FA  00B2               	movwf	??_main
   740     00FB  01B3               	clrf	??_main+1
   741                           
   742                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   743                           ; Switch size 1, requested type "simple"
   744                           ; Number of cases is 1, Range of values is 0 to 0
   745                           ; switch strategies available:
   746                           ; Name         Instructions Cycles
   747                           ; simple_byte            4     3 (average)
   748                           ; direct_byte           11     8 (fixed)
   749                           ; jumptable            260     6 (fixed)
   750                           ;	Chosen strategy is simple_byte
   751     00FC  0833               	movf	??_main+1,w
   752     00FD  3A00               	xorlw	0	; case 0
   753     00FE  1903               	skipnz
   754     00FF  2901               	goto	l1415
   755     0100  2853               	goto	l1345
   756     0101                     l1415:
   757                           
   758                           ; Switch size 1, requested type "simple"
   759                           ; Number of cases is 12, Range of values is 0 to 11
   760                           ; switch strategies available:
   761                           ; Name         Instructions Cycles
   762                           ; simple_byte           37    19 (average)
   763                           ; direct_byte           44     8 (fixed)
   764                           ; jumptable            260     6 (fixed)
   765                           ;	Chosen strategy is simple_byte
   766     0101  0832               	movf	??_main,w
   767     0102  3A00               	xorlw	0	; case 0
   768     0103  1903               	skipnz
   769     0104  28DB               	goto	l1381
   770     0105  3A01               	xorlw	1	; case 1
   771     0106  1903               	skipnz
   772     0107  28BD               	goto	l1375
   773     0108  3A03               	xorlw	3	; case 2
   774     0109  1903               	skipnz
   775     010A  289F               	goto	l1369
   776     010B  3A01               	xorlw	1	; case 3
   777     010C  1903               	skipnz
   778     010D  2881               	goto	l1363
   779     010E  3A07               	xorlw	7	; case 4
   780     010F  1903               	skipnz
   781     0110  28E5               	goto	l1383
   782     0111  3A01               	xorlw	1	; case 5
   783     0112  1903               	skipnz
   784     0113  28C7               	goto	l1377
   785     0114  3A03               	xorlw	3	; case 6
   786     0115  1903               	skipnz
   787     0116  28A9               	goto	l1371
   788     0117  3A01               	xorlw	1	; case 7
   789     0118  1903               	skipnz
   790     0119  288B               	goto	l1365
   791     011A  3A0F               	xorlw	15	; case 8
   792     011B  1903               	skipnz
   793     011C  28EF               	goto	l1385
   794     011D  3A01               	xorlw	1	; case 9
   795     011E  1903               	skipnz
   796     011F  28D1               	goto	l1379
   797     0120  3A03               	xorlw	3	; case 10
   798     0121  1903               	skipnz
   799     0122  28B3               	goto	l1373
   800     0123  3A01               	xorlw	1	; case 11
   801     0124  1903               	skipnz
   802     0125  2895               	goto	l1367
   803     0126  2853               	goto	l1345
   804     0127  120A  118A  2810   	ljmp	start
   805     012A                     __end_of_main:
   806                           
   807                           	psect	text1
   808     033C                     __ptext1:	
   809 ;; *************** function _initUART *****************
   810 ;; Defined at:
   811 ;;		line 203 in file "main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  baudRate        4   14[BANK0 ] long 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         0       4       0       0       0
   826 ;;      Locals:         0       0       0       0       0
   827 ;;      Temps:          4       0       0       0       0
   828 ;;      Totals:         4       4       0       0       0
   829 ;;Total ram usage:        8 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 2
   832 ;; This function calls:
   833 ;;		___aldiv
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839     033C                     _initUART:	
   840                           ;psect for function _initUART
   841                           
   842     033C                     l1051:	
   843                           ;incstack = 0
   844                           ; Regs used in _initUART: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   845                           
   846                           
   847                           ;main.c: 204:     TRISCbits.TRISC7 = 1;
   848     033C  1683               	bsf	3,5	;RP0=1, select bank1
   849     033D  1303               	bcf	3,6	;RP1=0, select bank1
   850     033E  1787               	bsf	7,7	;volatile
   851                           
   852                           ;main.c: 205:     TRISCbits.TRISC6 = 0;
   853     033F  1307               	bcf	7,6	;volatile
   854                           
   855                           ;main.c: 207:     TXSTAbits.TXEN = 1;
   856     0340  1698               	bsf	24,5	;volatile
   857                           
   858                           ;main.c: 208:     RCSTAbits.SPEN = 1;
   859     0341  1283               	bcf	3,5	;RP0=0, select bank0
   860     0342  1303               	bcf	3,6	;RP1=0, select bank0
   861     0343  1798               	bsf	24,7	;volatile
   862                           
   863                           ;main.c: 209:     RCSTAbits.CREN = 1;
   864     0344  1618               	bsf	24,4	;volatile
   865     0345                     l1053:
   866                           
   867                           ;main.c: 210:     SPBRG = (8000000 / (long) (64UL * baudRate)) - 1;
   868     0345  082E               	movf	initUART@baudRate,w
   869     0346  00F5               	movwf	??_initUART
   870     0347  082F               	movf	initUART@baudRate+1,w
   871     0348  00F6               	movwf	??_initUART+1
   872     0349  0830               	movf	initUART@baudRate+2,w
   873     034A  00F7               	movwf	??_initUART+2
   874     034B  0831               	movf	initUART@baudRate+3,w
   875     034C  00F8               	movwf	??_initUART+3
   876     034D  3006               	movlw	6
   877     034E                     u405:
   878     034E  1003               	clrc
   879     034F  0DF5               	rlf	??_initUART,f
   880     0350  0DF6               	rlf	??_initUART+1,f
   881     0351  0DF7               	rlf	??_initUART+2,f
   882     0352  0DF8               	rlf	??_initUART+3,f
   883     0353                     u400:
   884     0353  3EFF               	addlw	-1
   885     0354  1D03               	skipz
   886     0355  2B4E               	goto	u405
   887     0356  0878               	movf	??_initUART+3,w
   888     0357  00A3               	movwf	___aldiv@divisor+3
   889     0358  0877               	movf	??_initUART+2,w
   890     0359  00A2               	movwf	___aldiv@divisor+2
   891     035A  0876               	movf	??_initUART+1,w
   892     035B  00A1               	movwf	___aldiv@divisor+1
   893     035C  0875               	movf	??_initUART,w
   894     035D  00A0               	movwf	___aldiv@divisor
   895     035E  3000               	movlw	0
   896     035F  00A7               	movwf	___aldiv@dividend+3
   897     0360  307A               	movlw	122
   898     0361  00A6               	movwf	___aldiv@dividend+2
   899     0362  3012               	movlw	18
   900     0363  00A5               	movwf	___aldiv@dividend+1
   901     0364  3000               	movlw	0
   902     0365  00A4               	movwf	___aldiv@dividend
   903     0366  120A  118A  21CE  120A  118A  	fcall	___aldiv
   904     036B  1283               	bcf	3,5	;RP0=0, select bank0
   905     036C  1303               	bcf	3,6	;RP1=0, select bank0
   906     036D  0820               	movf	?___aldiv,w
   907     036E  3EFF               	addlw	255
   908     036F  1683               	bsf	3,5	;RP0=1, select bank1
   909     0370  1303               	bcf	3,6	;RP1=0, select bank1
   910     0371  0099               	movwf	25	;volatile
   911     0372                     l1055:
   912                           
   913                           ;main.c: 212:     INTCONbits.GIE = 1;
   914     0372  178B               	bsf	11,7	;volatile
   915     0373                     l1057:
   916                           
   917                           ;main.c: 213:     INTCONbits.PEIE = 1;
   918     0373  170B               	bsf	11,6	;volatile
   919     0374                     l1059:
   920                           
   921                           ;main.c: 214:     PIE1bits.RCIE = 1;
   922     0374  168C               	bsf	12,5	;volatile
   923     0375                     l113:
   924     0375  0008               	return
   925     0376                     __end_of_initUART:
   926                           
   927                           	psect	text2
   928     01CE                     __ptext2:	
   929 ;; *************** function ___aldiv *****************
   930 ;; Defined at:
   931 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;  divisor         4    0[BANK0 ] long 
   934 ;;  dividend        4    4[BANK0 ] long 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  quotient        4   10[BANK0 ] long 
   937 ;;  sign            1    9[BANK0 ] unsigned char 
   938 ;;  counter         1    8[BANK0 ] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  4    0[BANK0 ] long 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, btemp+1
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       8       0       0       0
   949 ;;      Locals:         0       6       0       0       0
   950 ;;      Temps:          1       0       0       0       0
   951 ;;      Totals:         1      14       0       0       0
   952 ;;Total ram usage:       15 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 1
   955 ;; This function calls:
   956 ;;		Nothing
   957 ;; This function is called by:
   958 ;;		_initUART
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962     01CE                     ___aldiv:	
   963                           ;psect for function ___aldiv
   964                           
   965     01CE                     l981:	
   966                           ;incstack = 0
   967                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   968                           
   969     01CE  1283               	bcf	3,5	;RP0=0, select bank0
   970     01CF  1303               	bcf	3,6	;RP1=0, select bank0
   971     01D0  01A9               	clrf	___aldiv@sign
   972     01D1                     l983:
   973     01D1  1FA3               	btfss	___aldiv@divisor+3,7
   974     01D2  29D4               	goto	u301
   975     01D3  29D5               	goto	u300
   976     01D4                     u301:
   977     01D4  29E2               	goto	l280
   978     01D5                     u300:
   979     01D5                     l985:
   980     01D5  09A0               	comf	___aldiv@divisor,f
   981     01D6  09A1               	comf	___aldiv@divisor+1,f
   982     01D7  09A2               	comf	___aldiv@divisor+2,f
   983     01D8  09A3               	comf	___aldiv@divisor+3,f
   984     01D9  0AA0               	incf	___aldiv@divisor,f
   985     01DA  1903               	skipnz
   986     01DB  0AA1               	incf	___aldiv@divisor+1,f
   987     01DC  1903               	skipnz
   988     01DD  0AA2               	incf	___aldiv@divisor+2,f
   989     01DE  1903               	skipnz
   990     01DF  0AA3               	incf	___aldiv@divisor+3,f
   991     01E0  01A9               	clrf	___aldiv@sign
   992     01E1  0AA9               	incf	___aldiv@sign,f
   993     01E2                     l280:
   994     01E2  1FA7               	btfss	___aldiv@dividend+3,7
   995     01E3  29E5               	goto	u311
   996     01E4  29E6               	goto	u310
   997     01E5                     u311:
   998     01E5  29F5               	goto	l991
   999     01E6                     u310:
  1000     01E6                     l987:
  1001     01E6  09A4               	comf	___aldiv@dividend,f
  1002     01E7  09A5               	comf	___aldiv@dividend+1,f
  1003     01E8  09A6               	comf	___aldiv@dividend+2,f
  1004     01E9  09A7               	comf	___aldiv@dividend+3,f
  1005     01EA  0AA4               	incf	___aldiv@dividend,f
  1006     01EB  1903               	skipnz
  1007     01EC  0AA5               	incf	___aldiv@dividend+1,f
  1008     01ED  1903               	skipnz
  1009     01EE  0AA6               	incf	___aldiv@dividend+2,f
  1010     01EF  1903               	skipnz
  1011     01F0  0AA7               	incf	___aldiv@dividend+3,f
  1012     01F1                     l989:
  1013     01F1  3001               	movlw	1
  1014     01F2  00FF               	movwf	btemp+1
  1015     01F3  087F               	movf	btemp+1,w
  1016     01F4  06A9               	xorwf	___aldiv@sign,f
  1017     01F5                     l991:
  1018     01F5  3000               	movlw	0
  1019     01F6  00AD               	movwf	___aldiv@quotient+3
  1020     01F7  3000               	movlw	0
  1021     01F8  00AC               	movwf	___aldiv@quotient+2
  1022     01F9  3000               	movlw	0
  1023     01FA  00AB               	movwf	___aldiv@quotient+1
  1024     01FB  3000               	movlw	0
  1025     01FC  00AA               	movwf	___aldiv@quotient
  1026     01FD                     l993:
  1027     01FD  0823               	movf	___aldiv@divisor+3,w
  1028     01FE  0422               	iorwf	___aldiv@divisor+2,w
  1029     01FF  0421               	iorwf	___aldiv@divisor+1,w
  1030     0200  0420               	iorwf	___aldiv@divisor,w
  1031     0201  1903               	skipnz
  1032     0202  2A04               	goto	u321
  1033     0203  2A05               	goto	u320
  1034     0204                     u321:
  1035     0204  2A52               	goto	l1015
  1036     0205                     u320:
  1037     0205                     l995:
  1038     0205  01A8               	clrf	___aldiv@counter
  1039     0206  0AA8               	incf	___aldiv@counter,f
  1040     0207  2A15               	goto	l1001
  1041     0208                     l997:
  1042     0208  3001               	movlw	1
  1043     0209  00F4               	movwf	??___aldiv
  1044     020A                     u335:
  1045     020A  1003               	clrc
  1046     020B  0DA0               	rlf	___aldiv@divisor,f
  1047     020C  0DA1               	rlf	___aldiv@divisor+1,f
  1048     020D  0DA2               	rlf	___aldiv@divisor+2,f
  1049     020E  0DA3               	rlf	___aldiv@divisor+3,f
  1050     020F  0BF4               	decfsz	??___aldiv,f
  1051     0210  2A0A               	goto	u335
  1052     0211                     l999:
  1053     0211  3001               	movlw	1
  1054     0212  00FF               	movwf	btemp+1
  1055     0213  087F               	movf	btemp+1,w
  1056     0214  07A8               	addwf	___aldiv@counter,f
  1057     0215                     l1001:
  1058     0215  1FA3               	btfss	___aldiv@divisor+3,7
  1059     0216  2A18               	goto	u341
  1060     0217  2A19               	goto	u340
  1061     0218                     u341:
  1062     0218  2A08               	goto	l997
  1063     0219                     u340:
  1064     0219                     l1003:
  1065     0219  3001               	movlw	1
  1066     021A  00F4               	movwf	??___aldiv
  1067     021B                     u355:
  1068     021B  1003               	clrc
  1069     021C  0DAA               	rlf	___aldiv@quotient,f
  1070     021D  0DAB               	rlf	___aldiv@quotient+1,f
  1071     021E  0DAC               	rlf	___aldiv@quotient+2,f
  1072     021F  0DAD               	rlf	___aldiv@quotient+3,f
  1073     0220  0BF4               	decfsz	??___aldiv,f
  1074     0221  2A1B               	goto	u355
  1075     0222                     l1005:
  1076     0222  0823               	movf	___aldiv@divisor+3,w
  1077     0223  0227               	subwf	___aldiv@dividend+3,w
  1078     0224  1D03               	skipz
  1079     0225  2A30               	goto	u365
  1080     0226  0822               	movf	___aldiv@divisor+2,w
  1081     0227  0226               	subwf	___aldiv@dividend+2,w
  1082     0228  1D03               	skipz
  1083     0229  2A30               	goto	u365
  1084     022A  0821               	movf	___aldiv@divisor+1,w
  1085     022B  0225               	subwf	___aldiv@dividend+1,w
  1086     022C  1D03               	skipz
  1087     022D  2A30               	goto	u365
  1088     022E  0820               	movf	___aldiv@divisor,w
  1089     022F  0224               	subwf	___aldiv@dividend,w
  1090     0230                     u365:
  1091     0230  1C03               	skipc
  1092     0231  2A33               	goto	u361
  1093     0232  2A34               	goto	u360
  1094     0233                     u361:
  1095     0233  2A43               	goto	l1011
  1096     0234                     u360:
  1097     0234                     l1007:
  1098     0234  0820               	movf	___aldiv@divisor,w
  1099     0235  02A4               	subwf	___aldiv@dividend,f
  1100     0236  0821               	movf	___aldiv@divisor+1,w
  1101     0237  1C03               	skipc
  1102     0238  0F21               	incfsz	___aldiv@divisor+1,w
  1103     0239  02A5               	subwf	___aldiv@dividend+1,f
  1104     023A  0822               	movf	___aldiv@divisor+2,w
  1105     023B  1C03               	skipc
  1106     023C  0F22               	incfsz	___aldiv@divisor+2,w
  1107     023D  02A6               	subwf	___aldiv@dividend+2,f
  1108     023E  0823               	movf	___aldiv@divisor+3,w
  1109     023F  1C03               	skipc
  1110     0240  0F23               	incfsz	___aldiv@divisor+3,w
  1111     0241  02A7               	subwf	___aldiv@dividend+3,f
  1112     0242                     l1009:
  1113     0242  142A               	bsf	___aldiv@quotient,0
  1114     0243                     l1011:
  1115     0243  3001               	movlw	1
  1116     0244                     u375:
  1117     0244  1003               	clrc
  1118     0245  0CA3               	rrf	___aldiv@divisor+3,f
  1119     0246  0CA2               	rrf	___aldiv@divisor+2,f
  1120     0247  0CA1               	rrf	___aldiv@divisor+1,f
  1121     0248  0CA0               	rrf	___aldiv@divisor,f
  1122     0249  3EFF               	addlw	-1
  1123     024A  1D03               	skipz
  1124     024B  2A44               	goto	u375
  1125     024C                     l1013:
  1126     024C  3001               	movlw	1
  1127     024D  02A8               	subwf	___aldiv@counter,f
  1128     024E  1D03               	btfss	3,2
  1129     024F  2A51               	goto	u381
  1130     0250  2A52               	goto	u380
  1131     0251                     u381:
  1132     0251  2A19               	goto	l1003
  1133     0252                     u380:
  1134     0252                     l1015:
  1135     0252  0829               	movf	___aldiv@sign,w
  1136     0253  1903               	btfsc	3,2
  1137     0254  2A56               	goto	u391
  1138     0255  2A57               	goto	u390
  1139     0256                     u391:
  1140     0256  2A62               	goto	l1019
  1141     0257                     u390:
  1142     0257                     l1017:
  1143     0257  09AA               	comf	___aldiv@quotient,f
  1144     0258  09AB               	comf	___aldiv@quotient+1,f
  1145     0259  09AC               	comf	___aldiv@quotient+2,f
  1146     025A  09AD               	comf	___aldiv@quotient+3,f
  1147     025B  0AAA               	incf	___aldiv@quotient,f
  1148     025C  1903               	skipnz
  1149     025D  0AAB               	incf	___aldiv@quotient+1,f
  1150     025E  1903               	skipnz
  1151     025F  0AAC               	incf	___aldiv@quotient+2,f
  1152     0260  1903               	skipnz
  1153     0261  0AAD               	incf	___aldiv@quotient+3,f
  1154     0262                     l1019:
  1155     0262  082D               	movf	___aldiv@quotient+3,w
  1156     0263  00A3               	movwf	?___aldiv+3
  1157     0264  082C               	movf	___aldiv@quotient+2,w
  1158     0265  00A2               	movwf	?___aldiv+2
  1159     0266  082B               	movf	___aldiv@quotient+1,w
  1160     0267  00A1               	movwf	?___aldiv+1
  1161     0268  082A               	movf	___aldiv@quotient,w
  1162     0269  00A0               	movwf	?___aldiv
  1163     026A                     l290:
  1164     026A  0008               	return
  1165     026B                     __end_of___aldiv:
  1166                           
  1167                           	psect	text3
  1168     026B                     __ptext3:	
  1169 ;; *************** function _initLCD *****************
  1170 ;; Defined at:
  1171 ;;		line 123 in file "main.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          0       2       0       0       0
  1188 ;;      Totals:         0       2       0       0       0
  1189 ;;Total ram usage:        2 bytes
  1190 ;; Hardware stack levels used: 1
  1191 ;; Hardware stack levels required when called: 2
  1192 ;; This function calls:
  1193 ;;		_sendLCD
  1194 ;; This function is called by:
  1195 ;;		_main
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199     026B                     _initLCD:	
  1200                           ;psect for function _initLCD
  1201                           
  1202     026B                     l1243:	
  1203                           ;incstack = 0
  1204                           ; Regs used in _initLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1205                           
  1206                           
  1207                           ;main.c: 124:     TRISD = 0x00;
  1208     026B  1683               	bsf	3,5	;RP0=1, select bank1
  1209     026C  1303               	bcf	3,6	;RP1=0, select bank1
  1210     026D  0188               	clrf	8	;volatile
  1211     026E                     l1245:
  1212                           
  1213                           ;main.c: 125:     TRISE &= ~0x06;
  1214     026E  30F9               	movlw	249
  1215     026F  00FF               	movwf	btemp+1
  1216     0270  087F               	movf	btemp+1,w
  1217     0271  0589               	andwf	9,f	;volatile
  1218     0272                     l1247:
  1219                           
  1220                           ;main.c: 127:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1221     0272  3034               	movlw	52
  1222     0273  1283               	bcf	3,5	;RP0=0, select bank0
  1223     0274  1303               	bcf	3,6	;RP1=0, select bank0
  1224     0275  00A1               	movwf	??_initLCD+1
  1225     0276  30F1               	movlw	241
  1226     0277  00A0               	movwf	??_initLCD
  1227     0278                     u657:
  1228     0278  0BA0               	decfsz	??_initLCD,f
  1229     0279  2A78               	goto	u657
  1230     027A  0BA1               	decfsz	??_initLCD+1,f
  1231     027B  2A78               	goto	u657
  1232     027C                     l1249:
  1233                           
  1234                           ;main.c: 128:     PORTEbits.RE1 = 1;
  1235     027C  1283               	bcf	3,5	;RP0=0, select bank0
  1236     027D  1303               	bcf	3,6	;RP1=0, select bank0
  1237     027E  1489               	bsf	9,1	;volatile
  1238     027F                     l1251:
  1239                           
  1240                           ;main.c: 129:     sendLCD(0x38, 0);
  1241     027F  01F4               	clrf	sendLCD@rs
  1242     0280  3038               	movlw	56
  1243     0281  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1244     0286                     l1253:
  1245                           
  1246                           ;main.c: 131:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1247     0286  300D               	movlw	13
  1248     0287  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0288  1303               	bcf	3,6	;RP1=0, select bank0
  1250     0289  00A1               	movwf	??_initLCD+1
  1251     028A  30FB               	movlw	251
  1252     028B  00A0               	movwf	??_initLCD
  1253     028C                     u667:
  1254     028C  0BA0               	decfsz	??_initLCD,f
  1255     028D  2A8C               	goto	u667
  1256     028E  0BA1               	decfsz	??_initLCD+1,f
  1257     028F  2A8C               	goto	u667
  1258     0290                     l1255:
  1259                           
  1260                           ;main.c: 132:     sendLCD(0x38, 0);
  1261     0290  01F4               	clrf	sendLCD@rs
  1262     0291  3038               	movlw	56
  1263     0292  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1264     0297                     l1257:
  1265                           
  1266                           ;main.c: 134:     _delay((unsigned long)((1)*(8000000/4000.0)));
  1267     0297  3003               	movlw	3
  1268     0298  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0299  1303               	bcf	3,6	;RP1=0, select bank0
  1270     029A  00A1               	movwf	??_initLCD+1
  1271     029B  3097               	movlw	151
  1272     029C  00A0               	movwf	??_initLCD
  1273     029D                     u677:
  1274     029D  0BA0               	decfsz	??_initLCD,f
  1275     029E  2A9D               	goto	u677
  1276     029F  0BA1               	decfsz	??_initLCD+1,f
  1277     02A0  2A9D               	goto	u677
  1278     02A1                     l1259:
  1279                           
  1280                           ;main.c: 135:     sendLCD(0x38, 0);
  1281     02A1  01F4               	clrf	sendLCD@rs
  1282     02A2  3038               	movlw	56
  1283     02A3  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1284     02A8                     l1261:
  1285                           
  1286                           ;main.c: 137:     sendLCD(0x08, 0);
  1287     02A8  01F4               	clrf	sendLCD@rs
  1288     02A9  3008               	movlw	8
  1289     02AA  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1290     02AF                     l1263:
  1291                           
  1292                           ;main.c: 138:     sendLCD(0x0F, 0);
  1293     02AF  01F4               	clrf	sendLCD@rs
  1294     02B0  300F               	movlw	15
  1295     02B1  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1296     02B6                     l1265:
  1297                           
  1298                           ;main.c: 139:     sendLCD(0x01, 0);
  1299     02B6  01F4               	clrf	sendLCD@rs
  1300     02B7  3001               	movlw	1
  1301     02B8  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1302     02BD                     l1267:
  1303                           
  1304                           ;main.c: 140:     sendLCD(0x0E, 0);
  1305     02BD  01F4               	clrf	sendLCD@rs
  1306     02BE  300E               	movlw	14
  1307     02BF  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1308     02C4                     l1269:
  1309                           
  1310                           ;main.c: 141:     sendLCD(0x80, 0);
  1311     02C4  01F4               	clrf	sendLCD@rs
  1312     02C5  3080               	movlw	128
  1313     02C6  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1314     02CB                     l90:
  1315     02CB  0008               	return
  1316     02CC                     __end_of_initLCD:
  1317                           
  1318                           	psect	text4
  1319     012A                     __ptext4:	
  1320 ;; *************** function _buttonMatrix *****************
  1321 ;; Defined at:
  1322 ;;		line 166 in file "main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  row             1    7[BANK0 ] unsigned char 
  1327 ;;  read            1    4[BANK0 ] unsigned char 
  1328 ;;  col             1    6[BANK0 ] unsigned char 
  1329 ;;  k               1    5[BANK0 ] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      unsigned char 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1339 ;;      Params:         0       0       0       0       0
  1340 ;;      Locals:         0       4       0       0       0
  1341 ;;      Temps:          0       2       0       0       0
  1342 ;;      Totals:         0       6       0       0       0
  1343 ;;Total ram usage:        6 bytes
  1344 ;; Hardware stack levels used: 1
  1345 ;; Hardware stack levels required when called: 3
  1346 ;; This function calls:
  1347 ;;		_printStringLCD
  1348 ;; This function is called by:
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353     012A                     _buttonMatrix:	
  1354                           ;psect for function _buttonMatrix
  1355                           
  1356     012A                     l1271:	
  1357                           ;incstack = 0
  1358                           ; Regs used in _buttonMatrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1359                           
  1360                           
  1361                           ;main.c: 167:     char k = 99;
  1362     012A  3063               	movlw	99
  1363     012B  1283               	bcf	3,5	;RP0=0, select bank0
  1364     012C  1303               	bcf	3,6	;RP1=0, select bank0
  1365     012D  00A5               	movwf	buttonMatrix@k
  1366                           
  1367                           ;main.c: 168:     TRISB = 0x3F;
  1368     012E  303F               	movlw	63
  1369     012F  1683               	bsf	3,5	;RP0=1, select bank1
  1370     0130  1303               	bcf	3,6	;RP1=0, select bank1
  1371     0131  0086               	movwf	6	;volatile
  1372     0132                     l1273:
  1373                           
  1374                           ;main.c: 170:     if (~PORTB & TRISB) {
  1375     0132  1283               	bcf	3,5	;RP0=0, select bank0
  1376     0133  1303               	bcf	3,6	;RP1=0, select bank0
  1377     0134  0906               	comf	6,w	;volatile
  1378     0135  1683               	bsf	3,5	;RP0=1, select bank1
  1379     0136  1303               	bcf	3,6	;RP1=0, select bank1
  1380     0137  0506               	andwf	6,w	;volatile
  1381     0138  1903               	btfsc	3,2
  1382     0139  293B               	goto	u551
  1383     013A  293C               	goto	u550
  1384     013B                     u551:
  1385     013B  2957               	goto	l1285
  1386     013C                     u550:
  1387     013C                     l1275:
  1388                           
  1389                           ;main.c: 171:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1390     013C  3006               	movlw	6
  1391     013D  1283               	bcf	3,5	;RP0=0, select bank0
  1392     013E  1303               	bcf	3,6	;RP1=0, select bank0
  1393     013F  00A3               	movwf	??_buttonMatrix+1
  1394     0140  302F               	movlw	47
  1395     0141  00A2               	movwf	??_buttonMatrix
  1396     0142                     u687:
  1397     0142  0BA2               	decfsz	??_buttonMatrix,f
  1398     0143  2942               	goto	u687
  1399     0144  0BA3               	decfsz	??_buttonMatrix+1,f
  1400     0145  2942               	goto	u687
  1401     0146  2947               	nop2
  1402     0147                     l1277:
  1403                           
  1404                           ;main.c: 173:         TRISD = 0x00;
  1405     0147  1683               	bsf	3,5	;RP0=1, select bank1
  1406     0148  1303               	bcf	3,6	;RP1=0, select bank1
  1407     0149  0188               	clrf	8	;volatile
  1408     014A                     l1279:
  1409                           
  1410                           ;main.c: 174:         printStringLCD("TRISB");
  1411     014A  300A               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1412     014B  1283               	bcf	3,5	;RP0=0, select bank0
  1413     014C  1303               	bcf	3,6	;RP1=0, select bank0
  1414     014D  00A0               	movwf	printStringLCD@s
  1415     014E  3080               	movlw	128
  1416     014F  00A1               	movwf	printStringLCD@s+1
  1417     0150  120A  118A  2376  120A  118A  	fcall	_printStringLCD
  1418     0155                     l1281:
  1419                           
  1420                           ;main.c: 175:         return 55;
  1421     0155  3037               	movlw	55
  1422     0156  29CD               	goto	l104
  1423     0157                     l1285:
  1424                           
  1425                           ;main.c: 177:     if (~PORTA & TRISA) {
  1426     0157  1283               	bcf	3,5	;RP0=0, select bank0
  1427     0158  1303               	bcf	3,6	;RP1=0, select bank0
  1428     0159  0905               	comf	5,w	;volatile
  1429     015A  1683               	bsf	3,5	;RP0=1, select bank1
  1430     015B  1303               	bcf	3,6	;RP1=0, select bank1
  1431     015C  0505               	andwf	5,w	;volatile
  1432     015D  1903               	btfsc	3,2
  1433     015E  2960               	goto	u561
  1434     015F  2961               	goto	u560
  1435     0160                     u561:
  1436     0160  297B               	goto	l1297
  1437     0161                     u560:
  1438     0161                     l1287:
  1439                           
  1440                           ;main.c: 178:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1441     0161  3006               	movlw	6
  1442     0162  1283               	bcf	3,5	;RP0=0, select bank0
  1443     0163  1303               	bcf	3,6	;RP1=0, select bank0
  1444     0164  00A3               	movwf	??_buttonMatrix+1
  1445     0165  302F               	movlw	47
  1446     0166  00A2               	movwf	??_buttonMatrix
  1447     0167                     u697:
  1448     0167  0BA2               	decfsz	??_buttonMatrix,f
  1449     0168  2967               	goto	u697
  1450     0169  0BA3               	decfsz	??_buttonMatrix+1,f
  1451     016A  2967               	goto	u697
  1452     016B  296C               	nop2
  1453     016C                     l1289:
  1454                           
  1455                           ;main.c: 180:         TRISD = 0x00;
  1456     016C  1683               	bsf	3,5	;RP0=1, select bank1
  1457     016D  1303               	bcf	3,6	;RP1=0, select bank1
  1458     016E  0188               	clrf	8	;volatile
  1459     016F                     l1291:
  1460                           
  1461                           ;main.c: 181:         printStringLCD("TRISA");
  1462     016F  3004               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1463     0170  1283               	bcf	3,5	;RP0=0, select bank0
  1464     0171  1303               	bcf	3,6	;RP1=0, select bank0
  1465     0172  00A0               	movwf	printStringLCD@s
  1466     0173  3080               	movlw	128
  1467     0174  00A1               	movwf	printStringLCD@s+1
  1468     0175  120A  118A  2376  120A  118A  	fcall	_printStringLCD
  1469     017A  2955               	goto	l1281
  1470     017B                     l1297:
  1471                           
  1472                           ;main.c: 184:     TRISD = 0x0F;
  1473     017B  300F               	movlw	15
  1474     017C  0088               	movwf	8	;volatile
  1475     017D                     l1299:
  1476                           
  1477                           ;main.c: 185:     TRISB &= ~0x07;
  1478     017D  30F8               	movlw	248
  1479     017E  00FF               	movwf	btemp+1
  1480     017F  087F               	movf	btemp+1,w
  1481     0180  0586               	andwf	6,f	;volatile
  1482     0181                     l1301:
  1483                           
  1484                           ;main.c: 187:     for (char col = 0; col < 3; col++) {
  1485     0181  1283               	bcf	3,5	;RP0=0, select bank0
  1486     0182  1303               	bcf	3,6	;RP1=0, select bank0
  1487     0183  01A6               	clrf	buttonMatrix@col
  1488     0184                     l1307:
  1489                           
  1490                           ;main.c: 189:         PORTB = columnConfig[col];
  1491     0184  0826               	movf	buttonMatrix@col,w
  1492     0185  3E01               	addlw	low ((_columnConfig-__stringbase)| (0+32768))
  1493     0186  0084               	movwf	4
  1494     0187  120A  118A  230A  120A  118A  	fcall	stringdir
  1495     018C  0086               	movwf	6	;volatile
  1496     018D                     l1309:
  1497                           
  1498                           ;main.c: 190:         _delay((unsigned long)((50)*(8000000/4000000.0)));
  1499     018D  3020               	movlw	32
  1500     018E  1283               	bcf	3,5	;RP0=0, select bank0
  1501     018F  1303               	bcf	3,6	;RP1=0, select bank0
  1502     0190  00A2               	movwf	??_buttonMatrix
  1503     0191                     u707:
  1504     0191  0BA2               	decfsz	??_buttonMatrix,f
  1505     0192  2991               	goto	u707
  1506     0193  0000               	nop
  1507     0194                     l1311:
  1508                           
  1509                           ;main.c: 192:         char read = ~PORTD & TRISD;
  1510     0194  1283               	bcf	3,5	;RP0=0, select bank0
  1511     0195  1303               	bcf	3,6	;RP1=0, select bank0
  1512     0196  0908               	comf	8,w	;volatile
  1513     0197  1683               	bsf	3,5	;RP0=1, select bank1
  1514     0198  1303               	bcf	3,6	;RP1=0, select bank1
  1515     0199  0508               	andwf	8,w	;volatile
  1516     019A  1283               	bcf	3,5	;RP0=0, select bank0
  1517     019B  1303               	bcf	3,6	;RP1=0, select bank0
  1518     019C  00A4               	movwf	buttonMatrix@read
  1519     019D                     l1313:
  1520                           
  1521                           ;main.c: 194:         for (char row = 0; row < 4; row++) {
  1522     019D  01A7               	clrf	buttonMatrix@row
  1523     019E                     l1319:
  1524                           
  1525                           ;main.c: 195:             if (read & (1 << row)) {
  1526     019E  3001               	movlw	1
  1527     019F  00A2               	movwf	??_buttonMatrix
  1528     01A0  0A27               	incf	buttonMatrix@row,w
  1529     01A1  29A4               	goto	u574
  1530     01A2                     u575:
  1531     01A2  1003               	clrc
  1532     01A3  0DA2               	rlf	??_buttonMatrix,f
  1533     01A4                     u574:
  1534     01A4  3EFF               	addlw	-1
  1535     01A5  1D03               	skipz
  1536     01A6  29A2               	goto	u575
  1537     01A7  0822               	movf	??_buttonMatrix,w
  1538     01A8  0524               	andwf	buttonMatrix@read,w
  1539     01A9  1903               	btfsc	3,2
  1540     01AA  29AC               	goto	u581
  1541     01AB  29AD               	goto	u580
  1542     01AC                     u581:
  1543     01AC  29B8               	goto	l1323
  1544     01AD                     u580:
  1545     01AD                     l1321:
  1546                           
  1547                           ;main.c: 196:                 k = row + col * 4;
  1548     01AD  0826               	movf	buttonMatrix@col,w
  1549     01AE  00A2               	movwf	??_buttonMatrix
  1550     01AF  3002               	movlw	2
  1551     01B0                     u595:
  1552     01B0  1003               	clrc
  1553     01B1  0DA2               	rlf	??_buttonMatrix,f
  1554     01B2  3EFF               	addlw	-1
  1555     01B3  1D03               	skipz
  1556     01B4  29B0               	goto	u595
  1557     01B5  0827               	movf	buttonMatrix@row,w
  1558     01B6  0722               	addwf	??_buttonMatrix,w
  1559     01B7  00A5               	movwf	buttonMatrix@k
  1560     01B8                     l1323:
  1561                           
  1562                           ;main.c: 198:         }
  1563     01B8  3001               	movlw	1
  1564     01B9  00FF               	movwf	btemp+1
  1565     01BA  087F               	movf	btemp+1,w
  1566     01BB  07A7               	addwf	buttonMatrix@row,f
  1567     01BC                     l1325:
  1568     01BC  3004               	movlw	4
  1569     01BD  0227               	subwf	buttonMatrix@row,w
  1570     01BE  1C03               	skipc
  1571     01BF  29C1               	goto	u601
  1572     01C0  29C2               	goto	u600
  1573     01C1                     u601:
  1574     01C1  299E               	goto	l1319
  1575     01C2                     u600:
  1576     01C2                     l1327:
  1577                           
  1578                           ;main.c: 199:     }
  1579     01C2  3001               	movlw	1
  1580     01C3  00FF               	movwf	btemp+1
  1581     01C4  087F               	movf	btemp+1,w
  1582     01C5  07A6               	addwf	buttonMatrix@col,f
  1583     01C6                     l1329:
  1584     01C6  3003               	movlw	3
  1585     01C7  0226               	subwf	buttonMatrix@col,w
  1586     01C8  1C03               	skipc
  1587     01C9  29CB               	goto	u611
  1588     01CA  29CC               	goto	u610
  1589     01CB                     u611:
  1590     01CB  2984               	goto	l1307
  1591     01CC                     u610:
  1592     01CC                     l1331:
  1593                           
  1594                           ;main.c: 200:     return k;
  1595     01CC  0825               	movf	buttonMatrix@k,w
  1596     01CD                     l104:
  1597     01CD  0008               	return
  1598     01CE                     __end_of_buttonMatrix:
  1599                           
  1600                           	psect	text5
  1601     0376                     __ptext5:	
  1602 ;; *************** function _printStringLCD *****************
  1603 ;; Defined at:
  1604 ;;		line 156 in file "main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  s               2    0[BANK0 ] PTR unsigned char 
  1607 ;;		 -> STR_15(6), STR_14(6), STR_13(2), STR_12(2), 
  1608 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  1609 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  1610 ;;		 -> STR_3(2), STR_2(2), string(10), STR_1(5), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  i               1    8[COMMON] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1622 ;;      Params:         0       2       0       0       0
  1623 ;;      Locals:         1       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0
  1625 ;;      Totals:         1       2       0       0       0
  1626 ;;Total ram usage:        3 bytes
  1627 ;; Hardware stack levels used: 1
  1628 ;; Hardware stack levels required when called: 2
  1629 ;; This function calls:
  1630 ;;		_sendLCD
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;;		_buttonMatrix
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637     0376                     _printStringLCD:	
  1638                           ;psect for function _printStringLCD
  1639                           
  1640     0376                     l1231:	
  1641                           ;incstack = 0
  1642                           ; Regs used in _printStringLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1643                           
  1644                           
  1645                           ;main.c: 157:     if (bottone_premuto)
  1646     0376  0879               	movf	_bottone_premuto,w
  1647     0377  1903               	btfsc	3,2
  1648     0378  2B7A               	goto	u531
  1649     0379  2B7B               	goto	u530
  1650     037A                     u531:
  1651     037A  2B7C               	goto	l1235
  1652     037B                     u530:
  1653     037B  2BAA               	goto	l97
  1654     037C                     l1235:
  1655                           
  1656                           ;main.c: 159:     char i = 0;
  1657     037C  01F8               	clrf	printStringLCD@i
  1658                           
  1659                           ;main.c: 160:     while (s[i] != '\0') {
  1660     037D  2B95               	goto	l1241
  1661     037E                     l1237:
  1662                           
  1663                           ;main.c: 161:         sendLCD(s[i++], 1);
  1664     037E  01F4               	clrf	sendLCD@rs
  1665     037F  0AF4               	incf	sendLCD@rs,f
  1666     0380  0878               	movf	printStringLCD@i,w
  1667     0381  0720               	addwf	printStringLCD@s,w
  1668     0382  0084               	movwf	4
  1669     0383  0821               	movf	printStringLCD@s+1,w
  1670     0384  1803               	skipnc
  1671     0385  0A21               	incf	printStringLCD@s+1,w
  1672     0386  00FF               	movwf	btemp+1
  1673     0387  120A  118A  2300  120A  118A  	fcall	stringtab
  1674     038C  120A  118A  23D6  120A  118A  	fcall	_sendLCD
  1675     0391                     l1239:
  1676     0391  3001               	movlw	1
  1677     0392  00FF               	movwf	btemp+1
  1678     0393  087F               	movf	btemp+1,w
  1679     0394  07F8               	addwf	printStringLCD@i,f
  1680     0395                     l1241:
  1681                           
  1682                           ;main.c: 160:     while (s[i] != '\0') {
  1683     0395  0878               	movf	printStringLCD@i,w
  1684     0396  1283               	bcf	3,5	;RP0=0, select bank0
  1685     0397  1303               	bcf	3,6	;RP1=0, select bank0
  1686     0398  0720               	addwf	printStringLCD@s,w
  1687     0399  0084               	movwf	4
  1688     039A  0821               	movf	printStringLCD@s+1,w
  1689     039B  1803               	skipnc
  1690     039C  0A21               	incf	printStringLCD@s+1,w
  1691     039D  00FF               	movwf	btemp+1
  1692     039E  120A  118A  2300  120A  118A  	fcall	stringtab
  1693     03A3  3A00               	xorlw	0
  1694     03A4  1D03               	skipz
  1695     03A5  2BA7               	goto	u541
  1696     03A6  2BA8               	goto	u540
  1697     03A7                     u541:
  1698     03A7  2B7E               	goto	l1237
  1699     03A8                     u540:
  1700     03A8                     l100:
  1701                           
  1702                           ;main.c: 163:     bottone_premuto = 1;
  1703     03A8  01F9               	clrf	_bottone_premuto
  1704     03A9  0AF9               	incf	_bottone_premuto,f
  1705     03AA                     l97:
  1706     03AA  0008               	return
  1707     03AB                     __end_of_printStringLCD:
  1708                           
  1709                           	psect	text6
  1710     03D6                     __ptext6:	
  1711 ;; *************** function _sendLCD *****************
  1712 ;; Defined at:
  1713 ;;		line 144 in file "main.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  dato            1    wreg     unsigned char 
  1716 ;;  rs              1    4[COMMON] unsigned char 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  dato            1    7[COMMON] unsigned char 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,0
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1728 ;;      Params:         1       0       0       0       0
  1729 ;;      Locals:         1       0       0       0       0
  1730 ;;      Temps:          2       0       0       0       0
  1731 ;;      Totals:         4       0       0       0       0
  1732 ;;Total ram usage:        4 bytes
  1733 ;; Hardware stack levels used: 1
  1734 ;; Hardware stack levels required when called: 1
  1735 ;; This function calls:
  1736 ;;		Nothing
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;;		_initLCD
  1740 ;;		_printStringLCD
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744     03D6                     _sendLCD:	
  1745                           ;psect for function _sendLCD
  1746                           
  1747                           
  1748                           ;incstack = 0
  1749                           ; Regs used in _sendLCD: [wreg+status,0]
  1750                           ;sendLCD@dato stored from wreg
  1751     03D6  00F7               	movwf	sendLCD@dato
  1752     03D7                     l1217:
  1753                           
  1754                           ;main.c: 145:     PORTEbits.RE1 = 1;
  1755     03D7  1283               	bcf	3,5	;RP0=0, select bank0
  1756     03D8  1303               	bcf	3,6	;RP1=0, select bank0
  1757     03D9  1489               	bsf	9,1	;volatile
  1758     03DA                     l1219:
  1759                           
  1760                           ;main.c: 146:     PORTD = dato;
  1761     03DA  0877               	movf	sendLCD@dato,w
  1762     03DB  0088               	movwf	8	;volatile
  1763     03DC                     l1221:
  1764                           
  1765                           ;main.c: 147:     PORTEbits.RE2 = rs;
  1766     03DC  0C74               	rrf	sendLCD@rs,w
  1767     03DD  1C03               	skipc
  1768     03DE  1109               	bcf	9,2	;volatile
  1769     03DF  1803               	skipnc
  1770     03E0  1509               	bsf	9,2	;volatile
  1771     03E1                     l1223:
  1772                           
  1773                           ;main.c: 148:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1774     03E1  3008               	movlw	8
  1775     03E2  00F6               	movwf	??_sendLCD+1
  1776     03E3  30C9               	movlw	201
  1777     03E4  00F5               	movwf	??_sendLCD
  1778     03E5                     u717:
  1779     03E5  0BF5               	decfsz	??_sendLCD,f
  1780     03E6  2BE5               	goto	u717
  1781     03E7  0BF6               	decfsz	??_sendLCD+1,f
  1782     03E8  2BE5               	goto	u717
  1783     03E9  2BEA               	nop2
  1784     03EA                     l1225:
  1785                           
  1786                           ;main.c: 150:     PORTEbits.RE1 = 0;
  1787     03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1788     03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1789     03EC  1089               	bcf	9,1	;volatile
  1790     03ED                     l1227:
  1791                           
  1792                           ;main.c: 151:     _delay((unsigned long)((3)*(8000000/4000.0)));
  1793     03ED  3008               	movlw	8
  1794     03EE  00F6               	movwf	??_sendLCD+1
  1795     03EF  30C9               	movlw	201
  1796     03F0  00F5               	movwf	??_sendLCD
  1797     03F1                     u727:
  1798     03F1  0BF5               	decfsz	??_sendLCD,f
  1799     03F2  2BF1               	goto	u727
  1800     03F3  0BF6               	decfsz	??_sendLCD+1,f
  1801     03F4  2BF1               	goto	u727
  1802     03F5  2BF6               	nop2
  1803     03F6                     l1229:
  1804                           
  1805                           ;main.c: 153:     PORTEbits.RE1 = 1;
  1806     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1807     03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1808     03F8  1489               	bsf	9,1	;volatile
  1809     03F9                     l93:
  1810     03F9  0008               	return
  1811     03FA                     __end_of_sendLCD:
  1812                           
  1813                           	psect	text7
  1814     03AB                     __ptext7:	
  1815 ;; *************** function _ISR *****************
  1816 ;; Defined at:
  1817 ;;		line 228 in file "main.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1831 ;;      Params:         0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0
  1833 ;;      Temps:          4       0       0       0       0
  1834 ;;      Totals:         4       0       0       0       0
  1835 ;;Total ram usage:        4 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		Interrupt level 1
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844     03AB                     _ISR:	
  1845                           ;psect for function _ISR
  1846                           
  1847     03AB                     i1l1185:
  1848                           
  1849                           ;main.c: 229:     if (RCIF) {
  1850     03AB  1283               	bcf	3,5	;RP0=0, select bank0
  1851     03AC  1303               	bcf	3,6	;RP1=0, select bank0
  1852     03AD  1E8C               	btfss	12,5	;volatile
  1853     03AE  2BB0               	goto	u51_21
  1854     03AF  2BB1               	goto	u51_20
  1855     03B0                     u51_21:
  1856     03B0  2BCB               	goto	i1l129
  1857     03B1                     u51_20:
  1858     03B1                     i1l1187:
  1859                           
  1860                           ;main.c: 230:         string[index] = RCREG;
  1861     03B1  0835               	movf	_index,w
  1862     03B2  3E37               	addlw	(low (_string| 0))& (0+255)
  1863     03B3  0084               	movwf	4
  1864     03B4  081A               	movf	26,w	;volatile
  1865     03B5  1383               	bcf	3,7	;select IRP bank0
  1866     03B6  0080               	movwf	0
  1867     03B7                     i1l1189:
  1868                           
  1869                           ;main.c: 231:         RCIF = 0;
  1870     03B7  128C               	bcf	12,5	;volatile
  1871                           
  1872                           ;main.c: 233:         if(string[index] == 13){
  1873     03B8  0835               	movf	_index,w
  1874     03B9  3E37               	addlw	(low (_string| 0))& (0+255)
  1875     03BA  0084               	movwf	4
  1876     03BB  300D               	movlw	13
  1877     03BC  0600               	xorwf	0,w
  1878     03BD  1D03               	btfss	3,2
  1879     03BE  2BC0               	goto	u52_21
  1880     03BF  2BC1               	goto	u52_20
  1881     03C0                     u52_21:
  1882     03C0  2BC7               	goto	i1l1195
  1883     03C1                     u52_20:
  1884     03C1                     i1l1191:
  1885                           
  1886                           ;main.c: 234:             string[index] = '\0';
  1887     03C1  0835               	movf	_index,w
  1888     03C2  3E37               	addlw	(low (_string| 0))& (0+255)
  1889     03C3  0084               	movwf	4
  1890     03C4  0180               	clrf	0
  1891     03C5                     i1l1193:
  1892                           
  1893                           ;main.c: 235:             endsend = 1;
  1894     03C5  01B4               	clrf	_endsend
  1895     03C6  0AB4               	incf	_endsend,f
  1896     03C7                     i1l1195:
  1897                           
  1898                           ;main.c: 237:         index++;
  1899     03C7  3001               	movlw	1
  1900     03C8  00FF               	movwf	btemp+1
  1901     03C9  087F               	movf	btemp+1,w
  1902     03CA  07B5               	addwf	_index,f
  1903     03CB                     i1l129:
  1904     03CB  0873               	movf	??_ISR+3,w
  1905     03CC  00FF               	movwf	btemp+1
  1906     03CD  0872               	movf	??_ISR+2,w
  1907     03CE  008A               	movwf	10
  1908     03CF  0871               	movf	??_ISR+1,w
  1909     03D0  0084               	movwf	4
  1910     03D1  0E70               	swapf	??_ISR,w
  1911     03D2  0083               	movwf	3
  1912     03D3  0EFE               	swapf	btemp,f
  1913     03D4  0E7E               	swapf	btemp,w
  1914     03D5  0009               	retfie
  1915     03D6                     __end_of_ISR:
  1916     007E                     btemp	set	126	;btemp
  1917     007E                     wtemp0	set	126
  1918                           
  1919                           	psect	intentry
  1920     0004                     __pintentry:	
  1921                           ;incstack = 0
  1922                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1923                           
  1924     0004                     interrupt_function:
  1925     007E                     saved_w	set	btemp
  1926     0004  00FE               	movwf	btemp
  1927     0005  0E03               	swapf	3,w
  1928     0006  00F0               	movwf	??_ISR
  1929     0007  0804               	movf	4,w
  1930     0008  00F1               	movwf	??_ISR+1
  1931     0009  080A               	movf	10,w
  1932     000A  00F2               	movwf	??_ISR+2
  1933     000B  087F               	movf	btemp+1,w
  1934     000C  00F3               	movwf	??_ISR+3
  1935     000D  120A  118A  2BAB   	ljmp	_ISR
  1936                           
  1937                           	psect	config
  1938                           
  1939                           ;Config register CONFIG @ 0x2007
  1940                           ;	Oscillator Selection bits
  1941                           ;	FOSC = HS, HS oscillator
  1942                           ;	Watchdog Timer Enable bit
  1943                           ;	WDTE = OFF, WDT disabled
  1944                           ;	Power-up Timer Enable bit
  1945                           ;	PWRTE = ON, PWRT enabled
  1946                           ;	Brown-out Reset Enable bit
  1947                           ;	BOREN = ON, BOR enabled
  1948                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1949                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1950                           ;	Data EEPROM Memory Code Protection bit
  1951                           ;	CPD = OFF, Data EEPROM code protection off
  1952                           ;	Flash Program Memory Write Enable bits
  1953                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1954                           ;	In-Circuit Debugger Mode bit
  1955                           ;	DEBUG = 0x1, unprogrammed default
  1956                           ;	Flash Program Memory Code Protection bit
  1957                           ;	CP = OFF, Code protection off
  1958     2007                     	org	8199
  1959     2007  3FF2               	dw	16370

Data Sizes:
    Strings     41
    Constant    3
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     20      33
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printStringLCD@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[5]), STR_10(CODE[2]), STR_11(CODE[2]), STR_12(CODE[2]), 
		 -> STR_13(CODE[2]), STR_14(CODE[6]), STR_15(CODE[6]), STR_2(CODE[2]), 
		 -> STR_3(CODE[2]), STR_4(CODE[2]), STR_5(CODE[2]), STR_6(CODE[2]), 
		 -> STR_7(CODE[2]), STR_8(CODE[2]), STR_9(CODE[2]), string(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_initUART
    _main->_printStringLCD
    _initUART->___aldiv
    _initLCD->_sendLCD
    _buttonMatrix->_printStringLCD
    _printStringLCD->_sendLCD

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initUART
    _initUART->___aldiv
    _buttonMatrix->_printStringLCD

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7869
                                             18 BANK0      2     2      0
                       _buttonMatrix
                            _initLCD
                           _initUART
                     _printStringLCD
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _initUART                                             8     4      4     550
                                              5 COMMON     4     4      0
                                             14 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              4 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              2     2      0     962
                                              0 BANK0      2     2      0
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _buttonMatrix                                         6     6      0    2863
                                              2 BANK0      6     6      0
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (1) _printStringLCD                                       3     1      2    2532
                                              8 COMMON     1     1      0
                                              0 BANK0      2     0      2
                            _sendLCD
 ---------------------------------------------------------------------------------
 (1) _sendLCD                                              4     3      1     962
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buttonMatrix
     _printStringLCD
       _sendLCD
   _initLCD
     _sendLCD
   _initUART
     ___aldiv
   _printStringLCD
   _sendLCD

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      21       5       41.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2B      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Feb 17 14:59:40 2024

                      _x 0036                        pc 0002                       l90 02CB  
                     l93 03F9                       l97 03AA                       fsr 0004  
                    l100 03A8                      l104 01CD                      l113 0375  
                    l280 01E2                      l290 026A                      l981 01CE  
                    l991 01F5                      l983 01D1                      l993 01FD  
                    l985 01D5                      l995 0205                      l987 01E6  
                    l997 0208                      l989 01F1                      l999 0211  
                    u300 01D5                      u301 01D4                      u310 01E6  
                    u311 01E5                      u320 0205                      u400 0353  
                    u321 0204                      u340 0219                      u341 0218  
                    u405 034E                      u335 020A                      u600 01C2  
                    u360 0234                      u601 01C1                      u361 0233  
                    u530 037B                      u610 01CC                      u531 037A  
                    u611 01CB                      u355 021B                      u540 03A8  
                    u380 0252                      u620 005A                      _ISR 03AB  
                    u541 03A7                      u381 0251                      u365 0230  
                    u621 0059                      u550 013C                      u390 0257  
                    u630 0073                      u551 013B                      u391 0256  
                    u375 0244                      u631 0072                      u560 0161  
                    u640 0080                      u561 0160                      u641 007F  
                    u707 0191                      u580 01AD                      u717 03E5  
                    u581 01AC                      u574 01A4                      u727 03F1  
                    u575 01A2                      u657 0278                      u595 01B0  
                    u667 028C                      u677 029D                      u687 0142  
                    u697 0167                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     l1001 0215                     l1011 0243  
                   l1003 0219                     l1013 024C                     l1005 0222  
                   l1007 0234                     l1015 0252                     l1017 0257  
                   l1009 0242                     l1019 0262                     l1051 033C  
                   l1221 03DC                     l1301 0181                     l1053 0345  
                   l1223 03E1                     l1231 0376                     l1311 0194  
                   l1055 0372                     l1225 03EA                     l1217 03D7  
                   l1241 0395                     l1321 01AD                     l1313 019D  
                   l1057 0373                     l1227 03ED                     l1219 03DA  
                   l1235 037C                     l1331 01CC                     l1323 01B8  
                   l1307 0184                     l1251 027F                     l1243 026B  
                   l1059 0374                     l1229 03F6                     l1237 037E  
                   l1325 01BC                     l1309 018D                     l1261 02A8  
                   l1253 0286                     l1245 026E                     l1341 004D  
                   l1239 0391                     l1327 01C2                     l1319 019E  
                   l1271 012A                     l1263 02AF                     l1255 0290  
                   l1247 0272                     l1415 0101                     l1351 0065  
                   l1343 0051                     l1335 0027                     l1329 01C6  
                   l1281 0155                     l1273 0132                     l1265 02B6  
                   l1257 0297                     l1249 027C                     l1353 006D  
                   l1345 0053                     l1337 003B                     l1291 016F  
                   l1275 013C                     l1267 02BD                     l1259 02A1  
                   l1371 00A9                     l1363 0081                     l1355 0073  
                   l1347 005A                     l1339 0046                     l1277 0147  
                   l1285 0157                     l1269 02C4                     l1381 00DB  
                   l1373 00B3                     l1365 008B                     l1357 0075  
                   l1349 005C                     l1287 0161                     l1279 014A  
                   l1383 00E5                     l1375 00BD                     l1367 0095  
                   l1359 0078                     l1289 016C                     l1297 017B  
                   l1385 00EF                     l1377 00C7                     l1369 009F  
                   l1299 017D                     l1379 00D1                     l1389 00F9  
                   STR_1 031F                     STR_2 032A                     STR_3 032C  
                   STR_4 032E                     STR_5 0330                     STR_6 0332  
                   STR_7 0334                     STR_8 0336                     STR_9 0338  
                   _RCIF 0065                     _main 0027                     btemp 007E  
                   start 0010                    ??_ISR 0070          __end_of___aldiv 026B  
                  ?_main 0070                    STR_10 033A                    STR_11 0326  
                  STR_12 0328                    STR_13 0324                    STR_14 0319  
                  STR_15 0313                    i1l129 03CB                    _RCREG 001A  
                  _SPBRG 0099                    u51_20 03B1                    u51_21 03B0  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  u52_20 03C1                    u52_21 03C0                    _TRISA 0085  
                  _TRISB 0086                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019          __end_of_initLCD 02CC                    _index 0035  
        __end_of_sendLCD 03FA                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0013             __end_of_main 012A  
                 ??_main 0032                   _ADCON1 009F                   i1l1191 03C1  
                 i1l1193 03C5                   i1l1185 03AB                   i1l1195 03C7  
                 i1l1187 03B1                   i1l1189 03B7            ?_buttonMatrix 0070  
              ??___aldiv 0074         __end_of_initUART 0376         ??_printStringLCD 0078  
                 _string 0037                ??_initLCD 0020                ??_sendLCD 0075  
                 saved_w 007E         initUART@baudRate 002E           ??_buttonMatrix 0022  
__end_of__initialization 0023              sendLCD@dato 0077           __pcstackCOMMON 0070  
   __end_of_columnConfig 0313               __pbssBANK0 0034               __pmaintext 0027  
             __pintentry 0004               __stringtab 0300                ?_initUART 002E  
                ___aldiv 01CE     __end_of_buttonMatrix 01CE                  __ptext1 033C  
                __ptext2 01CE                  __ptext3 026B                  __ptext4 012A  
                __ptext5 0376                  __ptext6 03D6                  __ptext7 03AB  
                _endsend 0034                  _initLCD 026B                  _sendLCD 03D6  
       ___aldiv@dividend 0024          printStringLCD@i 0078          printStringLCD@s 0020  
   end_of_initialization 0023               ??_initUART 0075                _RCSTAbits 0018  
       ___aldiv@quotient 002A                _PORTEbits 0009          _bottone_premuto 0079  
        buttonMatrix@col 0026          buttonMatrix@row 0027                _TRISCbits 0087  
           _columnConfig 0310                _TXSTAbits 0098      start_initialization 0013  
            __end_of_ISR 03D6              __pbssCOMMON 0079                ___latbits 0002  
          __pcstackBANK0 0020             _buttonMatrix 012A                 ?___aldiv 0020  
              __pstrings 0300                 ?_initLCD 0070                 ?_sendLCD 0074  
        ___aldiv@divisor 0020        interrupt_function 0004          ___aldiv@counter 0028  
               _PIE1bits 008C                 _PIR1bits 000C              __stringbase 030F  
              sendLCD@rs 0074       __end_of__stringtab 0310           _printStringLCD 0376  
               _initUART 033C            buttonMatrix@k 0025               _INTCONbits 000B  
 __end_of_printStringLCD 03AB                 intlevel1 0000                stringcode 030A  
               stringdir 030A                 stringtab 0300             ___aldiv@sign 0029  
        ?_printStringLCD 0020         buttonMatrix@read 0024  
